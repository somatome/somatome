<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stack Overflow まとめ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://so-matome.net/"/>
  <updated>2017-12-15T22:00:01.225Z</updated>
  <id>https://so-matome.net/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(6)　Linus Torvalds：Linuxの背後にある心 [Video]</title>
    <link href="https://so-matome.net/2017/12/15/ted-talks-programming-everyone-must-watch-6/"/>
    <id>https://so-matome.net/2017/12/15/ted-talks-programming-everyone-must-watch-6/</id>
    <published>2017-12-15T22:00:01.000Z</published>
    <updated>2017-12-15T22:00:01.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linus-Torvalds：Linuxの背後にある心"><a href="#Linus-Torvalds：Linuxの背後にある心" class="headerlink" title="Linus Torvalds：Linuxの背後にある心"></a>Linus Torvalds：Linuxの背後にある心</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第３段は「Linus Torvalds：Linuxの背後にある心」。以下のように紹介されています：</p><blockquote><p>実際にTEDトークではなく、代わりにLinuxオペレーティングシステムの背後にいる「悪名高い」人物であるLinus Torvaldsとの対話を紹介する、プログラミングに関するTED Talkです。 この21分のインタビューでは、彼がエンジニアとオープンソースの代弁者になるための彼の考え方と動機について解説しています。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/iG9CE55wbtY?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>Chris Anderson: This is such a strange thing.<br><br>Your software, Linux, is in millions of computers, it probably powers much of the Internet.<br><br>And I think that there are, like, a billion and a half active Android devices out there.<br><br>Your software is in every single one of them.<br><br>It&#39;s kind of amazing.<br><br>You must have some amazing software headquarters driving all this.<br><br>That&#39;s what I thought – and I was shocked when I saw a picture of it.<br><br>I mean, this is – this is the Linux world headquarters.<br><br>(Laughter) (Applause) Linus Torvalds: It really doesn&#39;t look like much.<br><br>And I have to say, the most interesting part in this picture, that people mostly react to, is the walking desk.<br><br>It is the most interesting part in my office and I&#39;m not actually using it anymore.<br><br>And I think the two things are related.<br><br>The way I work is …<br><br>I want to not have external stimulation.<br><br>You can kind of see, on the walls are this light green.<br><br>I&#39;m told that at mental institutions they use that on the walls.<br><br>(Laughter) It&#39;s like a calming color, it&#39;s not something that really stimulates you.<br><br>What you can&#39;t see is the computer here, you only see the screen, but the main thing I worry about in my computer is – it doesn&#39;t have to be big and powerful, although I like that – it really has to be completely silent.<br><br>I know people who work for Google and they have their own small data center at home, and I don&#39;t do that.<br><br>My office is the most boring office you&#39;ll ever see.<br><br>And I sit there alone in the quiet.<br><br>If the cat comes up, it sits in my lap.<br><br>And I want to hear the cat purring, not the sound of the fans in the computer.<br><br>CA: So this is astonishing, because working this way, you&#39;re able to run this vast technology empire – it is an empire – so that&#39;s an amazing testament to the power of open source.<br><br>Tell us how you got to understand open source and how it lead to the development of Linux.<br><br>LT: I mean, I still work alone.<br><br>Really – I work alone in my house, often in my bathrobe.<br><br>When a photographer shows up, I dress up, so I have clothes on.<br><br>(Laughter) And that&#39;s how I&#39;ve always worked.<br><br>I mean, this was how I started Linux, too.<br><br>I did not start Linux as a collaborative project.<br><br>I started it as one in a series of many projects I had done at the time for myself, partly because I needed the end result, but even more because I just enjoyed programming.<br><br>So it was about the end of the journey, which, 25 years later, we still have not reached.<br><br>But it was really about the fact that I was looking for a project on my own and there was no open source, really, on my radar at all.<br><br>And what happened is …<br><br>the project grows and becomes something you want to show off to people.<br><br>Really, this is more of a, &quot;Wow, look at what I did!&quot;<br><br>And trust me – it was not that great back then.<br><br>I made it publicly available, and it wasn&#39;t even open source at that point.<br><br>At that point it was source that was open, but there was no intention behind using the kind of open-source methodology that we think of today to improve it.<br><br>It was more like, &quot;Look, I&#39;ve been working on this for half a year, I&#39;d love to have comments.&quot;<br><br>And other people approached me.<br><br>At the University of Helsinki, I had a friend who was one of the open source – it was called mainly &quot;free software&quot; back then – and he actually introduced me to the notion that, hey, you can use these open-source licenses that had been around.<br><br>And I thought about it for a while.<br><br>I was actually worried about the whole commercial interests coming in.<br><br>I mean, that&#39;s one of the worries I think most people who start out have, is that they worry about somebody taking advantage of their work, right?<br><br>And I decided, &quot;What the hell?&quot;<br><br>And – CA: And then at some point, someone contributed some code that you thought, &quot;Wow, that really is interesting, I would not have thought of that.<br><br>This could actually improve this.&quot;<br><br>LT: It didn&#39;t even start by people contributing code, it was more that people started contributing ideas.<br><br>And just the fact that somebody else takes a look at your project – and I&#39;m sure it&#39;s true of other things, too, but it&#39;s definitely true in code – is that somebody else takes an interest in your code, looks at it enough to actually give you feedback and give you ideas.<br><br>That was a huge thing for me.<br><br>I was 21 at the time, so I was young, but I had already programmed for half my life, basically.<br><br>And every project before that had been completely personal and it was a revelation when people just started commenting, started giving feedback on your code.<br><br>And even before they started giving code back, that was, I think, one of the big moments where I said, &quot;I love other people!&quot;<br><br>Don&#39;t get me wrong – I&#39;m actually not a people person.<br><br>(Laughter) I don&#39;t really love other people – (Laughter) But I love computers, I love interacting with other people on email, because it kind of gives you that buffer.<br><br>But I do love other people who comment and get involved in my project.<br><br>And it made it so much more.<br><br>CA: So was there a moment when you saw what was being built and it suddenly started taking off, and you thought, &quot;Wait a sec, this actually could be something huge, not just a personal project that I&#39;m getting nice feedback on, but a kind of explosive development in the whole technology world&quot;?<br><br>LT: Not really.<br><br>I mean, the big point for me, really, was not when it was becoming huge, it was when it was becoming little.<br><br>The big point for me was not being alone and having 10, maybe 100 people being involved – that was a big point.<br><br>Then everything else was very gradual.<br><br>Going from 100 people to a million people is not a big deal – to me.<br><br>Well, I mean, maybe it is if you&#39;re – (Laughter) If you want to sell your result then it&#39;s a huge deal – don&#39;t get me wrong.<br><br>But if you&#39;re interested in the technology and you&#39;re interested in the project, the big part was getting the community.<br><br>Then the community grew gradually.<br><br>And there&#39;s actually not a single point where I went like, &quot;Wow, that just took off!&quot; because it – I mean – it took a long time, relatively.<br><br>CA: So all the technologists that I talk to really credit you with massively changing their work.<br><br>And it&#39;s not just Linux, it&#39;s this thing called Git, which is this management system for software development.<br><br>Tell us briefly about that and your role in that.<br><br>LT: So one of the issues we had, and this took a while to start to appear, is when you …<br><br>When you grow from having 10 people or 100 people working on a project to having 10,000 people, which – I mean, right now we&#39;re in the situation where just on the kernel, we have 1,000 people involved in every single release and that&#39;s every two months, roughly two or three months.<br><br>Some of those people don&#39;t do a lot.<br><br>There&#39;s a lot of people who make small, small changes.<br><br>But to maintain this, the scale changes how you have to maintain it.<br><br>And we went through a lot of pain.<br><br>And there are whole projects that do only source-code maintenance.<br><br>CVS is the one that used to be the most commonly used, and I hated CVS with a passion and refused to touch it and tried something else that was radical and interesting and everybody else hated.<br><br>CA: (Laughs) LT: And we were in this bad spot, where we had thousands of people who wanted to participate, but in many ways, I was the kind of break point, where I could not scale to the point where I could work with thousands of people.<br><br>So Git is my second big project, which was only created for me to maintain my first big project.<br><br>And this is literally how I work.<br><br>I don&#39;t code for – well, I do code for fun – but I want to code for something meaningful so every single project I&#39;ve ever done has been something I needed and – CA: So really, both Linux and Git kind of arose almost as an unintended consequence of your desire not to have to work with too many people.<br><br>LT: Absolutely. Yes.<br><br>(Laughter) CA: That&#39;s amazing.<br><br>LT: Yeah.<br><br>(Applause) And yet, you&#39;re the man who&#39;s transformed technology not just once but twice, and we have to try and understand why it is.<br><br>You&#39;ve given us some clues, but …<br><br>Here&#39;s a picture of you as a kid, with a Rubik&#39;s Cube.<br><br>You mentioned that you&#39;ve been programming since you were like 10 or 11, half your life.<br><br>Were you this sort of computer genius, you know, übernerd, were you the star at school who could do everything?<br><br>What were you like as a kid?<br><br>LT: Yeah, I think I was the prototypical nerd.<br><br>I mean, I was …<br><br>I was not a people person back then.<br><br>That&#39;s my younger brother.<br><br>I was clearly more interested in the Rubik&#39;s Cube than my younger brother.<br><br>(Laughter) My younger sister, who&#39;s not in the picture, when we had family meetings – and it&#39;s not a huge family, but I have, like, a couple of cousins – she would prep me beforehand.<br><br>Like, before I stepped into the room she would say, &quot;OK. That&#39;s so-and-so …&quot;<br><br>Because I was not – I was a geek.<br><br>I was into computers, I was into math, I was into physics.<br><br>I was good at that.<br><br>I don&#39;t think I was particularly exceptional.<br><br>Apparently, my sister said that my biggest exceptional quality was that I would not let go.<br><br>CA: OK, so let&#39;s go there, because that&#39;s interesting.<br><br>You would not let go.<br><br>So that&#39;s not about being a geek and being smart, that&#39;s about being … stubborn?<br><br>LT: That&#39;s about being stubborn.<br><br>That&#39;s about, like, just starting something and not saying, &quot;OK, I&#39;m done, let&#39;s do something else – Look: shiny!&quot;<br><br>And I notice that in many other parts in my life, too.<br><br>I lived in Silicon Valley for seven years.<br><br>And I worked for the same company, in Silicon Valley, for the whole time.<br><br>That is unheard of.<br><br>That&#39;s not how Silicon Valley works.<br><br>The whole point of Silicon Valley is that people jump between jobs to kind of mix up the pot.<br><br>And that&#39;s not the kind of person I am.<br><br>CA: But during the actual development of Linux itself, that stubbornness sometimes brought you in conflict with other people.<br><br>Talk about that a bit.<br><br>Was that essential to sort of maintain the quality of what was being built?<br><br>How would you describe what happened?<br><br>LT: I don&#39;t know if it&#39;s essential.<br><br>Going back to the &quot;I&#39;m not a people person,&quot; – sometimes I&#39;m also …<br><br>shall we say, &quot;myopic&quot; when it comes to other people&#39;s feelings, and that sometimes makes you say things that hurt other people.<br><br>And I&#39;m not proud of that.<br><br>(Applause) But, at the same time, it&#39;s – I get people who tell me that I should be nice.<br><br>And then when I try to explain to them that maybe you&#39;re nice, maybe you should be more aggressive, they see that as me being not nice.<br><br>(Laughter) What I&#39;m trying to say is we are different.<br><br>I&#39;m not a people person; it&#39;s not something I&#39;m particularly proud of, but it&#39;s part of me.<br><br>And one of the things I really like about open source is it really allows different people to work together.<br><br>We don&#39;t have to like each other – and sometimes we really don&#39;t like each other.<br><br>Really – I mean, there are very, very heated arguments.<br><br>But you can, actually, you can find things that – you don&#39;t even agree to disagree, it&#39;s just that you&#39;re interested in really different things.<br><br>And coming back to the point where I said earlier that I was afraid of commercial people taking advantage of your work, it turned out, and very quickly turned out, that those commercial people were lovely, lovely people.<br><br>And they did all the things that I was not at all interested in doing, and they had completely different goals.<br><br>And they used open source in ways that I just did not want to go.<br><br>But because it was open source they could do it, and it actually works really beautifully together.<br><br>And I actually think it works the same way.<br><br>You need to have the people-people, the communicators, the warm and friendly people who like – (Laughter) really want to hug you and get you into the community.<br><br>But that&#39;s not everybody.<br><br>And that&#39;s not me.<br><br>I care about the technology.<br><br>There are people who care about the UI.<br><br>I can&#39;t do UI to save my life.<br><br>I mean, if I was stranded on an island and the only way to get off that island was the make a pretty UI, I&#39;d die there.<br><br>(Laughter) So there&#39;s different kinds of people, and I&#39;m not making excuses, I&#39;m trying to explain.<br><br>CA: Now, when we talked last week, you talked about some other trait that you have, which I found really interesting.<br><br>It&#39;s this idea called taste.<br><br>And I&#39;ve just got a couple of images here.<br><br>I think this is an example of not particularly good taste in code, and this one is better taste, which one can immediately see.<br><br>What is the difference between these two?<br><br>LT: So this is – How many people here actually have coded?<br><br>CA: Oh my goodness.<br><br>LT: So I guarantee you, everybody who raised their hand, they have done what&#39;s called a singly-linked list.<br><br>And it&#39;s taught – This, the first not very good taste approach, is basically how it&#39;s taught to be done when you start out coding.<br><br>And you don&#39;t have to understand the code.<br><br>The most interesting part to me is the last if statement.<br><br>Because what happens in a singly-linked list – this is trying to remove an existing entry from a list – and there&#39;s a difference between if it&#39;s the first entry or whether it&#39;s an entry in the middle.<br><br>Because if it&#39;s the first entry, you have to change the pointer to the first entry.<br><br>If it&#39;s in the middle, you have to change the pointer of a previous entry.<br><br>So they&#39;re two completely different cases.<br><br>CA: And that&#39;s better.<br><br>LT: And this is better.<br><br>It does not have the if statement.<br><br>And it doesn&#39;t really matter – I don&#39;t want you understand why it doesn&#39;t have the if statement, but I want you to understand that sometimes you can see a problem in a different way and rewrite it so that a special case goes away and becomes the normal case.<br><br>And that&#39;s good code.<br><br>But this is simple code.<br><br>This is CS 101.<br><br>This is not important – although, details are important.<br><br>To me, the sign of people I really want to work with is that they have good taste, which is how …<br><br>I sent you this stupid example that is not relevant because it&#39;s too small.<br><br>Good taste is much bigger than this.<br><br>Good taste is about really seeing the big patterns and kind of instinctively knowing what&#39;s the right way to do things.<br><br>CA: OK, so we&#39;re putting the pieces together here now.<br><br>You have taste, in a way that&#39;s meaningful to software people.<br><br>You&#39;re – (Laughter) LT: I think it was meaningful to some people here.<br><br>CA: You&#39;re a very smart computer coder, and you&#39;re hellish stubborn.<br><br>But there must be something else.<br><br>I mean, you&#39;ve changed the future.<br><br>You must have the ability of these grand visions of the future.<br><br>You&#39;re a visionary, right?<br><br>LT: I&#39;ve actually felt slightly uncomfortable at TED for the last two days, because there&#39;s a lot of vision going on, right?<br><br>And I am not a visionary.<br><br>I do not have a five-year plan.<br><br>I&#39;m an engineer.<br><br>And I think it&#39;s really – I mean – I&#39;m perfectly happy with all the people who are walking around and just staring at the clouds and looking at the stars and saying, &quot;I want to go there.&quot;<br><br>But I&#39;m looking at the ground, and I want to fix the pothole that&#39;s right in front of me before I fall in.<br><br>This is the kind of person I am.<br><br>(Cheers) (Applause) CA: So you spoke to me last week about these two guys.<br><br>Who are they and how do you relate to them?<br><br>LT: Well, so this is kind of cliché in technology, the whole Tesla versus Edison, where Tesla is seen as the visionary scientist and crazy idea man.<br><br>And people love Tesla.<br><br>I mean, there are people who name their companies after him.<br><br>(Laughter) The other person there is Edison, who is actually often vilified for being kind of pedestrian and is – I mean, his most famous quote is, &quot;Genius is one percent inspiration and 99 percent perspiration.&quot;<br><br>And I&#39;m in the Edison camp, even if people don&#39;t always like him.<br><br>Because if you actually compare the two, Tesla has kind of this mind grab these days, but who actually changed the world?<br><br>Edison may not have been a nice person, he did a lot of things – he was maybe not so intellectual, not so visionary.<br><br>But I think I&#39;m more of an Edison than a Tesla.<br><br>CA: So our theme at TED this week is dreams – big, bold, audacious dreams.<br><br>You&#39;re really the antidote to that.<br><br>LT: I&#39;m trying to dial it down a bit, yes.<br><br>CA: That&#39;s good.<br><br>(Laughter) We embrace you, we embrace you.<br><br>Companies like Google and many others have made, arguably, like, billions of dollars out of your software.<br><br>Does that piss you off?<br><br>LT: No.<br><br>No, it doesn&#39;t piss me off for several reasons.<br><br>And one of them is, I&#39;m doing fine.<br><br>I&#39;m really doing fine.<br><br>But the other reason is – I mean, without doing the whole open source and really letting go thing, Linux would never have been what it is.<br><br>And it&#39;s brought experiences I don&#39;t really enjoy, public talking, but at the same time, this is an experience.<br><br>Trust me.<br><br>So there&#39;s a lot of things going on that make me a very happy man and thinking I did the right choices.<br><br>CA: Is the open source idea – this is, I think we&#39;ll end here – is the open source idea fully realized now in the world, or is there more that it could go, are there more things that it could do?<br><br>LT: So, I&#39;m of two minds there.<br><br>I think one reason open source works so well in code is that at the end of the day, code tends to be somewhat black and white.<br><br>There&#39;s often a fairly good way to decide, this is done correctly and this is not done well.<br><br>Code either works or it doesn&#39;t, which means that there&#39;s less room for arguments.<br><br>And we have arguments despite this, right?<br><br>In many other areas – I mean, people have talked about open politics and things like that – and it&#39;s really hard sometimes to say that, yes, you can apply the same principles in some other areas just because the black and white turns into not just gray, but different colors.<br><br>So, obviously open source in science is making a comeback.<br><br>Science was there first.<br><br>But then science ended up being pretty closed, with very expensive journals and some of that going on.<br><br>And open source is making a comeback in science, with things like arXiv and open journals.<br><br>Wikipedia changed the world, too.<br><br>So there are other examples, I&#39;m sure there are more to come.<br><br>CA: But you&#39;re not a visionary, and so it&#39;s not up to you to name them.<br><br>LT: No.<br><br>(Laughter) It&#39;s up to you guys to make them, right?<br><br>CA: Exactly.<br><br>Linus Torvalds, thank you for Linux, thank you for the Internet, thank you for all those Android phones.<br><br>Thank you for coming here to TED and revealing so much of yourself.<br><br>LT: Thank you.<br><br>(Applause)<br></div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linus-Torvalds：Linuxの背後にある心&quot;&gt;&lt;a href=&quot;#Linus-Torvalds：Linuxの背後にある心&quot; class=&quot;headerlink&quot; title=&quot;Linus Torvalds：Linuxの背後にある心&quot;&gt;&lt;/a&gt;Linus Torvalds：Linuxの背後にある心&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第３段は「Linus Torvalds：Linuxの背後にある心」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;実際にTEDトークではなく、代わりにLinuxオペレーティングシステムの背後にいる「悪名高い」人物であるLinus Torvaldsとの対話を紹介する、プログラミングに関するTED Talkです。 この21分のインタビューでは、彼がエンジニアとオープンソースの代弁者になるための彼の考え方と動機について解説しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iG9CE55wbtY?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(7)　Pixarムービーを生き生きとさせる魔法の成分 [Video]</title>
    <link href="https://so-matome.net/2017/12/08/ted-talks-programming-everyone-must-watch-7/"/>
    <id>https://so-matome.net/2017/12/08/ted-talks-programming-everyone-must-watch-7/</id>
    <published>2017-12-08T22:00:01.000Z</published>
    <updated>2017-12-08T22:00:02.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Danielle-Feinberg：Pixarムービーを生き生きとさせる魔法の成分"><a href="#Danielle-Feinberg：Pixarムービーを生き生きとさせる魔法の成分" class="headerlink" title="Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分"></a>Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第7段は「Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分」。以下のように紹介されています：</p><blockquote><p>この12分間のTEDトークは、科学と芸術が組み合わさった時、それらを合計したものよりも素晴らしいものを作り出すか、またどちらか一方を無視すると物事がどのように崩れ落ちてしまうかについての素晴らしい見識を示してくれる良い例です。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/Z1R1z9ipFnM?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>When I was seven years old, some well-meaning adult asked me what I wanted to be when I grew up.<br><br>Proudly, I said: &quot;An artist.&quot;<br><br>&quot;No, you don&#39;t,&quot; he said, &quot;You can&#39;t make a living being an artist!&quot;<br><br>My little seven-year-old Picasso dreams were crushed.<br><br>But I gathered myself, went off in search of a new dream, eventually settling on being a scientist, perhaps something like the next Albert Einstein.<br><br>(Laughter) I have always loved math and science, later, coding.<br><br>And so I decided to study computer programming in college.<br><br>In my junior year, my computer graphics professor showed us these wonderful short films.<br><br>It was the first computer animation any of us had ever seen.<br><br>I watched these films in wonder, transfixed, fireworks going off in my head, thinking, &quot;That is what I want to do with my life.&quot;<br><br>The idea that all the math, science and code I had been learning could come together to create these worlds and characters and stories I connected with, was pure magic for me.<br><br>Just two years later, I started working at the place that made those films, Pixar Animation Studios.<br><br>It was here I learned how we actually execute those films.<br><br>To create our movies, we create a three-dimensional world inside the computer.<br><br>We start with a point that makes a line that makes a face that creates characters, or trees and rocks that eventually become a forest.<br><br>And because it&#39;s a three-dimensional world, we can move a camera around inside that world.<br><br>I was fascinated by all of it.<br><br>But then I got my first taste of lighting.<br><br>Lighting in practice is placing lights inside this three-dimensional world.<br><br>I actually have icons of lights I move around in there.<br><br>Here you can see I&#39;ve added a light, I&#39;m turning on the rough version of lighting in our software, turn on shadows and placing the light.<br><br>As I place a light, I think about what it might look like in real life, but balance that out with what we need artistically and for the story.<br><br>So it might look like this at first, but as we adjust this and move that in weeks of work, in rough form it might look like this, and in final form, like this.<br><br>There&#39;s this moment in lighting that made me fall utterly in love with it.<br><br>It&#39;s where we go from this to this.<br><br>It&#39;s the moment where all the pieces come together, and suddenly the world comes to life as if it&#39;s an actual place that exists.<br><br>This moment never gets old, especially for that little seven-year-old girl that wanted to be an artist.<br><br>As I learned to light, I learned about using light to help tell story, to set the time of day, to create the mood, to guide the audience&#39;s eye, how to make a character look appealing or stand out in a busy set.<br><br>Did you see WALL-E?<br><br>(Laughter) There he is.<br><br>As you can see, we can create any world that we want inside the computer.<br><br>We can make a world with monsters, with robots that fall in love, we can even make pigs fly.<br><br>(Laughter) While this is an incredible thing, this untethered artistic freedom, it can create chaos.<br><br>It can create unbelievable worlds, unbelievable movement, things that are jarring to the audience.<br><br>So to combat this, we tether ourselves with science.<br><br>We use science and the world we know as a backbone, to ground ourselves in something relatable and recognizable.<br><br>&quot;Finding Nemo&quot; is an excellent example of this.<br><br>A major portion of the movie takes place underwater.<br><br>But how do you make it look underwater?<br><br>In early research and development, we took a clip of underwater footage and recreated it in the computer.<br><br>Then we broke it back down to see which elements make up that underwater look.<br><br>One of the most critical elements was how the light travels through the water.<br><br>So we coded up a light that mimics this physics – first, the visibility of the water, and then what happens with the color.<br><br>Objects close to the eye have their full, rich colors.<br><br>As light travels deeper into the water, we lose the red wavelengths, then the green wavelengths, leaving us with blue at the far depths.<br><br>In this clip you can see two other important elements.<br><br>The first is the surge and swell, or the invisible underwater current that pushes the bits of particulate around in the water.<br><br>The second is the caustics.<br><br>These are the ribbons of light, like you might see on the bottom of a pool, that are created when the sun bends through the crests of the ripples and waves on the ocean&#39;s surface.<br><br>Here we have the fog beams.<br><br>These give us color depth cues, but also tells which direction is up in shots where we don&#39;t see the water surface.<br><br>The other really cool thing you can see here is that we lit that particulate only with the caustics, so that as it goes in and out of those ribbons of light, it appears and disappears, lending a subtle, magical sparkle to the underwater.<br><br>You can see how we&#39;re using the science – the physics of water, light and movement – to tether that artistic freedom.<br><br>But we are not beholden to it.<br><br>We considered each of these elements and which ones had to be scientifically accurate and which ones we could push and pull to suit the story and the mood.<br><br>We realized early on that color was one we had some leeway with.<br><br>So here&#39;s a traditionally colored underwater scene.<br><br>But here, we can take Sydney Harbor and push it fairly green to suit the sad mood of what&#39;s happening.<br><br>In this scene, it&#39;s really important we see deep into the underwater, so we understand what the East Australian Current is, that the turtles are diving into and going on this roller coaster ride.<br><br>So we pushed the visibility of the water well past anything you would ever see in real life.<br><br>Because in the end, we are not trying to recreate the scientifically correct real world, we&#39;re trying to create a believable world, one the audience can immerse themselves in to experience the story.<br><br>We use science to create something wonderful.<br><br>We use story and artistic touch to get us to a place of wonder.<br><br>This guy, WALL-E, is a great example of that.<br><br>He finds beauty in the simplest things.<br><br>But when he came in to lighting, we knew we had a big problem.<br><br>We got so geeked-out on making WALL-E this convincing robot, that we made his binoculars practically optically perfect.<br><br>(Laughter) His binoculars are one of the most critical acting devices he has.<br><br>He doesn&#39;t have a face or even traditional dialogue, for that matter.<br><br>So the animators were heavily dependent on the binoculars to sell his acting and emotions.<br><br>We started lighting and we realized the triple lenses inside his binoculars were a mess of reflections.<br><br>He was starting to look glassy-eyed.<br><br>(Laughter) Now, glassy-eyed is a fundamentally awful thing when you are trying to convince an audience that a robot has a personality and he&#39;s capable of falling in love.<br><br>So we went to work on these optically perfect binoculars, trying to find a solution that would maintain his true robot materials but solve this reflection problem.<br><br>So we started with the lenses.<br><br>Here&#39;s the flat-front lens, we have a concave lens and a convex lens.<br><br>And here you see all three together, showing us all these reflections.<br><br>We tried turning them down, we tried blocking them, nothing was working.<br><br>You can see here, sometimes we needed something specific reflected in his eyes – usually Eve.<br><br>So we couldn&#39;t just use some faked abstract image on the lenses.<br><br>So here we have Eve on the first lens, we put Eve on the second lens, it&#39;s not working.<br><br>We turn it down, it&#39;s still not working.<br><br>And then we have our eureka moment.<br><br>We add a light to WALL-E that accidentally leaks into his eyes.<br><br>You can see it light up these gray aperture blades.<br><br>Suddenly, those aperture blades are poking through that reflection the way nothing else has.<br><br>Now we recognize WALL-E as having an eye.<br><br>As humans we have the white of our eye, the colored iris and the black pupil.<br><br>Now WALL-E has the black of an eye, the gray aperture blades and the black pupil.<br><br>Suddenly, WALL-E feels like he has a soul, like there&#39;s a character with emotion inside.<br><br>Later in the movie towards the end, WALL-E loses his personality, essentially going dead.<br><br>This is the perfect time to bring back that glassy-eyed look.<br><br>In the next scene, WALL-E comes back to life.<br><br>We bring that light back to bring the aperture blades back, and he returns to that sweet, soulful robot we&#39;ve come to love.<br><br>(Video) WALL-E: Eva?<br><br>Danielle Feinberg: There&#39;s a beauty in these unexpected moments – when you find the key to unlocking a robot&#39;s soul, the moment when you discover what you want to do with your life.<br><br>The jellyfish in &quot;Finding Nemo&quot; was one of those moments for me.<br><br>There are scenes in every movie that struggle to come together.<br><br>This was one of those scenes.<br><br>The director had a vision for this scene based on some wonderful footage of jellyfish in the South Pacific.<br><br>As we went along, we were floundering.<br><br>The reviews with the director turned from the normal look-and-feel conversation into more and more questions about numbers and percentages.<br><br>Maybe because unlike normal, we were basing it on something in real life, or maybe just because we had lost our way.<br><br>But it had become about using our brain without our eyes, the science without the art.<br><br>That scientific tether was strangling the scene.<br><br>But even through all the frustrations, I still believed it could be beautiful.<br><br>So when it came in to lighting, I dug in.<br><br>As I worked to balance the blues and the pinks, the caustics dancing on the jellyfish bells, the undulating fog beams, something promising began to appear.<br><br>I came in one morning and checked the previous night&#39;s work.<br><br>And I got excited.<br><br>And then I showed it to the lighting director and she got excited.<br><br>Soon, I was showing to the director in a dark room full of 50 people.<br><br>In director review, you hope you might get some nice words, then you get some notes and fixes, generally.<br><br>And then, hopefully, you get a final, signaling to move on to the next stage.<br><br>I gave my intro, and I played the jellyfish scene.<br><br>And the director was silent for an uncomfortably long amount of time.<br><br>Just long enough for me to think, &quot;Oh no, this is doomed.&quot;<br><br>And then he started clapping.<br><br>And then the production designer started clapping.<br><br>And then the whole room was clapping.<br><br>This is the moment that I live for in lighting.<br><br>The moment where it all comes together and we get a world that we can believe in.<br><br>We use math, science and code to create these amazing worlds.<br><br>We use storytelling and art to bring them to life.<br><br>It&#39;s this interweaving of art and science that elevates the world to a place of wonder, a place with soul, a place we can believe in, a place where the things you imagine can become real – and a world where a girl suddenly realizes not only is she a scientist, but also an artist.<br><br>Thank you.<br><br>(Applause)<br></div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Danielle-Feinberg：Pixarムービーを生き生きとさせる魔法の成分&quot;&gt;&lt;a href=&quot;#Danielle-Feinberg：Pixarムービーを生き生きとさせる魔法の成分&quot; class=&quot;headerlink&quot; title=&quot;Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分&quot;&gt;&lt;/a&gt;Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第7段は「Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;この12分間のTEDトークは、科学と芸術が組み合わさった時、それらを合計したものよりも素晴らしいものを作り出すか、またどちらか一方を無視すると物事がどのように崩れ落ちてしまうかについての素晴らしい見識を示してくれる良い例です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Z1R1z9ipFnM?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(8)　成功のための8つの秘密 [Video]</title>
    <link href="https://so-matome.net/2017/12/01/ted-talks-programming-everyone-must-watch-8/"/>
    <id>https://so-matome.net/2017/12/01/ted-talks-programming-everyone-must-watch-8/</id>
    <published>2017-12-01T22:00:01.000Z</published>
    <updated>2017-12-01T22:00:01.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="リチャード・セント・ジョン：成功のための8つの秘密"><a href="#リチャード・セント・ジョン：成功のための8つの秘密" class="headerlink" title="リチャード・セント・ジョン：成功のための8つの秘密"></a>リチャード・セント・ジョン：成功のための8つの秘密</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第8段は「リチャード・セント・ジョン：成功のための8つの秘密」。以下のように紹介されています：</p><p>I’ll lay out the secrets for you: Passion, Work, Good, Focus, Push, Service, Ideas, and Persist. But to really understand what St. John means, you should watch the video — it’s barely 4 minutes long, so what do you have to lose? This is golden advice if you want to succeed as a career programmer.</p><blockquote><p>私の秘密を告白してしまいましょう：情熱、仕事、美徳、フォーカス、プッシュ、サービス、アイデア、そして永続性。 しかし、セント・ジョンが何を言おうと本当に理解するためには、ビデオを見るべきです。それはたった4分ですから、何を失うというのでしょう？ あなたがキャリアプログラマーとして成功したいなら、これは金言です。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/Y6bbMQXQ180?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>This is really a two-hour presentation I give to high school students, cut down to three minutes.<br><br>And it all started one day on a plane, on my way to TED, seven years ago.<br><br>And in the seat next to me was a high school student, a teenager, and she came from a really poor family.<br><br>And she wanted to make something of her life, and she asked me a simple little question.<br><br>She said, &quot;What leads to success?&quot;<br><br>And I felt really badly, because I couldn&#39;t give her a good answer.<br><br>So I get off the plane, and I come to TED.<br><br>And I think, jeez, I&#39;m in the middle of a room of successful people!<br><br>So why don&#39;t I ask them what helped them succeed, and pass it on to kids?<br><br>So here we are, seven years, 500 interviews later, and I&#39;m going to tell you what really leads to success and makes TEDsters tick.<br><br>And the first thing is passion.<br><br>Freeman Thomas says, &quot;I&#39;m driven by my passion.&quot;<br><br>TEDsters do it for love; they don&#39;t do it for money.<br><br>Carol Coletta says, &quot;I would pay someone to do what I do.&quot;<br><br>And the interesting thing is: if you do it for love, the money comes anyway.<br><br>Work! Rupert Murdoch said to me, &quot;It&#39;s all hard work.<br><br>Nothing comes easily.<br><br>But I have a lot of fun.&quot;<br><br>Did he say fun? Rupert? Yes!<br><br>(Laughter) TEDsters do have fun working.<br><br>And they work hard.<br><br>I figured, they&#39;re not workaholics.<br><br>They&#39;re workafrolics.<br><br>(Laughter) Good!<br><br>(Applause) Alex Garden says, &quot;To be successful, put your nose down in something and get damn good at it.&quot;<br><br>There&#39;s no magic; it&#39;s practice, practice, practice.<br><br>And it&#39;s focus.<br><br>Norman Jewison said to me, &quot;I think it all has to do with focusing yourself on one thing.&quot;<br><br>And push!<br><br>David Gallo says, &quot;Push yourself.<br><br>Physically, mentally, you&#39;ve got to push, push, push.&quot;<br><br>You&#39;ve got to push through shyness and self-doubt.<br><br>Goldie Hawn says, &quot;I always had self-doubts.<br><br>I wasn&#39;t good enough; I wasn&#39;t smart enough.<br><br>I didn&#39;t think I&#39;d make it.&quot;<br><br>Now it&#39;s not always easy to push yourself, and that&#39;s why they invented mothers.<br><br>(Laughter) (Applause) Frank Gehry said to me, &quot;My mother pushed me.&quot;<br><br>(Laughter) Serve!<br><br>Sherwin Nuland says, &quot;It was a privilege to serve as a doctor.&quot;<br><br>A lot of kids want to be millionaires.<br><br>The first thing I say is: &quot;OK, well you can&#39;t serve yourself; you&#39;ve got to serve others something of value.<br><br>Because that&#39;s the way people really get rich.&quot;<br><br>Ideas!<br><br>TEDster Bill Gates says, &quot;I had an idea: founding the first micro-computer software company.&quot;<br><br>I&#39;d say it was a pretty good idea.<br><br>And there&#39;s no magic to creativity in coming up with ideas – it&#39;s just doing some very simple things.<br><br>And I give lots of evidence.<br><br>Persist!<br><br>Joe Kraus says, &quot;Persistence is the number one reason for our success.&quot;<br><br>You&#39;ve got to persist through failure.<br><br>You&#39;ve got to persist through crap!<br><br>Which of course means &quot;Criticism, Rejection, Assholes and Pressure.&quot;<br><br>(Laughter) So, the answer to this question is simple: Pay 4,000 bucks and come to TED.<br><br>(Laughter) Or failing that, do the eight things – and trust me, these are the big eight things that lead to success.<br><br>Thank you TEDsters for all your interviews!<br><br>(Applause)  </div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;リチャード・セント・ジョン：成功のための8つの秘密&quot;&gt;&lt;a href=&quot;#リチャード・セント・ジョン：成功のための8つの秘密&quot; class=&quot;headerlink&quot; title=&quot;リチャード・セント・ジョン：成功のための8つの秘密&quot;&gt;&lt;/a&gt;リチャード・セント・ジョン：成功のための8つの秘密&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第8段は「リチャード・セント・ジョン：成功のための8つの秘密」。以下のように紹介されています：&lt;/p&gt;
&lt;p&gt;I’ll lay out the secrets for you: Passion, Work, Good, Focus, Push, Service, Ideas, and Persist. But to really understand what St. John means, you should watch the video — it’s barely 4 minutes long, so what do you have to lose? This is golden advice if you want to succeed as a career programmer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私の秘密を告白してしまいましょう：情熱、仕事、美徳、フォーカス、プッシュ、サービス、アイデア、そして永続性。 しかし、セント・ジョンが何を言おうと本当に理解するためには、ビデオを見るべきです。それはたった4分ですから、何を失うというのでしょう？ あなたがキャリアプログラマーとして成功したいなら、これは金言です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Y6bbMQXQ180?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(9)　コンピュータの誕生 [Video]</title>
    <link href="https://so-matome.net/2017/11/24/ted-talks-programming-everyone-must-watch-9/"/>
    <id>https://so-matome.net/2017/11/24/ted-talks-programming-everyone-must-watch-9/</id>
    <published>2017-11-24T22:00:01.000Z</published>
    <updated>2017-11-24T22:00:01.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ジョージ・ダイソン：コンピュータの誕生"><a href="#ジョージ・ダイソン：コンピュータの誕生" class="headerlink" title="ジョージ・ダイソン：コンピュータの誕生"></a>ジョージ・ダイソン：コンピュータの誕生</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第9段は「ジョージ・ダイソン：コンピュータの誕生」。以下のように紹介されています：</p><blockquote><p>あなたがどこに行こうとしているのかを知るためには、どこから来たのか理解しなければなりません。この17分間のTED Talkでは、歴史家のDysonが1600年代からコンピュータの歴史を説明し、我々がどうして今ここいるのかを解説してくれていますす。興味深いだけでなく、理解するのも簡単です。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/EF692dBzWAs?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>Last year, I told you the story, in seven minutes, of Project Orion, which was this very implausible technology that technically could have worked, but it had this one-year political window where it could have happened.<br><br>So it didn&#39;t happen. It was a dream that did not happen.<br><br>This year I&#39;m going to tell you the story of the birth of digital computing.<br><br>This was a perfect introduction.<br><br>And it&#39;s a story that did work. It did happen, and the machines are all around us.<br><br>And it was a technology that was inevitable.<br><br>If the people I&#39;m going to tell you the story about, if they hadn&#39;t done it, somebody else would have.<br><br>So, it was sort of the right idea at the right time.<br><br>This is Barricelli&#39;s universe. This is the universe we live in now.<br><br>It&#39;s the universe in which these machines are now doing all these things, including changing biology.<br><br>I&#39;m starting the story with the first atomic bomb at Trinity, which was the Manhattan Project. It was a little bit like TED: it brought a whole lot of very smart people together.<br><br>And three of the smartest people were Stan Ulam, Richard Feynman and John von Neumann.<br><br>And it was Von Neumann who said, after the bomb, he was working on something much more important than bombs: he&#39;s thinking about computers.<br><br>So, he wasn&#39;t only thinking about them; he built one. This is the machine he built.<br><br>(Laughter) He built this machine, and we had a beautiful demonstration of how this thing really works, with these little bits. And it&#39;s an idea that goes way back.<br><br>The first person to really explain that was Thomas Hobbes, who, in 1651, explained how arithmetic and logic are the same thing, and if you want to do artificial thinking and artificial logic, you can do it all with arithmetic.<br><br>He said you needed addition and subtraction.<br><br>Leibniz, who came a little bit later – this is 1679 – showed that you didn&#39;t even need subtraction.<br><br>You could do the whole thing with addition.<br><br>Here, we have all the binary arithmetic and logic that drove the computer revolution.<br><br>And Leibniz was the first person to really talk about building such a machine.<br><br>He talked about doing it with marbles, having gates and what we now call shift registers, where you shift the gates, drop the marbles down the tracks.<br><br>And that&#39;s what all these machines are doing, except, instead of doing it with marbles, they&#39;re doing it with electrons.<br><br>And then we jump to Von Neumann, 1945, when he sort of reinvents the whole same thing.<br><br>And 1945, after the war, the electronics existed to actually try and build such a machine.<br><br>So June 1945 – actually, the bomb hasn&#39;t even been dropped yet – and Von Neumann is putting together all the theory to actually build this thing, which also goes back to Turing, who, before that, gave the idea that you could do all this with a very brainless, little, finite state machine, just reading a tape in and reading a tape out.<br><br>The other sort of genesis of what Von Neumann did was the difficulty of how you would predict the weather.<br><br>Lewis Richardson saw how you could do this with a cellular array of people, giving them each a little chunk, and putting it together.<br><br>Here, we have an electrical model illustrating a mind having a will, but capable of only two ideas.<br><br>(Laughter) And that&#39;s really the simplest computer.<br><br>It&#39;s basically why you need the qubit, because it only has two ideas.<br><br>And you put lots of those together, you get the essentials of the modern computer: the arithmetic unit, the central control, the memory, the recording medium, the input and the output.<br><br>But, there&#39;s one catch. This is the fatal – you know, we saw it in starting these programs up.<br><br>The instructions which govern this operation must be given in absolutely exhaustive detail.<br><br>So, the programming has to be perfect, or it won&#39;t work.<br><br>If you look at the origins of this, the classic history sort of takes it all back to the ENIAC here.<br><br>But actually, the machine I&#39;m going to tell you about, the Institute for Advanced Study machine, which is way up there, really should be down there. So, I&#39;m trying to revise history, and give some of these guys more credit than they&#39;ve had.<br><br>Such a computer would open up universes, which are, at the present, outside the range of any instruments.<br><br>So it opens up a whole new world, and these people saw it.<br><br>The guy who was supposed to build this machine was the guy in the middle, Vladimir Zworykin, from RCA.<br><br>RCA, in probably one of the lousiest business decisions of all time, decided not to go into computers.<br><br>But the first meetings, November 1945, were at RCA&#39;s offices.<br><br>RCA started this whole thing off, and said, you know, televisions are the future, not computers.<br><br>The essentials were all there – all the things that make these machines run.<br><br>Von Neumann, and a logician, and a mathematician from the army put this together. Then, they needed a place to build it.<br><br>When RCA said no, that&#39;s when they decided to build it in Princeton, where Freeman works at the Institute.<br><br>That&#39;s where I grew up as a kid.<br><br>That&#39;s me, that&#39;s my sister Esther, who&#39;s talked to you before, so we both go back to the birth of this thing.<br><br>That&#39;s Freeman, a long time ago, and that was me.<br><br>And this is Von Neumann and Morgenstern, who wrote the &quot;Theory of Games.&quot;<br><br>All these forces came together there, in Princeton.<br><br>Oppenheimer, who had built the bomb.<br><br>The machine was actually used mainly for doing bomb calculations.<br><br>And Julian Bigelow, who took Zworkykin&#39;s place as the engineer, to actually figure out, using electronics, how you would build this thing. The whole gang of people who came to work on this, and women in front, who actually did most of the coding, were the first programmers.<br><br>These were the prototype geeks, the nerds.<br><br>They didn&#39;t fit in at the Institute.<br><br>This is a letter from the director, concerned about – &quot;especially unfair on the matter of sugar.&quot;<br><br>(Laughter) You can read the text.<br><br>(Laughter) This is hackers getting in trouble for the first time.<br><br>(Laughter).<br><br>These were not theoretical physicists.<br><br>They were real soldering-gun type guys, and they actually built this thing.<br><br>And we take it for granted now, that each of these machines has billions of transistors, doing billions of cycles per second without failing.<br><br>They were using vacuum tubes, very narrow, sloppy techniques to get actually binary behavior out of these radio vacuum tubes.<br><br>They actually used 6J6, the common radio tube, because they found they were more reliable than the more expensive tubes.<br><br>And what they did at the Institute was publish every step of the way.<br><br>Reports were issued, so that this machine was cloned at 15 other places around the world.<br><br>And it really was. It was the original microprocessor.<br><br>All the computers now are copies of that machine.<br><br>The memory was in cathode ray tubes – a whole bunch of spots on the face of the tube – very, very sensitive to electromagnetic disturbances.<br><br>So, there&#39;s 40 of these tubes, like a V-40 engine running the memory.<br><br>(Laughter) The input and the output was by teletype tape at first.<br><br>This is a wire drive, using bicycle wheels.<br><br>This is the archetype of the hard disk that&#39;s in your machine now.<br><br>Then they switched to a magnetic drum.<br><br>This is modifying IBM equipment, which is the origins of the whole data-processing industry, later at IBM.<br><br>And this is the beginning of computer graphics.<br><br>The &quot;Graph&#39;g-Beam Turn On.&quot; This next slide, that&#39;s the – as far as I know – the first digital bitmap display, 1954.<br><br>So, Von Neumann was already off in a theoretical cloud, doing abstract sorts of studies of how you could build reliable machines out of unreliable components.<br><br>Those guys drinking all the tea with sugar in it were writing in their logbooks, trying to get this thing to work, with all these 2,600 vacuum tubes that failed half the time.<br><br>And that&#39;s what I&#39;ve been doing, this last six months, is going through the logs.<br><br>&quot;Running time: two minutes. Input, output: 90 minutes.&quot;<br><br>This includes a large amount of human error.<br><br>So they are always trying to figure out, what&#39;s machine error? What&#39;s human error?<br><br>What&#39;s code, what&#39;s hardware?<br><br>That&#39;s an engineer gazing at tube number 36, trying to figure out why the memory&#39;s not in focus.<br><br>He had to focus the memory – seems OK.<br><br>So, he had to focus each tube just to get the memory up and running, let alone having, you know, software problems.<br><br>&quot;No use, went home.&quot; (Laughter) &quot;Impossible to follow the damn thing, where&#39;s a directory?&quot;<br><br>So, already, they&#39;re complaining about the manuals: &quot;before closing down in disgust … &quot; &quot;The General Arithmetic: Operating Logs.&quot;<br><br>Burning lots of midnight oil.<br><br>&quot;MANIAC,&quot; which became the acronym for the machine, Mathematical and Numerical Integrator and Calculator, &quot;lost its memory.&quot;<br><br>&quot;MANIAC regained its memory, when the power went off.&quot; &quot;Machine or human?&quot;<br><br>&quot;Aha!&quot; So, they figured out it&#39;s a code problem.<br><br>&quot;Found trouble in code, I hope.&quot;<br><br>&quot;Code error, machine not guilty.&quot;<br><br>&quot;Damn it, I can be just as stubborn as this thing.&quot;<br><br>(Laughter) &quot;And the dawn came.&quot; So they ran all night.<br><br>Twenty-four hours a day, this thing was running, mainly running bomb calculations.<br><br>&quot;Everything up to this point is wasted time.&quot; &quot;What&#39;s the use? Good night.&quot;<br><br>&quot;Master control off. The hell with it. Way off.&quot; (Laughter) &quot;Something&#39;s wrong with the air conditioner – smell of burning V-belts in the air.&quot;<br><br>&quot;A short – do not turn the machine on.&quot;<br><br>&quot;IBM machine putting a tar-like substance on the cards. The tar is from the roof.&quot;<br><br>So they really were working under tough conditions.<br><br>(Laughter) Here, &quot;A mouse has climbed into the blower behind the regulator rack, set blower to vibrating. Result: no more mouse.&quot;<br><br>(Laughter) &quot;Here lies mouse. Born: ?. Died: 4:50 a.m., May 1953.&quot;<br><br>(Laughter) There&#39;s an inside joke someone has penciled in: &quot;Here lies Marston Mouse.&quot;<br><br>If you&#39;re a mathematician, you get that, because Marston was a mathematician who objected to the computer being there.<br><br>&quot;Picked a lightning bug off the drum.&quot; &quot;Running at two kilocycles.&quot;<br><br>That&#39;s two thousand cycles per second – &quot;yes, I&#39;m chicken&quot; – so two kilocycles was slow speed.<br><br>The high speed was 16 kilocycles.<br><br>I don&#39;t know if you remember a Mac that was 16 Megahertz, that&#39;s slow speed.<br><br>&quot;I have now duplicated both results.<br><br>How will I know which is right, assuming one result is correct?<br><br>This now is the third different output.<br><br>I know when I&#39;m licked.&quot;<br><br>(Laughter) &quot;We&#39;ve duplicated errors before.&quot;<br><br>&quot;Machine run, fine. Code isn&#39;t.&quot;<br><br>&quot;Only happens when the machine is running.&quot;<br><br>And sometimes things are okay.<br><br>&quot;Machine a thing of beauty, and a joy forever.&quot; &quot;Perfect running.&quot;<br><br>&quot;Parting thought: when there&#39;s bigger and better errors, we&#39;ll have them.&quot;<br><br>So, nobody was supposed to know they were actually designing bombs.<br><br>They&#39;re designing hydrogen bombs. But someone in the logbook, late one night, finally drew a bomb.<br><br>So, that was the result. It was Mike, the first thermonuclear bomb, in 1952.<br><br>That was designed on that machine, in the woods behind the Institute.<br><br>So Von Neumann invited a whole gang of weirdos from all over the world to work on all these problems.<br><br>Barricelli, he came to do what we now call, really, artificial life, trying to see if, in this artificial universe – he was a viral-geneticist, way, way, way ahead of his time.<br><br>He&#39;s still ahead of some of the stuff that&#39;s being done now.<br><br>Trying to start an artificial genetic system running in the computer.<br><br>Began – his universe started March 3, &#39;53.<br><br>So it&#39;s almost exactly – it&#39;s 50 years ago next Tuesday, I guess.<br><br>And he saw everything in terms of – he could read the binary code straight off the machine.<br><br>He had a wonderful rapport.<br><br>Other people couldn&#39;t get the machine running. It always worked for him.<br><br>Even errors were duplicated.<br><br>(Laughter) &quot;Dr. Barricelli claims machine is wrong, code is right.&quot;<br><br>So he designed this universe, and ran it.<br><br>When the bomb people went home, he was allowed in there.<br><br>He would run that thing all night long, running these things, if anybody remembers Stephen Wolfram, who reinvented this stuff.<br><br>And he published it. It wasn&#39;t locked up and disappeared.<br><br>It was published in the literature.<br><br>&quot;If it&#39;s that easy to create living organisms, why not create a few yourself?&quot;<br><br>So, he decided to give it a try, to start this artificial biology going in the machines.<br><br>And he found all these, sort of – it was like a naturalist coming in and looking at this tiny, 5,000-byte universe, and seeing all these things happening that we see in the outside world, in biology.<br><br>This is some of the generations of his universe.<br><br>But they&#39;re just going to stay numbers; they&#39;re not going to become organisms.<br><br>They have to have something.<br><br>You have a genotype and you have to have a phenotype.<br><br>They have to go out and do something. And he started doing that, started giving these little numerical organisms things they could play with – playing chess with other machines and so on.<br><br>And they did start to evolve.<br><br>And he went around the country after that.<br><br>Every time there was a new, fast machine, he started using it, and saw exactly what&#39;s happening now.<br><br>That the programs, instead of being turned off – when you quit the program, you&#39;d keep running and, basically, all the sorts of things like Windows is doing, running as a multi-cellular organism on many machines, he envisioned all that happening.<br><br>And he saw that evolution itself was an intelligent process.<br><br>It wasn&#39;t any sort of creator intelligence, but the thing itself was a giant parallel computation that would have some intelligence.<br><br>And he went out of his way to say that he was not saying this was lifelike, or a new kind of life.<br><br>It just was another version of the same thing happening.<br><br>And there&#39;s really no difference between what he was doing in the computer and what nature did billions of years ago.<br><br>And could you do it again now?<br><br>So, when I went into these archives looking at this stuff, lo and behold, the archivist came up one day, saying, &quot;I think we found another box that had been thrown out.&quot;<br><br>And it was his universe on punch cards.<br><br>So there it is, 50 years later, sitting there – sort of suspended animation.<br><br>That&#39;s the instructions for running – this is actually the source code for one of those universes, with a note from the engineers saying they&#39;re having some problems.<br><br>&quot;There must be something about this code that you haven&#39;t explained yet.&quot;<br><br>And I think that&#39;s really the truth. We still don&#39;t understand how these very simple instructions can lead to increasing complexity.<br><br>What&#39;s the dividing line between when that is lifelike and when it really is alive?<br><br>These cards, now, thanks to me showing up, are being saved.<br><br>And the question is, should we run them or not?<br><br>You know, could we get them running?<br><br>Do you want to let it loose on the Internet?<br><br>These machines would think they – these organisms, if they came back to life now – whether they&#39;ve died and gone to heaven, there&#39;s a universe.<br><br>My laptop is 10 thousand million times the size of the universe that they lived in when Barricelli quit the project.<br><br>He was thinking far ahead, to how this would really grow into a new kind of life.<br><br>And that&#39;s what&#39;s happening!<br><br>When Juan Enriquez told us about these 12 trillion bits being transferred back and forth, of all this genomics data going to the proteomics lab, that&#39;s what Barricelli imagined: that this digital code in these machines is actually starting to code – it already is coding from nucleic acids.<br><br>We&#39;ve been doing that since, you know, since we started PCR and synthesizing small strings of DNA.<br><br>And real soon, we&#39;re actually going to be synthesizing the proteins, and, like Steve showed us, that just opens an entirely new world.<br><br>It&#39;s a world that Von Neumann himself envisioned.<br><br>This was published after he died: his sort of unfinished notes on self-reproducing machines, what it takes to get the machines sort of jump-started to where they begin to reproduce.<br><br>It took really three people: Barricelli had the concept of the code as a living thing; Von Neumann saw how you could build the machines – that now, last count, four million of these Von Neumann machines is built every 24 hours; and Julian Bigelow, who died 10 days ago – this is John Markoff&#39;s obituary for him – he was the important missing link, the engineer who came in and knew how to put those vacuum tubes together and make it work.<br><br>And all our computers have, inside them, the copies of the architecture that he had to just design one day, sort of on pencil and paper.<br><br>And we owe a tremendous credit to that.<br><br>And he explained, in a very generous way, the spirit that brought all these different people to the Institute for Advanced Study in the &#39;40s to do this project, and make it freely available with no patents, no restrictions, no intellectual property disputes to the rest of the world.<br><br>That&#39;s the last entry in the logbook when the machine was shut down, July 1958.<br><br>And it&#39;s Julian Bigelow who was running it until midnight when the machine was officially turned off.<br><br>And that&#39;s the end.<br><br>Thank you very much.<br><br>(Applause)  </div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ジョージ・ダイソン：コンピュータの誕生&quot;&gt;&lt;a href=&quot;#ジョージ・ダイソン：コンピュータの誕生&quot; class=&quot;headerlink&quot; title=&quot;ジョージ・ダイソン：コンピュータの誕生&quot;&gt;&lt;/a&gt;ジョージ・ダイソン：コンピュータの誕生&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第9段は「ジョージ・ダイソン：コンピュータの誕生」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;あなたがどこに行こうとしているのかを知るためには、どこから来たのか理解しなければなりません。この17分間のTED Talkでは、歴史家のDysonが1600年代からコンピュータの歴史を説明し、我々がどうして今ここいるのかを解説してくれていますす。興味深いだけでなく、理解するのも簡単です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/EF692dBzWAs?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(10)　アルゴリズムがどう我々の世界を形作っているか [Video]</title>
    <link href="https://so-matome.net/2017/11/17/ted-talks-programming-everyone-must-watch-10/"/>
    <id>https://so-matome.net/2017/11/17/ted-talks-programming-everyone-must-watch-10/</id>
    <published>2017-11-17T22:00:01.000Z</published>
    <updated>2017-11-17T22:00:01.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか"><a href="#ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか" class="headerlink" title="ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか"></a>ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第10段は「ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか」。以下のように紹介されています：</p><blockquote><p>この15分のプログラミングに関するTED Talkでは、Slavinはプログラミングが現代の我々にとって非常に重要である理由を示してくれています。現代のアルゴリズムはあまりにも無謀に書かれています。プログラマとしては、これも考慮しておく必要があるのではないでしょうか。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/ENWVRcMGDoU?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>This is a photograph by the artist Michael Najjar, and it’s real, in the sense that he went there to Argentina to take the photo. But it’s also a fiction. There’s a lot of work that went into it after that. And what he’s done is he’s actually reshaped, digitally, all of the contours of the mountains to follow the vicissitudes of the Dow Jones index. So what you see, that precipice, that high precipice with the valley, is the 2008 financial crisis. The photo was made when we were deep in the valley over there. I don’t know where we are now. This is the Hang Seng index for Hong Kong. And similar topography. I wonder why.<br><br>And this is art. This is metaphor. But I think the point is that this is metaphor with teeth, and it’s with those teeth that I want to propose today that we rethink a little bit about the role of contemporary math – not just financial math, but math in general. That its transition from being something that we extract and derive from the world to something that actually starts to shape it – the world around us and the world inside us. And it’s specifically algorithms, which are basically the math that computers use to decide stuff. They acquire the sensibility of truth because they repeat over and over again, and they ossify and calcify, and they become real.<br><br>And I was thinking about this, of all places, on a transatlantic flight a couple of years ago, because I happened to be seated next to a Hungarian physicist about my age and we were talking about what life was like during the Cold War for physicists in Hungary. And I said, “So what were you doing?”<br><br>And he said, “Well we were mostly breaking stealth.”<br><br>And I said, “That’s a good job. That’s interesting. How does that work?” And to understand that, you have to understand a little bit about how stealth works. And so – this is an over-simplification – but basically, it’s not like you can just pass a radar signal right through 156 tons of steel in the sky. It’s not just going to disappear. But if you can take this big, massive thing, and you could turn it into a million little things – something like a flock of birds – well then the radar that’s looking for that has to be able to see every flock of birds in the sky. And if you’re a radar, that’s a really bad job.<br><br>And he said, “Yeah.” He said, “But that’s if you’re a radar. So we didn’t use a radar; we built a black box that was looking for electrical signals, electronic communication. And whenever we saw a flock of birds that had electronic communication, we thought, ‘Probably has something to do with the Americans.’”<br><br>And I said, “Yeah. That’s good. So you’ve effectively negated 60 years of aeronautic research. What’s your act two? What do you do when you grow up?” And he said, “Well, financial services.” And I said, “Oh.” Because those had been in the news lately. And I said, “How does that work?” And he said, “Well there’s 2,000 physicists on Wall Street now, and I’m one of them.” And I said, “What’s the black box for Wall Street?”<br><br>And he said, “It’s funny you ask that, because it’s actually called black box trading. And it’s also sometimes called algo trading, algorithmic trading.” And algorithmic trading evolved in part because institutional traders have the same problems that the United States Air Force had, which is that they’re moving these positions – whether it’s Proctor &amp; Gamble or Accenture, whatever – they’re moving a million shares of something through the market. And if they do that all at once, it’s like playing poker and going all in right away. You just tip your hand. And so they have to find a way – and they use algorithms to do this – to break up that big thing into a million little transactions. And the magic and the horror of that is that the same math that you use to break up the big thing into a million little things can be used to find a million little things and sew them back together and figure out what’s actually happening in the market.<br><br>So if you need to have some image of what’s happening in the stock market right now, what you can picture is a bunch of algorithms that are basically programmed to hide, and a bunch of algorithms that are programmed to go find them and act. And all of that’s great, and it’s fine. And that’s 70 percent of the United States stock market, 70 percent of the operating system formerly known as your pension, your mortgage.<br><br>And what could go wrong? What could go wrong is that a year ago, nine percent of the entire market just disappears in five minutes, and they called it the Flash Crash of 2:45. All of a sudden, nine percent just goes away, and nobody to this day can even agree on what happened because nobody ordered it, nobody asked for it. Nobody had any control over what was actually happening. All they had was just a monitor in front of them that had the numbers on it and just a red button that said, “Stop.”<br><br>And that’s the thing, is that we’re writing things, we’re writing these things that we can no longer read. And we’ve rendered something illegible, and we’ve lost the sense of what’s actually happening in this world that we’ve made. And we’re starting to make our way. There’s a company in Boston called Nanex, and they use math and magic and I don’t know what, and they reach into all the market data and they find, actually sometimes, some of these algorithms. And when they find them they pull them out and they pin them to the wall like butterflies. And they do what we’ve always done when confronted with huge amounts of data that we don’t understand – which is that they give them a name and a story. So this is one that they found, they called the Knife, the Carnival, the Boston Shuffler, Twilight.<br><br>And the gag is that, of course, these aren’t just running through the market. You can find these kinds of things wherever you look, once you learn how to look for them. You can find it here: this book about flies that you may have been looking at on Amazon. You may have noticed it when its price started at 1.7 million dollars. It’s out of print – still … (Laughter) If you had bought it at 1.7, it would have been a bargain. A few hours later, it had gone up to 23.6 million dollars, plus shipping and handling. And the question is: Nobody was buying or selling anything; what was happening? And you see this behavior on Amazon as surely as you see it on Wall Street. And when you see this kind of behavior, what you see is the evidence of algorithms in conflict, algorithms locked in loops with each other, without any human oversight, without any adult supervision to say, “Actually, 1.7 million is plenty.”<br><br>(Laughter)<br><br>And as with Amazon, so it is with Netflix. And so Netflix has gone through several different algorithms over the years. They started with Cinematch, and they’ve tried a bunch of others – there’s Dinosaur Planet; there’s Gravity. They’re using Pragmatic Chaos now. Pragmatic Chaos is, like all of Netflix algorithms, trying to do the same thing. It’s trying to get a grasp on you, on the firmware inside the human skull, so that it can recommend what movie you might want to watch next – which is a very, very difficult problem. But the difficulty of the problem and the fact that we don’t really quite have it down, it doesn’t take away from the effects Pragmatic Chaos has. Pragmatic Chaos, like all Netflix algorithms, determines, in the end, 60 percent of what movies end up being rented. So one piece of code with one idea about you is responsible for 60 percent of those movies.<br><br>But what if you could rate those movies before they get made? Wouldn’t that be handy? Well, a few data scientists from the U.K. are in Hollywood, and they have “story algorithms” – a company called Epagogix. And you can run your script through there, and they can tell you, quantifiably, that that’s a 30 million dollar movie or a 200 million dollar movie. And the thing is, is that this isn’t Google. This isn’t information. These aren’t financial stats; this is culture. And what you see here, or what you don’t really see normally, is that these are the physics of culture. And if these algorithms, like the algorithms on Wall Street, just crashed one day and went awry, how would we know? What would it look like?<br><br>And they’re in your house. They’re in your house. These are two algorithms competing for your living room. These are two different cleaning robots that have very different ideas about what clean means. And you can see it if you slow it down and attach lights to them, and they’re sort of like secret architects in your bedroom. And the idea that architecture itself is somehow subject to algorithmic optimization is not far-fetched. It’s super-real and it’s happening around you.<br><br>You feel it most when you’re in a sealed metal box, a new-style elevator; they’re called destination-control elevators. These are the ones where you have to press what floor you’re going to go to before you get in the elevator. And it uses what’s called a bin-packing algorithm. So none of this mishegas of letting everybody go into whatever car they want. Everybody who wants to go to the 10th floor goes into car two, and everybody who wants to go to the third floor goes into car five. And the problem with that is that people freak out. People panic. And you see why. You see why. It’s because the elevator is missing some important instrumentation, like the buttons. (Laughter) Like the things that people use. All it has is just the number that moves up or down and that red button that says, “Stop.” And this is what we’re designing for. We’re designing for this machine dialect. And how far can you take that? How far can you take it? You can take it really, really far.<br><br>So let me take it back to Wall Street. Because the algorithms of Wall Street are dependent on one quality above all else, which is speed. And they operate on milliseconds and microseconds. And just to give you a sense of what microseconds are, it takes you 500,000 microseconds just to click a mouse. But if you’re a Wall Street algorithm and you’re five microseconds behind, you’re a loser. So if you were an algorithm, you’d look for an architect like the one that I met in Frankfurt who was hollowing out a skyscraper – throwing out all the furniture, all the infrastructure for human use, and just running steel on the floors to get ready for the stacks of servers to go in – all so an algorithm could get close to the Internet.<br><br>And you think of the Internet as this kind of distributed system. And of course, it is, but it’s distributed from places. In New York, this is where it’s distributed from: the Carrier Hotel located on Hudson Street. And this is really where the wires come right up into the city. And the reality is that the further away you are from that, you’re a few microseconds behind every time. These guys down on Wall Street, Marco Polo and Cherokee Nation, they’re eight microseconds behind all these guys going into the empty buildings being hollowed out up around the Carrier Hotel. And that’s going to keep happening. We’re going to keep hollowing them out, because you, inch for inch and pound for pound and dollar for dollar, none of you could squeeze revenue out of that space like the Boston Shuffler could.<br><br>But if you zoom out, if you zoom out, you would see an 825-mile trench between New York City and Chicago that’s been built over the last few years by a company called Spread Networks. This is a fiber optic cable that was laid between those two cities to just be able to traffic one signal 37 times faster than you can click a mouse – just for these algorithms, just for the Carnival and the Knife. And when you think about this, that we’re running through the United States with dynamite and rock saws so that an algorithm can close the deal three microseconds faster, all for a communications framework that no human will ever know, that’s a kind of manifest destiny; and we’ll always look for a new frontier.<br><br>Unfortunately, we have our work cut out for us. This is just theoretical. This is some mathematicians at MIT. And the truth is I don’t really understand a lot of what they’re talking about. It involves light cones and quantum entanglement, and I don’t really understand any of that. But I can read this map, and what this map says is that, if you’re trying to make money on the markets where the red dots are, that’s where people are, where the cities are, you’re going to have to put the servers where the blue dots are to do that most effectively. And the thing that you might have noticed about those blue dots is that a lot of them are in the middle of the ocean. So that’s what we’ll do: we’ll build bubbles or something, or platforms. We’ll actually part the water to pull money out of the air, because it’s a bright future if you’re an algorithm.<br><br>(Laughter)<br><br>And it’s not the money that’s so interesting actually. It’s what the money motivates, that we’re actually terraforming the Earth itself with this kind of algorithmic efficiency. And in that light, you go back and you look at Michael Najjar’s photographs, and you realize that they’re not metaphor, they’re prophecy. They’re prophecy for the kind of seismic, terrestrial effects of the math that we’re making. And the landscape was always made by this sort of weird, uneasy collaboration between nature and man. But now there’s this third co-evolutionary force: algorithms – the Boston Shuffler, the Carnival. And we will have to understand those as nature, and in a way, they are.<br><br>Thank you.<br><br>(Applause)<br></div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか&quot;&gt;&lt;a href=&quot;#ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか&quot; class=&quot;headerlink&quot; title=&quot;ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか&quot;&gt;&lt;/a&gt;ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第10段は「ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;この15分のプログラミングに関するTED Talkでは、Slavinはプログラミングが現代の我々にとって非常に重要である理由を示してくれています。現代のアルゴリズムはあまりにも無謀に書かれています。プログラマとしては、これも考慮しておく必要があるのではないでしょうか。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ENWVRcMGDoU?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(11)　脳科学がどうコンピューティングを変えるか [Video]</title>
    <link href="https://so-matome.net/2017/11/10/ted-talks-programming-everyone-must-watch-11/"/>
    <id>https://so-matome.net/2017/11/10/ted-talks-programming-everyone-must-watch-11/</id>
    <published>2017-11-10T22:00:01.000Z</published>
    <updated>2017-11-10T22:00:01.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか"><a href="#ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか" class="headerlink" title="ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか"></a>ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第11段は「ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか」。以下のように紹介されています：</p><blockquote><p>私たちはしばしばコンピュータと頭脳は基本的に同じだと考えますが、でもたぶんそれよりもっと深い話です。 コンピュータは脳について多くのことを教えてくれすが、我々が脳について学ぶことはまだまだたくさんあります。脳科学の知識の進歩によって、我々のコンピューティングの理解も進化するでしょう。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/G6CVj5IQkzk?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>I do two things: I design mobile computers and I study brains.<br><br>Today&#39;s talk is about brains and – (Audience member cheers) Yay! I have a brain fan out there.<br><br>(Laughter) If I could have my first slide, you&#39;ll see the title of my talk and my two affiliations.<br><br>So what I&#39;m going to talk about is why we don&#39;t have a good brain theory, why it is important that we should develop one and what we can do about it.<br><br>I&#39;ll try to do all that in 20 minutes.<br><br>I have two affiliations.<br><br>Most of you know me from my Palm and Handspring days, but I also run a nonprofit scientific research institute called the Redwood Neuroscience Institute in Menlo Park.<br><br>We study theoretical neuroscience and how the neocortex works.<br><br>I&#39;m going to talk all about that.<br><br>I have one slide on my other life, the computer life, and that&#39;s this slide here.<br><br>These are some of the products I&#39;ve worked on over the last 20 years, starting from the very original laptop to some of the first tablet computers and so on, ending up most recently with the Treo, and we&#39;re continuing to do this.<br><br>I&#39;ve done this because I believe mobile computing is the future of personal computing, and I&#39;m trying to make the world a little bit better by working on these things.<br><br>But this was, I admit, all an accident.<br><br>I really didn&#39;t want to do any of these products.<br><br>Very early in my career I decided I was not going to be in the computer industry.<br><br>Before that, I just have to tell you about this picture of Graffiti I picked off the web the other day.<br><br>I was looking for a picture for Graffiti that&#39;ll text input language.<br><br>I found a website dedicated to teachers who want to make script-writing things across the top of their blackboard, and they had added Graffiti to it, and I&#39;m sorry about that.<br><br>(Laughter) So what happened was, when I was young and got out of engineering school at Cornell in &#39;79, I went to work for Intel and was in the computer industry, and three months into that, I fell in love with something else.<br><br>I said, &quot;I made the wrong career choice here,&quot; and I fell in love with brains.<br><br>This is not a real brain.<br><br>This is a picture of one, a line drawing.<br><br>And I don&#39;t remember exactly how it happened, but I have one recollection, which was pretty strong in my mind.<br><br>In September of 1979, Scientific American came out with a single-topic issue about the brain.<br><br>It was one of their best issues ever.<br><br>They talked about the neuron, development, disease, vision and all the things you might want to know about brains.<br><br>It was really quite impressive.<br><br>One might&#39;ve had the impression we knew a lot about brains.<br><br>But the last article in that issue was written by Francis Crick of DNA fame.<br><br>Today is, I think, the 50th anniversary of the discovery of DNA.<br><br>And he wrote a story basically saying, this is all well and good, but you know, we don&#39;t know diddly squat about brains, and no one has a clue how they work, so don&#39;t believe what anyone tells you.<br><br>This is a quote from that article, he says: &quot;What is conspicuously lacking&quot; – he&#39;s a very proper British gentleman – &quot;What is conspicuously lacking is a broad framework of ideas in which to interpret these different approaches.&quot;<br><br>I thought the word &quot;framework&quot; was great.<br><br>He didn&#39;t say we didn&#39;t have a theory.<br><br>He says we don&#39;t even know how to begin to think about it.<br><br>We don&#39;t even have a framework.<br><br>We are in the pre-paradigm days, if you want to use Thomas Kuhn.<br><br>So I fell in love with this.<br><br>I said, look: We have all this knowledge about brains – how hard can it be?<br><br>It&#39;s something we can work on in my lifetime; I could make a difference.<br><br>So I tried to get out of the computer business, into the brain business.<br><br>First, I went to MIT, the AI lab was there.<br><br>I said, I want to build intelligent machines too, but I want to study how brains work first.<br><br>And they said, &quot;Oh, you don&#39;t need to do that.<br><br>You&#39;re just going to program computers, that&#39;s all.<br><br>I said, you really ought to study brains.<br><br>They said, &quot;No, you&#39;re wrong.&quot;<br><br>I said, &quot;No, you&#39;re wrong,&quot; and I didn&#39;t get in.<br><br>(Laughter) I was a little disappointed – pretty young – but I went back again a few years later, this time in California, and I went to Berkeley.<br><br>And I said, I&#39;ll go in from the biological side.<br><br>So I got in the PhD program in biophysics.<br><br>I was like, I&#39;m studying brains now.<br><br>Well, I want to study theory.<br><br>They said, &quot;You can&#39;t study theory about brains.<br><br>You can&#39;t get funded for that.<br><br>And as a graduate student, you can&#39;t do that.&quot;<br><br>So I said, oh my gosh.<br><br>I was depressed; I said, but I can make a difference in this field.<br><br>I went back in the computer industry and said, I&#39;ll have to work here for a while.<br><br>That&#39;s when I designed all those computer products.<br><br>(Laughter) I said, I want to do this for four years, make some money, I was having a family, and I would mature a bit, and maybe the business of neuroscience would mature a bit.<br><br>Well, it took longer than four years.<br><br>It&#39;s been about 16 years.<br><br>But I&#39;m doing it now, and I&#39;m going to tell you about it.<br><br>So why should we have a good brain theory?<br><br>Well, there&#39;s lots of reasons people do science.<br><br>The most basic one is, people like to know things.<br><br>We&#39;re curious, and we go out and get knowledge.<br><br>Why do we study ants? It&#39;s interesting.<br><br>Maybe we&#39;ll learn something useful, but it&#39;s interesting and fascinating.<br><br>But sometimes a science has other attributes which makes it really interesting.<br><br>Sometimes a science will tell something about ourselves; it&#39;ll tell us who we are.<br><br>Evolution did this and Copernicus did this, where we have a new understanding of who we are.<br><br>And after all, we are our brains.<br><br>My brain is talking to your brain.<br><br>Our bodies are hanging along for the ride, but my brain is talking to your brain.<br><br>And if we want to understand who we are and how we feel and perceive, we need to understand brains.<br><br>Another thing is sometimes science leads to big societal benefits, technologies, or businesses or whatever.<br><br>This is one, too, because when we understand how brains work, we&#39;ll be able to build intelligent machines.<br><br>That&#39;s a good thing on the whole, with tremendous benefits to society, just like a fundamental technology.<br><br>So why don&#39;t we have a good theory of brains?<br><br>People have been working on it for 100 years.<br><br>Let&#39;s first take a look at what normal science looks like.<br><br>This is normal science.<br><br>Normal science is a nice balance between theory and experimentalists.<br><br>The theorist guy says, &quot;I think this is what&#39;s going on,&quot; the experimentalist says, &quot;You&#39;re wrong.&quot;<br><br>It goes back and forth, this works in physics, this in geology.<br><br>But if this is normal science, what does neuroscience look like?<br><br>This is what neuroscience looks like.<br><br>We have this mountain of data, which is anatomy, physiology and behavior.<br><br>You can&#39;t imagine how much detail we know about brains.<br><br>There were 28,000 people who went to the neuroscience conference this year, and every one of them is doing research in brains.<br><br>A lot of data, but no theory.<br><br>There&#39;s a little wimpy box on top there.<br><br>And theory has not played a role in any sort of grand way in the neurosciences.<br><br>And it&#39;s a real shame.<br><br>Now, why has this come about?<br><br>If you ask neuroscientists why is this the state of affairs, first, they&#39;ll admit it.<br><br>But if you ask them, they say, there&#39;s various reasons we don&#39;t have a good brain theory.<br><br>Some say we still don&#39;t have enough data, we need more information, there&#39;s all these things we don&#39;t know.<br><br>Well, I just told you there&#39;s data coming out of your ears.<br><br>We have so much information, we don&#39;t even know how to organize it.<br><br>What good is more going to do?<br><br>Maybe we&#39;ll be lucky and discover some magic thing, but I don&#39;t think so.<br><br>This is a symptom of the fact that we just don&#39;t have a theory.<br><br>We don&#39;t need more data, we need a good theory.<br><br>Another one is sometimes people say, &quot;Brains are so complex, it&#39;ll take another 50 years.&quot;<br><br>I even think Chris said something like this yesterday, something like, it&#39;s one of the most complicated things in the universe.<br><br>That&#39;s not true – you&#39;re more complicated than your brain.<br><br>You&#39;ve got a brain.<br><br>And although the brain looks very complicated, things look complicated until you understand them.<br><br>That&#39;s always been the case.<br><br>So we can say, my neocortex, the part of the brain I&#39;m interested in, has 30 billion cells.<br><br>But, you know what?<br><br>It&#39;s very, very regular.<br><br>In fact, it looks like it&#39;s the same thing repeated over and over again.<br><br>It&#39;s not as complex as it looks.<br><br>That&#39;s not the issue.<br><br>Some people say, brains can&#39;t understand brains.<br><br>Very Zen-like. Woo.<br><br>(Laughter) You know, it sounds good, but why?<br><br>I mean, what&#39;s the point?<br><br>It&#39;s just a bunch of cells.<br><br>You understand your liver.<br><br>It&#39;s got a lot of cells in it too, right?<br><br>So, you know, I don&#39;t think there&#39;s anything to that.<br><br>And finally, some people say, &quot;I don&#39;t feel like a bunch of cells – I&#39;m conscious.<br><br>I&#39;ve got this experience, I&#39;m in the world.<br><br>I can&#39;t be just a bunch of cells.&quot;<br><br>Well, people used to believe there was a life force to be living, and we now know that&#39;s really not true at all.<br><br>And there&#39;s really no evidence, other than that people just disbelieve that cells can do what they do.<br><br>So some people have fallen into the pit of metaphysical dualism, some really smart people, too, but we can reject all that.<br><br>(Laughter) No, there&#39;s something else, something really fundamental, and it is: another reason why we don&#39;t have a good brain theory is because we have an intuitive, strongly held but incorrect assumption that has prevented us from seeing the answer.<br><br>There&#39;s something we believe that just, it&#39;s obvious, but it&#39;s wrong.<br><br>Now, there&#39;s a history of this in science and before I tell you what it is, I&#39;ll tell you about the history of it in science.<br><br>Look at other scientific revolutions – the solar system, that&#39;s Copernicus, Darwin&#39;s evolution, and tectonic plates, that&#39;s Wegener.<br><br>They all have a lot in common with brain science.<br><br>First, they had a lot of unexplained data. A lot of it.<br><br>But it got more manageable once they had a theory.<br><br>The best minds were stumped – really smart people.<br><br>We&#39;re not smarter now than they were then; it just turns out it&#39;s really hard to think of things, but once you&#39;ve thought of them, it&#39;s easy to understand.<br><br>My daughters understood these three theories, in their basic framework, in kindergarten.<br><br>It&#39;s not that hard – here&#39;s the apple, here&#39;s the orange, the Earth goes around, that kind of stuff.<br><br>Another thing is the answer was there all along, but we kind of ignored it because of this obvious thing.<br><br>It was an intuitive, strongly held belief that was wrong.<br><br>In the case of the solar system, the idea that the Earth is spinning, the surface is going a thousand miles an hour, and it&#39;s going through the solar system at a million miles an hour – this is lunacy; we all know the Earth isn&#39;t moving.<br><br>Do you feel like you&#39;re moving a thousand miles an hour?<br><br>If you said Earth was spinning around in space and was huge – they would lock you up, that&#39;s what they did back then.<br><br>So it was intuitive and obvious.<br><br>Now, what about evolution?<br><br>Evolution, same thing.<br><br>We taught our kids the Bible says God created all these species, cats are cats; dogs are dogs; people are people; plants are plants; they don&#39;t change.<br><br>Noah put them on the ark in that order, blah, blah.<br><br>The fact is, if you believe in evolution, we all have a common ancestor.<br><br>We all have a common ancestor with the plant in the lobby!<br><br>This is what evolution tells us.<br><br>And it&#39;s true. It&#39;s kind of unbelievable.<br><br>And the same thing about tectonic plates.<br><br>All the mountains and the continents are kind of floating around on top of the Earth.<br><br>It doesn&#39;t make any sense.<br><br>So what is the intuitive, but incorrect assumption, that&#39;s kept us from understanding brains?<br><br>I&#39;ll tell you. It&#39;ll seem obvious that it&#39;s correct. That&#39;s the point.<br><br>Then I&#39;ll make an argument why you&#39;re incorrect on the other assumption.<br><br>The intuitive but obvious thing is: somehow, intelligence is defined by behavior; we&#39;re intelligent because of how we do things and how we behave intelligently.<br><br>And I&#39;m going to tell you that&#39;s wrong.<br><br>Intelligence is defined by prediction.<br><br>I&#39;m going to work you through this in a few slides, and give you an example of what this means.<br><br>Here&#39;s a system.<br><br>Engineers and scientists like to look at systems like this.<br><br>They say, we have a thing in a box.<br><br>We have its inputs and outputs.<br><br>The AI people said, the thing in the box is a programmable computer, because it&#39;s equivalent to a brain.<br><br>We&#39;ll feed it some inputs and get it to do something, have some behavior.<br><br>Alan Turing defined the Turing test, which essentially says, we&#39;ll know if something&#39;s intelligent if it behaves identical to a human – a behavioral metric of what intelligence is that has stuck in our minds for a long time.<br><br>Reality, though – I call it real intelligence.<br><br>Real intelligence is built on something else.<br><br>We experience the world through a sequence of patterns, and we store them, and we recall them.<br><br>When we recall them, we match them up against reality, and we&#39;re making predictions all the time.<br><br>It&#39;s an internal metric; there&#39;s an internal metric about us, saying, do we understand the world, am I making predictions, and so on.<br><br>You&#39;re all being intelligent now, but you&#39;re not doing anything.<br><br>Maybe you&#39;re scratching yourself, but you&#39;re not doing anything.<br><br>But you&#39;re being intelligent; you&#39;re understanding what I&#39;m saying.<br><br>Because you&#39;re intelligent and you speak English, you know the word at the end of this sentence.<br><br>The word came to you; you make these predictions all the time.<br><br>What I&#39;m saying is, the internal prediction is the output in the neocortex, and somehow, prediction leads to intelligent behavior.<br><br>Here&#39;s how that happens: Let&#39;s start with a non-intelligent brain.<br><br>I&#39;ll argue a non-intelligent brain, we&#39;ll call it an old brain.<br><br>And we&#39;ll say it&#39;s a non-mammal, like a reptile, say, an alligator; we have an alligator.<br><br>And the alligator has some very sophisticated senses.<br><br>It&#39;s got good eyes and ears and touch senses and so on, a mouth and a nose.<br><br>It has very complex behavior.<br><br>It can run and hide. It has fears and emotions. It can eat you.<br><br>It can attack.<br><br>It can do all kinds of stuff.<br><br>But we don&#39;t consider the alligator very intelligent, not in a human sort of way.<br><br>But it has all this complex behavior already.<br><br>Now in evolution, what happened?<br><br>First thing that happened in evolution with mammals is we started to develop a thing called the neocortex.<br><br>I&#39;m going to represent the neocortex by this box on top of the old brain.<br><br>Neocortex means &quot;new layer.&quot;<br><br>It&#39;s a new layer on top of your brain.<br><br>It&#39;s the wrinkly thing on the top of your head that got wrinkly because it got shoved in there and doesn&#39;t fit.<br><br>(Laughter) Literally, it&#39;s about the size of a table napkin and doesn&#39;t fit, so it&#39;s wrinkly.<br><br>Now, look at how I&#39;ve drawn this.<br><br>The old brain is still there.<br><br>You still have that alligator brain.<br><br>You do. It&#39;s your emotional brain.<br><br>It&#39;s all those gut reactions you have.<br><br>On top of it, we have this memory system called the neocortex.<br><br>And the memory system is sitting over the sensory part of the brain.<br><br>So as the sensory input comes in and feeds from the old brain, it also goes up into the neocortex.<br><br>And the neocortex is just memorizing.<br><br>It&#39;s sitting there saying, I&#39;m going to memorize all the things going on: where I&#39;ve been, people I&#39;ve seen, things I&#39;ve heard, and so on.<br><br>And in the future, when it sees something similar to that again, in a similar environment, or the exact same environment, it&#39;ll start playing it back: &quot;Oh, I&#39;ve been here before,&quot; and when you were here before, this happened next.<br><br>It allows you to predict the future.<br><br>It literally feeds back the signals into your brain; they&#39;ll let you see what&#39;s going to happen next, will let you hear the word &quot;sentence&quot; before I said it.<br><br>And it&#39;s this feeding back into the old brain that will allow you to make more intelligent decisions.<br><br>This is the most important slide of my talk, so I&#39;ll dwell on it a little.<br><br>And all the time you say, &quot;Oh, I can predict things,&quot; so if you&#39;re a rat and you go through a maze, and you learn the maze, next time you&#39;re in one, you have the same behavior.<br><br>But suddenly, you&#39;re smarter; you say, &quot;I recognize this maze, I know which way to go; I&#39;ve been here before; I can envision the future.&quot;<br><br>That&#39;s what it&#39;s doing.<br><br>This is true for all mammals – in humans, it got a lot worse.<br><br>Humans actually developed the front of the neocortex, called the anterior part of the neocortex.<br><br>And nature did a little trick.<br><br>It copied the posterior, the back part, which is sensory, and put it in the front.<br><br>Humans uniquely have the same mechanism on the front, but we use it for motor control.<br><br>So we&#39;re now able to do very sophisticated motor planning, things like that.<br><br>I don&#39;t have time to explain, but to understand how a brain works, you have to understand how the first part of the mammalian neocortex works, how it is we store patterns and make predictions.<br><br>Let me give you a few examples of predictions.<br><br>I already said the word &quot;sentence.&quot;<br><br>In music, if you&#39;ve heard a song before, when you hear it, the next note pops into your head already – you anticipate it.<br><br>With an album, at the end of a song, the next song pops into your head.<br><br>It happens all the time, you make predictions.<br><br>I have this thing called the &quot;altered door&quot; thought experiment.<br><br>It says, you have a door at home; when you&#39;re here, I&#39;m changing it – I&#39;ve got a guy back at your house right now, moving the door around, moving your doorknob over two inches.<br><br>When you go home tonight, you&#39;ll put your hand out, reach for the doorknob, notice it&#39;s in the wrong spot and go, &quot;Whoa, something happened.&quot;<br><br>It may take a second, but something happened.<br><br>I can change your doorknob in other ways – make it larger, smaller, change its brass to silver, make it a lever, I can change the door; put colors on, put windows in.<br><br>I can change a thousand things about your door and in the two seconds you take to open it, you&#39;ll notice something has changed.<br><br>Now, the engineering approach, the AI approach to this, is to build a door database with all the door attributes.<br><br>And as you go up to the door, we check them off one at time: door, door, color …<br><br>We don&#39;t do that.<br><br>Your brain doesn&#39;t do that.<br><br>Your brain is making constant predictions all the time about what will happen in your environment.<br><br>As I put my hand on this table, I expect to feel it stop.<br><br>When I walk, every step, if I missed it by an eighth of an inch, I&#39;ll know something has changed.<br><br>You&#39;re constantly making predictions about your environment.<br><br>I&#39;ll talk about vision, briefly.<br><br>This is a picture of a woman.<br><br>When we look at people, our eyes saccade over two to three times a second.<br><br>We&#39;re not aware of it, but our eyes are always moving.<br><br>When we look at a face, we typically go from eye to eye to nose to mouth.<br><br>When your eye moves from eye to eye, if there was something else there like a nose, you&#39;d see a nose where an eye is supposed to be and go, &quot;Oh, shit!&quot;<br><br>(Laughter) &quot;There&#39;s something wrong about this person.&quot;<br><br>That&#39;s because you&#39;re making a prediction.<br><br>It&#39;s not like you just look over and say, &quot;What am I seeing? A nose? OK.&quot;<br><br>No, you have an expectation of what you&#39;re going to see.<br><br>Every single moment.<br><br>And finally, let&#39;s think about how we test intelligence.<br><br>We test it by prediction: What is the next word in this …?<br><br>This is to this as this is to this.<br><br>What is the next number in this sentence?<br><br>Here&#39;s three visions of an object.<br><br>What&#39;s the fourth one?<br><br>That&#39;s how we test it.<br><br>It&#39;s all about prediction.<br><br>So what is the recipe for brain theory?<br><br>First of all, we have to have the right framework.<br><br>And the framework is a memory framework, not a computational or behavior framework, it&#39;s a memory framework.<br><br>How do you store and recall these sequences of patterns?<br><br>It&#39;s spatiotemporal patterns.<br><br>Then, if in that framework, you take a bunch of theoreticians – biologists generally are not good theoreticians.<br><br>Not always, but generally, there&#39;s not a good history of theory in biology.<br><br>I&#39;ve found the best people to work with are physicists, engineers and mathematicians, who tend to think algorithmically.<br><br>Then they have to learn the anatomy and the physiology.<br><br>You have to make these theories very realistic in anatomical terms.<br><br>Anyone who tells you their theory about how the brain works and doesn&#39;t tell you exactly how it&#39;s working and how the wiring works – it&#39;s not a theory.<br><br>And that&#39;s what we do at the Redwood Neuroscience Institute.<br><br>I&#39;d love to tell you we&#39;re making fantastic progress in this thing, and I expect to be back on this stage sometime in the not too distant future, to tell you about it.<br><br>I&#39;m really excited; this is not going to take 50 years.<br><br>What will brain theory look like?<br><br>First of all, it&#39;s going to be about memory.<br><br>Not like computer memory – not at all like computer memory.<br><br>It&#39;s very different.<br><br>It&#39;s a memory of very high-dimensional patterns, like the things that come from your eyes.<br><br>It&#39;s also memory of sequences: you cannot learn or recall anything outside of a sequence.<br><br>A song must be heard in sequence over time, and you must play it back in sequence over time.<br><br>And these sequences are auto-associatively recalled, so if I see something, I hear something, it reminds me of it, and it plays back automatically.<br><br>It&#39;s an automatic playback.<br><br>And prediction of future inputs is the desired output.<br><br>And as I said, the theory must be biologically accurate, it must be testable and you must be able to build it.<br><br>If you don&#39;t build it, you don&#39;t understand it.<br><br>One more slide.<br><br>What is this going to result in?<br><br>Are we going to really build intelligent machines?<br><br>Absolutely. And it&#39;s going to be different than people think.<br><br>No doubt that it&#39;s going to happen, in my mind.<br><br>First of all, we&#39;re going to build this stuff out of silicon.<br><br>The same techniques we use to build silicon computer memories, we can use here.<br><br>But they&#39;re very different types of memories.<br><br>And we&#39;ll attach these memories to sensors, and the sensors will experience real-live, real-world data, and learn about their environment.<br><br>Now, it&#39;s very unlikely the first things you&#39;ll see are like robots.<br><br>Not that robots aren&#39;t useful; people can build robots.<br><br>But the robotics part is the hardest part.<br><br>That&#39;s old brain. That&#39;s really hard.<br><br>The new brain is easier than the old brain.<br><br>So first we&#39;ll do things that don&#39;t require a lot of robotics.<br><br>So you&#39;re not going to see C-3PO.<br><br>You&#39;re going to see things more like intelligent cars that really understand what traffic is, what driving is and have learned that cars with the blinkers on for half a minute probably aren&#39;t going to turn.<br><br>(Laughter) We can also do intelligent security systems.<br><br>Anytime we&#39;re basically using our brain but not doing a lot of mechanics – those are the things that will happen first.<br><br>But ultimately, the world&#39;s the limit.<br><br>I don&#39;t know how this will turn out.<br><br>I know a lot of people who invented the microprocessor.<br><br>And if you talk to them, they knew what they were doing was really significant, but they didn&#39;t really know what was going to happen.<br><br>They couldn&#39;t anticipate cell phones and the Internet and all this kind of stuff.<br><br>They just knew like, &quot;We&#39;re going to build calculators and traffic-light controllers.<br><br>But it&#39;s going to be big!&quot;<br><br>In the same way, brain science and these memories are going to be a very fundamental technology, and it will lead to unbelievable changes in the next 100 years.<br><br>And I&#39;m most excited about how we&#39;re going to use them in science.<br><br>So I think that&#39;s all my time – I&#39;m over, and I&#39;m going to end my talk right there.<br><br><br></div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか&quot;&gt;&lt;a href=&quot;#ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか&quot; class=&quot;headerlink&quot; title=&quot;ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか&quot;&gt;&lt;/a&gt;ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第11段は「ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私たちはしばしばコンピュータと頭脳は基本的に同じだと考えますが、でもたぶんそれよりもっと深い話です。 コンピュータは脳について多くのことを教えてくれすが、我々が脳について学ぶことはまだまだたくさんあります。脳科学の知識の進歩によって、我々のコンピューティングの理解も進化するでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/G6CVj5IQkzk?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(12)　ベスト・コンピュータ・インタフェースはたぶん...あなたの手 [Video]</title>
    <link href="https://so-matome.net/2017/11/03/ted-talks-programming-everyone-must-watch-12/"/>
    <id>https://so-matome.net/2017/11/03/ted-talks-programming-everyone-must-watch-12/</id>
    <published>2017-11-03T22:00:01.000Z</published>
    <updated>2017-11-03T22:00:01.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="James-Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手"><a href="#James-Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手" class="headerlink" title="James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手"></a>James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第12段は「James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手」。以下のように紹介されています：</p><blockquote><p>このTEDトークはちょうど6分で短いものですが、あなたにいろいろ考えさせる内容を含んでいます。 コンピュータの歴史の中で、我々は主にキーボードやマウスでコンピュータとやり取りを行ってきました。 最近では、タッチスクリーンと音声コントロールがあります。でも、将来は？Pattenは、制御はハンドヘルドになると示唆しています。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/5WI6ZqCUNk0?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>A computer is an incredibly powerful means of creative expression, but for the most part, that expression is confined to the screens of our laptops and mobile phones.<br><br>And I&#39;d like to tell you a story about bringing this power of the computer to move things around and interact with us off of the screen and into the physical world in which we live.<br><br>A few years ago, I got a call from a luxury fashion store called Barneys New York, and the next thing I knew, I was designing storefront kinetic sculptures for their window displays.<br><br>This one&#39;s called &quot;The Chase.&quot;<br><br>There are two pairs of shoes, a man&#39;s pair and a woman&#39;s pair, and they play out this slow, tense chase around the window in which the man scoots up behind the woman and gets in her personal space, and then she moves away.<br><br>Each of the shoes has magnets in it, and there are magnets underneath the table that move the shoes around.<br><br>My friend Andy Cavatorta was building a robotic harp for Bjork&#39;s Biophilia tour and I wound up building the electronics and motion control software to make the harps move and play music.<br><br>The harp has four separate pendulums, and each pendulum has 11 strings, so the harp swings on its axis and also rotates in order to play different musical notes, and the harps are all networked together so that they can play the right notes at the right time in the music.<br><br>I built an interactive chemistry exhibit at the Museum of Science and Industry in Chicago, and this exhibit lets people use physical objects to grab chemical elements off of the periodic table and bring them together to cause chemical reactions to happen.<br><br>And the museum noticed that people were spending a lot of time with this exhibit, and a researcher from a science education center in Australia decided to study this exhibit and try to figure out what was going on.<br><br>And she found that the physical objects that people were using were helping people understand how to use the exhibit, and were helping people learn in a social way.<br><br>And when you think about it, this makes a lot of sense, that using specialized physical objects would help people use an interface more easily.<br><br>I mean, our hands and our minds are optimized to think about and interact with tangible objects.<br><br>Think about which you find easier to use, a physical keyboard or an onscreen keyboard like on a phone?<br><br>But the thing that struck me about all of these different projects is that they really had to be built from scratch, down to the level of the electronics and the printed circuit boards and all the mechanisms all the way up to the software.<br><br>I wanted to create something where we could move objects under computer control and create interactions around that idea without having to go through this process of building something from scratch every single time.<br><br>So my first attempt at this was at the MIT Media Lab with Professor Hiroshi Ishii, and we built this array of 512 different electromagnets, and together they were able to move objects around on top of their surface.<br><br>But the problem with this was that these magnets cost over 10,000 dollars.<br><br>Although each one was pretty small, altogether they weighed so much that the table that they were on started to sag.<br><br>So I wanted to build something where you could have this kind of interaction on any tabletop surface.<br><br>So to explore this idea, I built an army of small robots, and each of these robots has what are called omni wheels.<br><br>They&#39;re these special wheels that can move equally easily in all directions, and when you couple these robots with a video projector, you have these physical tools for interacting with digital information.<br><br>So here&#39;s an example of what I mean.<br><br>This is a video editing application where all of the controls for manipulating the video are physical.<br><br>So if we want to tweak the color, we just enter the color mode, and then we get three different dials for tweaking the color, or if we want to adjust the audio, then we get two different dials for that, these physical objects.<br><br>So here the left and right channel stay in sync, but if we want to, we can override that by grabbing both of them at the same time.<br><br>So the idea is that we get the speed and efficiency benefits of using these physical dials together with the flexibility and versatility of a system that&#39;s designed in software.<br><br>And this is a mapping application for disaster response.<br><br>So you have these physical objects that represent police, fire and rescue, and a dispatcher can grab them and place them on the map to tell those units where to go, and then the position of the units on the map gets synced up with the position of those units in the real world.<br><br>This is a video chat application.<br><br>It&#39;s amazing how much emotion you can convey with just a few simple movements of a physical object.<br><br>With this interface, we open up a huge array of possibilities in between traditional board games and arcade games, where the physical possibilities of interaction make so many different styles of play possible.<br><br>But one of the areas that I&#39;m most excited about using this platform for is applying it to problems that are difficult for computers or people to solve alone.<br><br>One example of those is protein folding.<br><br>So here we have an interface where we have physical handles onto a protein, and we can grab those handles and try to move the protein and try to fold it in different ways.<br><br>And if we move it in a way that doesn&#39;t really make sense with the underlying molecular simulation, we get this physical feedback where we can actually feel these physical handles pulling back against us.<br><br>So feeling what&#39;s going on inside a molecular simulation is a whole different level of interaction.<br><br>So we&#39;re just beginning to explore what&#39;s possible when we use software to control the movement of objects in our environment.<br><br>Maybe this is the computer of the future.<br><br>There&#39;s no touchscreen.<br><br>There&#39;s no technology visible at all.<br><br>But when we want to have a video chat or play a game or lay out the slides to our next TED Talk, the objects on the table come alive.<br><br>Thank you.<br><br>(Applause)<br></div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;James-Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手&quot;&gt;&lt;a href=&quot;#James-Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手&quot; class=&quot;headerlink&quot; title=&quot;James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手&quot;&gt;&lt;/a&gt;James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第12段は「James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このTEDトークはちょうど6分で短いものですが、あなたにいろいろ考えさせる内容を含んでいます。 コンピュータの歴史の中で、我々は主にキーボードやマウスでコンピュータとやり取りを行ってきました。 最近では、タッチスクリーンと音声コントロールがあります。でも、将来は？Pattenは、制御はハンドヘルドになると示唆しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5WI6ZqCUNk0?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>新しいファイルを作成せずに複数のファイルを1つのファイルオブジェクトに連結する [Python]</title>
    <link href="https://so-matome.net/2017/10/31/concatenate-multiple-files-into-a-single-file-object-without-creating-a-new-file/"/>
    <id>https://so-matome.net/2017/10/31/concatenate-multiple-files-into-a-single-file-object-without-creating-a-new-file/</id>
    <published>2017-10-31T22:00:01.875Z</published>
    <updated>2017-10-31T22:00:01.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>この質問は<a href="https://stackoverflow.com/questions/13613336/python-concatenate-text-file" target="_blank" rel="external">Pythonでテキスト・ファイルを連結する</a>に関連してるかも。</p><p>今、[‘file1.txt’, ‘file2.txt’,…]のような<code>file_names</code>のリストがある。</p><p>僕は全部のファイルを行ごとに読んで、単一のファイルオブジェクトにしたいんだけど、でもその過程で新しいファイルを作らずにやることって可能？？</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">with</span> open(file_names, <span class="string">'r'</span>) <span class="keyword">as</span> file_obj:</div><div class="line">   line = file_obj.readline()</div><div class="line">   <span class="keyword">while</span> line:</div><div class="line">       ...</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/3521109/bluprince13" target="_blank" rel="external">bluprince13</a> | 質問日時： 2017年9月15日 10:15 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p><a href="https://docs.python.org/3/library/fileinput.html" target="_blank" rel="external">fileinput</a>モジュールの<a href="https://docs.python.org/3/library/fileinput.html#fileinput.input" target="_blank" rel="external">input</a>を使えばいいよ。<br>これは複数のファイルから読み込むんだけど、文字列があたかも単一のファイルから来てるように見せるんだ (レイジーライン反復)。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> fileinput</div><div class="line"></div><div class="line">files= [<span class="string">'F:/files/a.txt'</span>,<span class="string">'F:/files/c.txt'</span>,<span class="string">'F:/files/c.txt'</span>]</div><div class="line"></div><div class="line">allfiles = fileinput.input(files)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> allfiles: <span class="comment"># これはすべてのファイルの行をループする</span></div><div class="line">    print(line)</div><div class="line"></div><div class="line"><span class="comment"># またはallfiles.readline()でもいい</span></div></pre></td></tr></table></figure><p>1つの場所にすべてのテキストが必要な場合は <code>StringIO</code>を使えばいいよ</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> io</div><div class="line"></div><div class="line">files= [<span class="string">'F:/files/a.txt'</span>,<span class="string">'F:/files/c.txt'</span>,<span class="string">'F:/files/c.txt'</span>]</div><div class="line"></div><div class="line"></div><div class="line">lines = io.StringIO()   <span class="comment">#すべての行を格納するオブジェクトのようなファイル</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> file_dir <span class="keyword">in</span> files:</div><div class="line">    <span class="keyword">with</span> open(file_dir, <span class="string">'r'</span>) <span class="keyword">as</span> file:</div><div class="line">        lines.write(file.read())</div><div class="line">        lines.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">lines.seek(<span class="number">0</span>)        <span class="comment"># これでオブジェクトのようなファイルのように扱えるようになった</span></div><div class="line">print(lines.read())</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/5798361/anonta" target="_blank" rel="external">Anonta</a> | 回答日時： 2017年9月15日 10:36 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>こんなのはどう？</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_files</span><span class="params">(*filenames)</span>:</span></div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</div><div class="line">        <span class="keyword">with</span> open(filename,<span class="string">'r'</span>) <span class="keyword">as</span> file_obj:</div><div class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj:</div><div class="line">                <span class="keyword">yield</span> line</div></pre></td></tr></table></figure><p>こんな風に呼び出せる：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> read_files(<span class="string">"f1.txt"</span>, <span class="string">"f2.txt"</span>, <span class="string">"f3.txt"</span>):</div><div class="line">    <span class="comment">#... lineを使って何かする</span></div></pre></td></tr></table></figure><p>それか</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">filenames = [<span class="string">"f1.txt"</span>, <span class="string">"f2.txt"</span>, <span class="string">"f3.txt"</span>]</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> read_files(*filenames):</div><div class="line">    <span class="comment">#... lineを使って何かする</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/4020610/lohmar-ashar" target="_blank" rel="external">Lohmar ASHAR</a> | 回答日時： 2017年9月15日 10:26 </div><br></p><hr><hr><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><p><code>multiple_files</code>がすべてのファイル名を含むリストであるとしよう</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">multiple_files = [<span class="string">"file1.txt"</span>, <span class="string">"file2.txt"</span>, <span class="string">"file3.txt"</span>, ...] <span class="comment"># などなど、、、</span></div></pre></td></tr></table></figure><p>すべてを放り込む出力ファイルを開く</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">f = open(<span class="string">"multiple_files.txt"</span>, <span class="string">"w"</span>)</div><div class="line"><span class="keyword">for</span> _file <span class="keyword">in</span> multiple_files:</div><div class="line">    f.write(_file.read())</div></pre></td></tr></table></figure><p>この方法だと、ファイルの各行をいちいち読む必要はないよ。</p><p>上記の方法は簡単だけど、<strong>fileinput</strong> モジュールでも代替できる：</p><p><a href="https://docs.python.org/3/library/fileinput.html#module-fileinput" target="_blank" rel="external"><strong> fileinput docs </strong></a></p><p>fileinputを使用すると、複数のファイルにアクセスして処理することができるよ。</p><p><strong>例</strong>：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">with</span> fileinput.input(files=(<span class="string">'file1.txt'</span>, <span class="string">'file2.txt'</span>)) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">        process(line)</div></pre></td></tr></table></figure></p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/3950422/bhansa" target="_blank" rel="external">bhansa</a> | 回答日時： 2017年9月18日 17:19 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/46237182/concatenate-multiple-files-into-a-single-file-object-without-creating-a-new-file" target="_blank" rel="external">Concatenate multiple files into a single file object without creating a new file</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;この質問は&lt;a href=&quot;https://stackoverflow.com/questions/13613336/python-concatenate-text-file&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pythonでテキスト・ファイルを連結する&lt;/a&gt;に関連してるかも。&lt;/p&gt;
&lt;p&gt;今、[‘file1.txt’, ‘file2.txt’,…]のような&lt;code&gt;file_names&lt;/code&gt;のリストがある。&lt;/p&gt;
&lt;p&gt;僕は全部のファイルを行ごとに読んで、単一のファイルオブジェクトにしたいんだけど、でもその過程で新しいファイルを作らずにやることって可能？？&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(file_names, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; file_obj:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   line = file_obj.readline()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; line:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       ...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/3521109/bluprince13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bluprince13&lt;/a&gt; | 質問日時： 2017年9月15日 10:15 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="python" scheme="https://so-matome.net/tags/python/"/>
    
      <category term="file" scheme="https://so-matome.net/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptを使用して現在のURLを取得する方法？ [Javascript]</title>
    <link href="https://so-matome.net/2017/10/31/get-the-current-url-with-javascript/"/>
    <id>https://so-matome.net/2017/10/31/get-the-current-url-with-javascript/</id>
    <published>2017-10-31T22:00:01.000Z</published>
    <updated>2017-10-31T22:00:01.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>私がやりたいのは、ウェブサイトのURLを取得することだけ。リンクから取得したURLではなくて。ページをローディングしている際に、僕はウェブサイトの完全な現在のURLを取得して設定する必要があるんだ。</p><p><div style="text-align: right"> By          dougoftheabaci | 質問日時： 2009年6月23日 19:26 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>これを使うのがいいかな：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.location.href</div></pre></td></tr></table></figure><p>以下の方法でも動作するけど、Firefoxではバグってる。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.URL;</div></pre></td></tr></table></figure><p><strong><a href="https://stackoverflow.com/questions/1034621/get-the-current-url-with-javascript" target="_blank" rel="external">DOMString型のURL、readonly</a>を参照</strong>。</p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/1034621/get-the-current-url-with-javascript" target="_blank" rel="external">Get the current URL with JavaScript?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;私がやりたいのは、ウェブサイトのURLを取得することだけ。リンクから取得したURLではなくて。ページをローディングしている際に、僕はウェブサイトの完全な現在のURLを取得して設定する必要があるんだ。&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By          dougoftheabaci | 質問日時： 2009年6月23日 19:26 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="url" scheme="https://so-matome.net/tags/url/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://so-matome.net/2017/10/30/hoge/"/>
    <id>https://so-matome.net/2017/10/30/hoge/</id>
    <published>2017-10-30T22:00:01.910Z</published>
    <updated>2017-10-30T22:00:01.638Z</updated>
    
    <content type="html"><![CDATA[<hr><p>date: 2017-10-30 22:00:01<br>tags:</p><ul><li>datasci</li><li>python</li><li>pandas</li><li>dataframe<br>title: Python pandasで既存のDataFrameに新しい列を追加する [Python]<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2>名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある：<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">          a         b         c         d</div><div class="line"><span class="number">2</span>  <span class="number">0.671399</span>  <span class="number">0.101208</span> <span class="number">-0.181532</span>  <span class="number">0.241273</span></div><div class="line"><span class="number">3</span>  <span class="number">0.446172</span> <span class="number">-0.243316</span>  <span class="number">0.051767</span>  <span class="number">1.577318</span></div><div class="line"><span class="number">5</span>  <span class="number">0.614758</span>  <span class="number">0.075793</span> <span class="number">-0.451460</span> <span class="number">-0.012493</span></div></pre></td></tr></table></figure></li></ul><p>既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span>   <span class="number">-0.335485</span></div><div class="line"><span class="number">1</span>   <span class="number">-1.166658</span></div><div class="line"><span class="number">2</span>   <span class="number">-0.385571</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure><p><code>join</code>、<code>append</code>、 <code>merge</code>のいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1661173/tomasz74" target="_blank" rel="external">tomasz74</a> | 質問日時： 2012年9月23日 19:00 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>元のdf1のインデックスを使用してSeriesを作ればいいよ。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">df1[<span class="string">'e'</span>] = Series(np.random.randn(sLength), index=df1.index)</div></pre></td></tr></table></figure><hr><p><strong>2015年　編集</strong><br>ある人は、上のコードで <code>SettingWithCopyWarning</code>が出るっていってるけど、このコードは現在のパンダバージョン0.16.1でも完璧に動作してるよ。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sLength = len(df1[<span class="string">'a'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1</div><div class="line">          a         b         c         d</div><div class="line"><span class="number">6</span> <span class="number">-0.269221</span> <span class="number">-0.026476</span>  <span class="number">0.997517</span>  <span class="number">1.294385</span></div><div class="line"><span class="number">8</span>  <span class="number">0.917438</span>  <span class="number">0.847941</span>  <span class="number">0.034235</span> <span class="number">-0.448948</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1[<span class="string">'e'</span>] = p.Series(np.random.randn(sLength), index=df1.index)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1</div><div class="line">          a         b         c         d         e</div><div class="line"><span class="number">6</span> <span class="number">-0.269221</span> <span class="number">-0.026476</span>  <span class="number">0.997517</span>  <span class="number">1.294385</span>  <span class="number">1.757167</span></div><div class="line"><span class="number">8</span>  <span class="number">0.917438</span>  <span class="number">0.847941</span>  <span class="number">0.034235</span> <span class="number">-0.448948</span>  <span class="number">2.228131</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.version.short_version</div><div class="line"><span class="string">'0.16.1'</span></div></pre></td></tr></table></figure><p><code>SettingWithCopyWarning</code>は、Dataframeのコピーへのおそらく無効な割り当てを通知することを目的としてる。必ずしもそれは君が間違ったやり方をしてるとは限らないよ(それはfalse positive、偽陽性かもしれないので）。でも、0.13.0以降のものではもっと良い方法がいっぱいある、って注意しようとしてるだけ。。なので、警告が表示された場合は、そのアドバイスに従って： <code>.loc[row_index、col_indexer] = value</code>を代わりに使ってみて</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1.loc[:,<span class="string">'f'</span>] = p.Series(np.random.randn(sLength), index=df1.index)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1</div><div class="line">          a         b         c         d         e         f</div><div class="line"><span class="number">6</span> <span class="number">-0.269221</span> <span class="number">-0.026476</span>  <span class="number">0.997517</span>  <span class="number">1.294385</span>  <span class="number">1.757167</span> <span class="number">-0.050927</span></div><div class="line"><span class="number">8</span>  <span class="number">0.917438</span>  <span class="number">0.847941</span>  <span class="number">0.034235</span> <span class="number">-0.448948</span>  <span class="number">2.228131</span>  <span class="number">0.006109</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p><strong>2017年　編集</strong><br>他の人も行ってるけど、現時点でベストな方法は<code>assign</code>を使うことみたい:</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">df1 = df1.assign(e=p.Series(np.random.randn(sLength)).values)</div></pre></td></tr></table></figure><p>実際、これは今のところより効率的な方法だよ。</p><p>　</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/308903/joaquin" target="_blank" rel="external">joaquin</a> | 回答日時： 2012年9月23日 19:24 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>これが、新しい列を追加する簡単な方法だよ！： <code>df [&#39;e&#39;] = e</code></p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1645853/kathirmani-sukumar" target="_blank" rel="external">Kathirmani Sukumar</a> | 回答日時： 2012年12月12日 16:04 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/12555323/adding-new-column-to-existing-dataframe-in-python-pandas" target="_blank" rel="external">Adding new column to existing DataFrame in Python pandas</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;date: 2017-10-30 22:00:01&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;datasci&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;dataframe&lt;br&gt;title: Python pandasで既存のDataFrameに新しい列を追加する [Python]&lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある：&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;          a         b         c         d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.671399&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.101208&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.181532&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.241273&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.446172&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.243316&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.051767&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1.577318&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.614758&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.075793&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.451460&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.012493&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;-0.335485&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;-1.166658&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;-0.385571&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dtype: float64&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt;、&lt;code&gt;append&lt;/code&gt;、 &lt;code&gt;merge&lt;/code&gt;のいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/1661173/tomasz74&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tomasz74&lt;/a&gt; | 質問日時： 2012年9月23日 19:00 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>どのようにJavaScriptの文字列のすべての出現を置き換えるには？ [Javascript]</title>
    <link href="https://so-matome.net/2017/10/30/how-to-replace-all-occurrences-of-a-string-in-javascript/"/>
    <id>https://so-matome.net/2017/10/30/how-to-replace-all-occurrences-of-a-string-in-javascript/</id>
    <published>2017-10-30T22:00:01.000Z</published>
    <updated>2017-10-30T22:00:01.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>この文字列があるとして：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="string">"Test abc test test abc test test test abc test test abc"</span></div></pre></td></tr></table></figure></p><p>以下をすると：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">str = str.replace(<span class="string">'abc'</span>, <span class="string">''</span>);</div></pre></td></tr></table></figure></p><p>上の文字列で最初の<code>abc</code>だけを取り除いているみたいだけど、どうやったら<strong>すべての</strong><code>abs</code>を置き換えることができる？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/49153/click-upvote" target="_blank" rel="external">Click Upvote</a> | 質問日時： 2009年7月17日 17:53 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>それをするには基本的に2つの方法があるよ。</p><p><strong>注意：</strong> 一般的に、built-inのプロトタイプをJavaScriptで拡張することは一般的に推奨されてないよ。僕は<code>String</code> built-inプロトタイプに対する仮想的な標準メソッドの実装例を見せるために、Stringプロトタイプの拡張例としてこれを書いてる。</p><hr><h3 id="正規表現ベースの実装"><a href="#正規表現ベースの実装" class="headerlink" title="正規表現ベースの実装"></a>正規表現ベースの実装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">search, replacement</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> target.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(search, <span class="string">'g'</span>), replacement);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Splitおよびjoinを用いた実装"><a href="#Splitおよびjoinを用いた実装" class="headerlink" title="Splitおよびjoinを用いた実装"></a>Splitおよびjoinを用いた実装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">search, replacement</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> target.split(search).join(replacement);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><hr><p>効率の面で正規表現がどのように裏で何をやってるか昔はあまり知らなかったから、僕はsplitとjoinを使った実装を（パフォーマンスを考慮せずに）よく使ってきた。今はどっちがどのぐらい効率がいいかを調べるたいと思った時だけ使うようにしてる。</p><p>僕のChromeのWindows 8マシンでは、正規表現ベースの実装が一番速かった。<strong>splitとjoinの実装ではそれより53％遅くなった</strong>。<br>この2つを実行している<a href="http://jsben.ch/#/LFfWA" target="_blank" rel="external"><strong>ベンチマーク</strong></a>を見てみて。</p><hr><p>注意すべきは、<code>search</code>が<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions＃Using_special_characters" target="_blank" rel="external">通常の特殊文字として予約されている特定の文字式</a>を含む場合、正規表現ベースの実装にはちょっと問題がある。この実装は、呼び出し側がそういう文字列をあらかじめエスケープするか、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/guide/Regular_Expressions＃Using_special_characters" target="_blank" rel="external">正規表現</a>(MDN)テーブル内の文字を含まない文字列だけを渡しますことを前提としてる。</p><p>MDNは、文字列をエスケープするための実装も提供してる。これも <code>RegExp.escape(str)</code>として標準化されてたらよかったけど、まあ、それは<br>実現してない：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeRegExp</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="string">"\\$&amp;"</span>); <span class="comment">// $&amp;はマッチした文字列全体を意味します</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>String.prototype.replaceAll</code>の実装の中で<code>escapeRegExp</code>を呼び出すこともできる。でも僕はこれがどのくらいパフォーマンスに影響するか分からない(英数字の文字列のようにエスケープが必要でない文字列に対してすらも）。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1359785/cory-gross" target="_blank" rel="external">Cory Gross</a> | 回答日時： 2013年7月12日 1:46 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">str = str.replace(<span class="regexp">/abc/g</span>, <span class="string">''</span>);</div></pre></td></tr></table></figure><p>それか</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> find = <span class="string">'abc'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(find, <span class="string">'g'</span>);</div><div class="line"></div><div class="line">str = str.replace(re, <span class="string">''</span>);</div></pre></td></tr></table></figure><p>さらに単純化すれば、</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceAll</span>(<span class="params">str, find, replace</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(find, <span class="string">'g'</span>), replace);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意：</strong> 正規表現には特別な(メタ)文字が含まれてる。だから、それらの文字をエスケープすること無しに<code>find</code>関数の引数を盲目的に渡してしまうのは危険だ。これは<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">Mozilla Developer Network</a>の<a href="https://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string-in-javascript" target="_blank" rel="external">正規表現に関するJavaScriptガイド</a>でカバーされてる。 そこでは次のユーティリティ関数が例示されてる：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeRegExp</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/([.*+?^=!:$&#123;&#125;()|\[\]\/\\])/g</span>, <span class="string">"\\$1"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>だから、<code>replaceAll()</code>関数を上記より安全にするために<code>escapeRegExp</code>もインクルードすると、以下のようになる：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceAll</span>(<span class="params">str, find, replace</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(escapeRegExp(find), <span class="string">'g'</span>), replace);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/21926/sean-bright" target="_blank" rel="external">Sean Bright</a> | 回答日時： 2009年7月17日 17:54 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string-in-javascript" target="_blank" rel="external">How to replace all occurrences of a string in JavaScript?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;この文字列があるとして：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Test abc test test abc test test test abc test test abc&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下をすると：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;str = str.replace(&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上の文字列で最初の&lt;code&gt;abc&lt;/code&gt;だけを取り除いているみたいだけど、どうやったら&lt;strong&gt;すべての&lt;/strong&gt;&lt;code&gt;abs&lt;/code&gt;を置き換えることができる？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/49153/click-upvote&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Click Upvote&lt;/a&gt; | 質問日時： 2009年7月17日 17:53 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="replace" scheme="https://so-matome.net/tags/replace/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptオブジェクトを正しくクローンするにはどうしたらいい？ [Javascript]</title>
    <link href="https://so-matome.net/2017/10/29/how-do-i-correctly-clone-a-javascript-object/"/>
    <id>https://so-matome.net/2017/10/29/how-do-i-correctly-clone-a-javascript-object/</id>
    <published>2017-10-29T22:00:01.000Z</published>
    <updated>2017-10-29T22:00:01.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>オブジェクト<code>x</code>があってそれをオブジェクト<code>y</code>としてコピーしたいんだけど（<code>y</code>への変更が<code>x</code>を変更しないように）。<br>built-inJavaScriptオブジェクトからコピーしたオブジェクトは不要なプロパティが余分に追加されてるのは知ってるんだけど。これは問題じゃないんだ。なぜって僕はリテラルとして構築されたオブジェクトの1つをコピーしているからです。</p><p>JavaScriptオブジェクトを正しくクローンするにはどうすればいいかな？</p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>jQueryを使用すると、<a href="http://api.jquery.com/jQuery.extend" target="_blank" rel="external">extend</a>で<strong>浅い(shallo)コピー</strong>ができる：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> copiedObject = jQuery.extend(&#123;&#125;, originalObject)</div></pre></td></tr></table></figure><p>copyObjectへのその後の変更はoriginalObjectに影響しない。逆もしかり。</p><p>それか<strong>ディープコピーを作成する</strong>には：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> copiedObject = jQuery.extend(<span class="literal">true</span>, &#123;&#125;, originalObject)</div></pre></td></tr></table></figure><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>オブジェクト内で関数を使用しない場合は、非常に簡単なワンライナーが使える：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> cloneOfA = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</div></pre></td></tr></table></figure><p>これは、オブジェクト、配列、文​​字列、ブーリアンと数字を含むどんな種類のオブジェクトに対しても動作する。</p><p>また、<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm" target="_blank" rel="external">ブラウザの構造化クローンアルゴリズムについてのこの記事</a>を参照。これはワーカーに、またはワーカーからメッセージを投稿するときに使われる。ディープクローニングの関数も含んでる。</p><hr><hr><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><p>ECMAScript 6には、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign</a>メソッドが使える。これは、列挙可能なすべてのプロパティの値をあるオブジェクトから別のオブジェクトにコピーする。例えば：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = &#123;<span class="attr">myProp</span>: <span class="string">"value"</span>&#125;;</div><div class="line"><span class="keyword">var</span> y = <span class="built_in">Object</span>.assign(&#123;&#125;, x);</div></pre></td></tr></table></figure><p>ただし、ネストされたオブジェクトは引き続き参照としてコピーされることに注意。</p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object" target="_blank" rel="external">How do I correctly clone a JavaScript object?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;オブジェクト&lt;code&gt;x&lt;/code&gt;があってそれをオブジェクト&lt;code&gt;y&lt;/code&gt;としてコピーしたいんだけど（&lt;code&gt;y&lt;/code&gt;への変更が&lt;code&gt;x&lt;/code&gt;を変更しないように）。&lt;br&gt;built-inJavaScriptオブジェクトからコピーしたオブジェクトは不要なプロパティが余分に追加されてるのは知ってるんだけど。これは問題じゃないんだ。なぜって僕はリテラルとして構築されたオブジェクトの1つをコピーしているからです。&lt;/p&gt;
&lt;p&gt;JavaScriptオブジェクトを正しくクローンするにはどうすればいいかな？&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Python pandasで既存のDataFrameに新しい列を追加する [Python]</title>
    <link href="https://so-matome.net/2017/10/29/adding-new-column-to-existing-dataframe-in-python-pandas/"/>
    <id>https://so-matome.net/2017/10/29/adding-new-column-to-existing-dataframe-in-python-pandas/</id>
    <published>2017-10-29T22:00:01.000Z</published>
    <updated>2017-10-29T22:00:01.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">          a         b         c         d</div><div class="line"><span class="number">2</span>  <span class="number">0.671399</span>  <span class="number">0.101208</span> <span class="number">-0.181532</span>  <span class="number">0.241273</span></div><div class="line"><span class="number">3</span>  <span class="number">0.446172</span> <span class="number">-0.243316</span>  <span class="number">0.051767</span>  <span class="number">1.577318</span></div><div class="line"><span class="number">5</span>  <span class="number">0.614758</span>  <span class="number">0.075793</span> <span class="number">-0.451460</span> <span class="number">-0.012493</span></div></pre></td></tr></table></figure><p>既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span>   <span class="number">-0.335485</span></div><div class="line"><span class="number">1</span>   <span class="number">-1.166658</span></div><div class="line"><span class="number">2</span>   <span class="number">-0.385571</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure><p><code>join</code>、<code>append</code>、 <code>merge</code>のいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1661173/tomasz74" target="_blank" rel="external">tomasz74</a> | 質問日時： 2012年9月23日 19:00 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>元のdf1のインデックスを使用してSeriesを作ればいいよ。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">df1[<span class="string">'e'</span>] = Series(np.random.randn(sLength), index=df1.index)</div></pre></td></tr></table></figure><hr><p><strong>2015年　編集</strong><br>ある人は、上のコードで <code>SettingWithCopyWarning</code>が出るっていってるけど、このコードは現在のパンダバージョン0.16.1でも完璧に動作してるよ。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sLength = len(df1[<span class="string">'a'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1</div><div class="line">          a         b         c         d</div><div class="line"><span class="number">6</span> <span class="number">-0.269221</span> <span class="number">-0.026476</span>  <span class="number">0.997517</span>  <span class="number">1.294385</span></div><div class="line"><span class="number">8</span>  <span class="number">0.917438</span>  <span class="number">0.847941</span>  <span class="number">0.034235</span> <span class="number">-0.448948</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1[<span class="string">'e'</span>] = p.Series(np.random.randn(sLength), index=df1.index)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1</div><div class="line">          a         b         c         d         e</div><div class="line"><span class="number">6</span> <span class="number">-0.269221</span> <span class="number">-0.026476</span>  <span class="number">0.997517</span>  <span class="number">1.294385</span>  <span class="number">1.757167</span></div><div class="line"><span class="number">8</span>  <span class="number">0.917438</span>  <span class="number">0.847941</span>  <span class="number">0.034235</span> <span class="number">-0.448948</span>  <span class="number">2.228131</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.version.short_version</div><div class="line"><span class="string">'0.16.1'</span></div></pre></td></tr></table></figure><p><code>SettingWithCopyWarning</code>は、Dataframeのコピーへのおそらく無効な割り当てを通知することを目的としてる。必ずしもそれは君が間違ったやり方をしてるとは限らないよ(それはfalse positive、偽陽性かもしれないので）。でも、0.13.0以降のものではもっと良い方法がいっぱいある、って注意しようとしてるだけ。。なので、警告が表示された場合は、そのアドバイスに従って： <code>.loc[row_index、col_indexer] = value</code>を代わりに使ってみて</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1.loc[:,<span class="string">'f'</span>] = p.Series(np.random.randn(sLength), index=df1.index)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df1</div><div class="line">          a         b         c         d         e         f</div><div class="line"><span class="number">6</span> <span class="number">-0.269221</span> <span class="number">-0.026476</span>  <span class="number">0.997517</span>  <span class="number">1.294385</span>  <span class="number">1.757167</span> <span class="number">-0.050927</span></div><div class="line"><span class="number">8</span>  <span class="number">0.917438</span>  <span class="number">0.847941</span>  <span class="number">0.034235</span> <span class="number">-0.448948</span>  <span class="number">2.228131</span>  <span class="number">0.006109</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p><strong>2017年　編集</strong><br>他の人も行ってるけど、現時点でベストな方法は<code>assign</code>を使うことみたい:</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">df1 = df1.assign(e=p.Series(np.random.randn(sLength)).values)</div></pre></td></tr></table></figure><p>実際、これは今のところより効率的な方法だよ。</p><p>　</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/308903/joaquin" target="_blank" rel="external">joaquin</a> | 回答日時： 2012年9月23日 19:24 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>これが、新しい列を追加する簡単な方法だよ！： <code>df [&#39;e&#39;] = e</code></p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1645853/kathirmani-sukumar" target="_blank" rel="external">Kathirmani Sukumar</a> | 回答日時： 2012年12月12日 16:04 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/12555323/adding-new-column-to-existing-dataframe-in-python-pandas" target="_blank" rel="external">Adding new column to existing DataFrame in Python pandas</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;          a         b         c         d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.671399&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.101208&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.181532&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.241273&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.446172&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.243316&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.051767&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1.577318&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.614758&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0.075793&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.451460&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-0.012493&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;-0.335485&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;-1.166658&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;-0.385571&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dtype: float64&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt;、&lt;code&gt;append&lt;/code&gt;、 &lt;code&gt;merge&lt;/code&gt;のいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/1661173/tomasz74&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tomasz74&lt;/a&gt; | 質問日時： 2012年9月23日 19:00 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="python" scheme="https://so-matome.net/tags/python/"/>
    
      <category term="dataframe" scheme="https://so-matome.net/tags/dataframe/"/>
    
      <category term="pandas" scheme="https://so-matome.net/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(13)　子供たちにコードを教えよう [Video]</title>
    <link href="https://so-matome.net/2017/10/27/ted-talks-programming-everyone-must-watch-13/"/>
    <id>https://so-matome.net/2017/10/27/ted-talks-programming-everyone-must-watch-13/</id>
    <published>2017-10-27T21:00:01.000Z</published>
    <updated>2017-10-27T21:00:01.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ミッチ・レズニック：子供たちにコードを教えよう"><a href="#ミッチ・レズニック：子供たちにコードを教えよう" class="headerlink" title="ミッチ・レズニック：子供たちにコードを教えよう"></a>ミッチ・レズニック：子供たちにコードを教えよう</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第13段は「ミッチ・レズニック：子供たちにコードを教えよう」。以下のように紹介されています：</p><blockquote><p>TEDx Talksは、TED Talksと同じレベルの品質管理をされていないため、しばしば軽視されますが、この動画はそうではありません。 Resnickは16分で、なぜ子供たちにコードを教えるべきか説明します。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/Ok6LbV6bqaE?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>It was a Saturday afternoon in May, and I suddenly realized that the next day was Mother&#39;s Day, and I hadn&#39;t gotten anything for my mom, so I started thinking about what should I get my mom for Mother&#39;s Day?<br><br>I thought, why don&#39;t I make her an interactive Mother&#39;s Day card using the Scratch software that I&#39;d been developing with my research group at the MIT Media Lab?<br><br>We developed it so that people could easily create their own interactive stories and games and animations, and then share their creations with one another.<br><br>So I thought, this would be an opportunity to use Scratch to make an interactive card for my mom.<br><br>Before making my own Mother&#39;s Day card, I thought I would take a look at the Scratch website.<br><br>So over the last several years, kids around the world ages 8 and up, have shared their projects, and I thought, I wonder if, of those three million projects, whether anyone else has thought to put up Mother&#39;s Day cards.<br><br>So in the search box I typed in &quot;Mother&#39;s Day,&quot; and I was surprised and delighted to see a list of dozens and dozens of Mother&#39;s Day cards that showed up on the Scratch website, many of them just in the past 24 hours by procrastinators just like myself.<br><br>So I started taking a look at them. (Music) I saw one of them that featured a kitten and her mom and wishing her mom a happy Mother&#39;s Day.<br><br>And the creator very considerately offered a replay for her mom.<br><br>Another one was an interactive project where, when you moved the mouse over the letters of &quot;Happy Mom Day,&quot; it reveals a special happy Mother&#39;s Day slogan.<br><br>(Music) In this one, the creator told a narrative about how she had Googled to find out when Mother&#39;s Day was happening.<br><br>(Typing) And then once she found out when Mother&#39;s Day was happening, she delivered a special Mother&#39;s Day greeting of how much she loved her mom.<br><br>So I really enjoyed looking at these projects and interacting with these projects.<br><br>In fact, I liked it so much that, instead of making my own project, I sent my mom links to about a dozen of these projects. (Laughter) And actually, she reacted exactly the way that I hoped that she would.<br><br>She wrote back to me and she said, &quot;I&#39;m so proud to have a son that created the software that allowed these kids to make Mother&#39;s Day cards for their mothers.&quot;<br><br>So my mom was happy, and that made me happy, but actually I was even happier for another reason.<br><br>I was happy because these kids were using Scratch just in the way that we had hoped that they would.<br><br>As they created their interactive Mother&#39;s Day cards, you could see that they were really becoming fluent with new technologies.<br><br>What do I mean by fluent?<br><br>I mean that they were able to start expressing themselves and to start expressing their ideas.<br><br>When you become fluent with language, it means you can write an entry in your journal or tell a joke to someone or write a letter to a friend.<br><br>And it&#39;s similar with new technologies.<br><br>By writing, be creating these interactive Mother&#39;s Day cards, these kids were showing that they were really fluent with new technologies.<br><br>Now maybe you won&#39;t be so surprised by this, because a lot of times people feel that young people today can do all sorts of things with technology.<br><br>I mean, all of us have heard young people referred to as &quot;digital natives.&quot;<br><br>But actually I&#39;m sort of skeptical about this term.<br><br>I&#39;m not so sure we should be thinking of young people as digital natives.<br><br>When you really look at it, how is it that young people spend most of their time using new technologies?<br><br>You often see them in situations like this, or like this, and there&#39;s no doubt that young people are very comfortable and familiar browsing and chatting and texting and gaming.<br><br>But that doesn&#39;t really make you fluent.<br><br>So young people today have lots of experience and lots of familiarity with interacting with new technologies, but a lot less so of creating with new technologies and expressing themselves with new technologies.<br><br>It&#39;s almost as if they can read but not write with new technologies.<br><br>And I&#39;m really interested in seeing, how can we help young people become fluent so they can write with new technologies?<br><br>And that really means that they need to be able to write their own computer programs, or code.<br><br>So, increasingly, people are starting to recognize the importance of learning to code.<br><br>You know, in recent years, there have been hundreds of new organizations and websites that are helping young people learn to code.<br><br>You look online, you&#39;ll see places like Codecademy and events like CoderDojo and sites like Girls Who Code, or Black Girls Code.<br><br>It seems that everybody is getting into the act.<br><br>You know, just at the beginning of this year, at the turn of the new year, New York City Mayor Michael Bloomberg made a New Year&#39;s resolution that he was going to learn to code in 2012.<br><br>A few months later, the country of Estonia decided that all of its first graders should learn to code.<br><br>And that triggered a debate in the U.K.<br><br>about whether all the children there should learn to code.<br><br>Now, for some of you, when you hear about this, it might seem sort of strange about everybody learning to code.<br><br>When many people think of coding, they think of it as something that only a very narrow sub-community of people are going to be doing, and they think of coding looking like this.<br><br>And in fact, if this is what coding is like, it will only be a narrow sub-community of people with special mathematical skills and technological background that can code.<br><br>But coding doesn&#39;t have to be like this.<br><br>Let me show you about what it&#39;s like to code in Scratch.<br><br>So in Scratch, to code, you just snap blocks together.<br><br>In this case, you take a move block, snap it into a stack, and the stacks of blocks control the behaviors of the different characters in your game or your story, in this case controlling the big fish.<br><br>After you&#39;ve created your program, you can click on &quot;share,&quot; and then share your project with other people, so that they can use the project and start working on the project as well.<br><br>So, of course, making a fish game isn&#39;t the only thing you can do with Scratch.<br><br>Of the millions of projects on the Scratch website, there&#39;s everything from animated stories to school science projects to anime soap operas to virtual construction kits to recreations of classic video games to political opinion polls to trigonometry tutorials to interactive artwork, and, yes, interactive Mother&#39;s Day cards.<br><br>So I think there&#39;s so many different ways that people can express themselves using this, to be able to take their ideas and share their ideas with the world.<br><br>And it doesn&#39;t just stay on the screen.<br><br>You can also code to interact with the physical world around you.<br><br>Here&#39;s an example from Hong Kong, where some kids made a game and then built their own physical interface device and had a light sensor, so the light sensor detects the hole in the board, so as they move the physical saw, the light sensor detects the hole and controls the virtual saw on the screen and saws down the tree.<br><br>We&#39;re going to continue to look at new ways of bringing together the physical world and the virtual world and connecting to the world around us.<br><br>This is an example from a new version of Scratch that we&#39;ll be releasing in the next few months, and we&#39;re looking again to be able to push you in new directions.<br><br>Here&#39;s an example.<br><br>It uses the webcam.<br><br>And as I move my hand, I can pop the balloons or I can move the bug.<br><br>So it&#39;s a little bit like Microsoft Kinect, where you interact with gestures in the world.<br><br>But instead of just playing someone else&#39;s game, you get to create the games, and if you see someone else&#39;s game, you can just say &quot;see inside,&quot; and you can look at the stacks of blocks that control it.<br><br>So there&#39;s a new block that says how much video motion there is, and then, if there&#39;s so much video motion, it will then tell the balloon to pop.<br><br>The same way that this uses the camera to get information into Scratch, you can also use the microphone.<br><br>Here&#39;s an example of a project using the microphone.<br><br>So I&#39;m going to let all of you control this game using your voices.<br><br>(Crickets chirping) (Shouts) (Chomping) (Laughter) (Applause) As kids are creating projects like this, they&#39;re learning to code, but even more importantly, they&#39;re coding to learn.<br><br>Because as they learn to code, it enables them to learn many other things, opens up many new opportunities for learning.<br><br>Again, it&#39;s useful to make an analogy to reading and writing.<br><br>When you learn to read and write, it opens up opportunities for you to learn so many other things.<br><br>When you learn to read, you can then read to learn.<br><br>And it&#39;s the same thing with coding.<br><br>If you learn to code, you can code to learn.<br><br>Now some of the things you can learn are sort of obvious.<br><br>You learn more about how computers work.<br><br>But that&#39;s just where it starts.<br><br>When you learn to code, it opens up for you to learn many other things.<br><br>Let me show you an example.<br><br>Here&#39;s another project, and I saw this when I was visiting one of the computer clubhouses.<br><br>These are after-school learning centers that we helped start that help young people from low-income communities learn to express themselves creatively with new technologies.<br><br>And when I went to one of the clubhouses a couple years ago, I saw a 13-year-old boy who was using our Scratch software to create a game somewhat like this one, and he was very happy with his game and proud of his game, but also he wanted to do more.<br><br>He wanted to keep score.<br><br>So this was a game where the big fish eats the little fish, but he wanted to keep score, so that each time the big fish eats the little fish, the score would go up and it would keep track, and he didn&#39;t know how to do that.<br><br>So I showed him.<br><br>In Scratch, you can create something called a variable.<br><br>I&#39;ll call it score.<br><br>And that creates some new blocks for you, and also creates a little scoreboard that keeps track of the score, so each time I click on &quot;change score,&quot; it increments the score.<br><br>So I showed this to the clubhouse member – let&#39;s call him Victor – and Victor, when he saw that this block would let him increment the score, he knew exactly what to do.<br><br>He took the block and he put it into the program exactly where the big fish eats the little fish.<br><br>So then, each time the big fish eats the little fish, he will increment the score, and the score will go up by one.<br><br>And it&#39;s in fact working.<br><br>And he saw this, and he was so excited, he reached his hand out to me, and he said, &quot;Thank you, thank you, thank you.&quot;<br><br>And what went through my mind was, how often is it that teachers are thanked by their students for teaching them variables? (Laughter) It doesn&#39;t happen in most classrooms, but that&#39;s because in most classrooms, when kids learn about variables, they don&#39;t know why they&#39;re learning it.<br><br>It&#39;s nothing that, really, they can make use of.<br><br>When you learn ideas like this in Scratch, you can learn it in a way that&#39;s really meaningful and motivating for you, that you can understand the reason for learning variables, and we see that kids learn it more deeply and learn it better.<br><br>Victor had, I&#39;m sure, been taught about variables in schools, but he really didn&#39;t – he wasn&#39;t paying attention.<br><br>Now he had a reason for learning variables.<br><br>So when you learn through coding, and coding to learn, you&#39;re learning it in a meaningful context, and that&#39;s the best way of learning things.<br><br>So as kids like Victor are creating projects like this, they&#39;re learning important concepts like variables, but that&#39;s just the start.<br><br>As Victor worked on this project and created the scripts, he was also learning about the process of design, how to start with the glimmer of an idea and turn it into a fully-fledged, functioning project like you see here.<br><br>So he was learning many different core principles of design, about how to experiment with new ideas, how to take complex ideas and break them down into simpler parts, how to collaborate with other people on your projects, about how to find and fix bugs when things go wrong, how to keep persistent and to persevere in the face of frustrations when things aren&#39;t working well.<br><br>Now those are important skills that aren&#39;t just relevant for coding.<br><br>They&#39;re relevant for all sorts of different activities.<br><br>Now, who knows if Victor is going to grow up and become a programmer or a professional computer scientist?<br><br>It&#39;s probably not so likely, but regardless of what he does, he&#39;ll be able to make use of these design skills that he learned.<br><br>Regardless of whether he grows up to be a marketing manager or a mechanic or a community organizer, that these ideas are useful for everybody.<br><br>Again, it&#39;s useful to think about this analogy with language.<br><br>When you become fluent with reading and writing, it&#39;s not something that you&#39;re doing just to become a professional writer.<br><br>Very few people become professional writers.<br><br>But it&#39;s useful for everybody to learn how to read and write.<br><br>Again, the same thing with coding.<br><br>Most people won&#39;t grow up to become professional computer scientists or programmers, but those skills of thinking creatively, reasoning systematically, working collaboratively – skills you develop when you code in Scratch – are things that people can use no matter what they&#39;re doing in their work lives.<br><br>And it&#39;s not just about your work life.<br><br>Coding can also enable you to express your ideas and feelings in your personal life.<br><br>Let me end with just one more example.<br><br>So this is an example that came from after I had sent the Mother&#39;s Day cards to my mom, she decided that she wanted to learn Scratch.<br><br>So she made this project for my birthday and sent me a happy birthday Scratch card.<br><br>Now this project is not going to win any prizes for design, and you can rest assured that my 83-year-old mom is not training to become a professional programmer or computer scientist.<br><br>But working on this project enabled her to make a connection to someone that she cares about and enabled her to keep on learning new things and continuing to practice her creativity and developing new ways of expressing herself.<br><br>So as we take a look and we see that Michael Bloomberg is learning to code, all of the children of Estonia learn to code, even my mom has learned to code, don&#39;t you think it&#39;s about time that you might be thinking about learning to code?<br><br>If you&#39;re interested in giving it a try, I&#39;d encourage you to go to the Scratch website.<br><br>It&#39;s scratch.mit.edu, and give a try at coding.<br><br>Thanks very much. (Applause)<br></div> ]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ミッチ・レズニック：子供たちにコードを教えよう&quot;&gt;&lt;a href=&quot;#ミッチ・レズニック：子供たちにコードを教えよう&quot; class=&quot;headerlink&quot; title=&quot;ミッチ・レズニック：子供たちにコードを教えよう&quot;&gt;&lt;/a&gt;ミッチ・レズニック：子供たちにコードを教えよう&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第13段は「ミッチ・レズニック：子供たちにコードを教えよう」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TEDx Talksは、TED Talksと同じレベルの品質管理をされていないため、しばしば軽視されますが、この動画はそうではありません。 Resnickは16分で、なぜ子供たちにコードを教えるべきか説明します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ok6LbV6bqaE?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>Javascriptの悪名高いループの問題？ [Javascript] [Closures]</title>
    <link href="https://so-matome.net/2017/10/26/javascript-infamous-loop-issue/"/>
    <id>https://so-matome.net/2017/10/26/javascript-infamous-loop-issue/</id>
    <published>2017-10-26T22:36:40.000Z</published>
    <updated>2017-10-28T02:51:44.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>次のコードスニペットがあるんだけど、</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLinks</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, link; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">        link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">        link.innerHTML = <span class="string">"Link "</span> + i;</div><div class="line">        link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(i);</div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(link);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上記のコードは、5つのリンクを生成して、現在のリンクIDを表示するために各リンクをアラートイベントでバインドするためのコード。<br>でも、動作しないんだ。クリックすると生成されたリンクはすべて「リンク5」になる。</p><p>でも、次のコードスニペットは僕の期待通りに機能する。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLinks</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, link; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">        link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">        link.innerHTML = <span class="string">"Link "</span> + i;</div><div class="line">        link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                alert(num);</div><div class="line">            &#125;;</div><div class="line">        &#125;(i);</div><div class="line">        <span class="built_in">document</span>.body.appendChild(link);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上記の2つのスニペットは<a href="https://stackoverflow.com/questions/1451009/javascript-infamous-loop-issue" target="_blank" rel="external">ここから拝借した</a>。著者の解説にあるように、<strong>closure</strong>は魔法のように見える。</p><p>でも、どのように動作し、どのように<strong>クロージャ</strong>が動作するかは、僕には理解不能。なぜ最初のものは動作しないの？誰かこの魔法の詳細な説明ってできる？</p><p>よろしくお願いします。。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/125633/zhu-tao" target="_blank" rel="external">Zhu Tao</a> | 質問日時： 2009年9月20日 13:21 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>最初の例の説明として、<a href="https://stackoverflow.com/questions/643542/doesnt-javascript-support-closures-with-local-variables/643664#643664" target="_blank" rel="external">僕の以前の回答</a>を引用してみる：</p><blockquote><p>JavaScriptのスコープはブロックレベルではなく、関数レベル。closureを作ることは、囲むスコープが、囲まれる関数のレキシカルな環境に追加されることを意味する。<br>ループが終了すると、関数レベル変数iの値は5になり、それは内部の関数が「見ている」ものだ。</p></blockquote><p>2番目の例では、反復ステップごとに、外部関数リテラルがそれ自身の有効範囲とローカル変数<code>num</code>を持つ新しい関数オブジェクトを評価して、その値は現在の値「i」に設定される。<code>num</code>は決して変更されないので、クロージャの生存期間にわたって定数として保たれる：関数オブジェクトが独立しているので、次の反復ステップでは古い値を上書きしない。</p><p>このアプローチは、リンクごとに2つの新しい関数オブジェクトを作成する必要があるので非効率だってことに注意。これは基本的に不要、なぜかというと情報ストレージとしてDOMノードを使用するとそれらは簡単に共有できるから。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">linkListener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLinks</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</div><div class="line">        <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">        link.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'Link '</span> + i));</div><div class="line">        link.i = i;</div><div class="line">        link.onclick = linkListener;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(link);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/48015/christoph" target="_blank" rel="external">Christoph</a> | 回答日時： 2009年9月20日 13:43 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>ここで簡単な説明を書いてみる：</p><p>ページにはそれぞれID野着いたdiv1、div2、div3、div4、div5の5つのdivがある。<br>jQueryではこうできる…</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">    $(<span class="string">"#div"</span> + i).click ( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert ($(<span class="keyword">this</span>).index()) &#125; )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>で、問題に対処していこう(ゆっくりと構築していく)…</p><h2 id="ステップ1"><a href="#ステップ1" class="headerlink" title="ステップ1"></a>ステップ1</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">    $(<span class="string">"#div"</span> + i).click (</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> クリックイベントを処理するための書き込み関数</span></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="ステップ2"><a href="#ステップ2" class="headerlink" title="ステップ2"></a>ステップ2</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">    $(<span class="string">"#div"</span> + i).click (</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">            <span class="comment">//関数の値は、関数が呼び出されたときに設定されてる！</span></div><div class="line">            <span class="comment">//これを理解すればもう安心(僕は2年かかった)！</span></div><div class="line">            <span class="comment">// clickイベントはハンドラとしての関数を期待しているので、それを返すｒ</span></div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert (num) &#125;</div><div class="line">        &#125;(i) <span class="comment">// ここで関数を呼び出し、iの中の値を渡す</span></div><div class="line"></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="簡単に理解できる別の方法"><a href="#簡単に理解できる別の方法" class="headerlink" title="簡単に理解できる別の方法"></a>簡単に理解できる別の方法</h2><p>もしこれがわかりにくければ、これなら簡単にわかるかも。やってることは同じ…</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">        $(<span class="string">"#div"</span> + i).click (</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert (num) &#125;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">    clickHandler(i);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>これは、関数変数の値は関数が呼び出されたときに設定される、ってことを覚えていれば分かりやすいはず(でも、これは上とまったく同じ思考プロセスを使ってる)。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1176661/daniel-lewis" target="_blank" rel="external">Daniel Lewis</a> | 回答日時： 2012年1月29日 16:27 </div><br></p><hr><hr><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><p>他の人は何が起こっているのかを説明したけど、ここでは別の解決法を提供してみる。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLinks</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, link; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">    link.innerHTML = <span class="string">"Link "</span> + i;</div><div class="line"></div><div class="line">    <span class="keyword">with</span> (&#123; <span class="attr">n</span>: i &#125;) &#123;</div><div class="line">      link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(n);</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(link);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本的には、貧乏人のためのletバインディング。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/65188/nlogax" target="_blank" rel="external">nlogax</a> | 回答日時： 2009年9月26日 21:38 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/1451009/javascript-infamous-loop-issue" target="_blank" rel="external">Javascript infamous Loop issue? [duplicate]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;次のコードスニペットがあるんだけど、&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addLinks&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, link; i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link.innerHTML = &lt;span class=&quot;string&quot;&gt;&quot;Link &quot;&lt;/span&gt; + i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            alert(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(link);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上記のコードは、5つのリンクを生成して、現在のリンクIDを表示するために各リンクをアラートイベントでバインドするためのコード。&lt;br&gt;でも、動作しないんだ。クリックすると生成されたリンクはすべて「リンク5」になる。&lt;/p&gt;
&lt;p&gt;でも、次のコードスニペットは僕の期待通りに機能する。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addLinks&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, link; i&amp;lt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link.innerHTML = &lt;span class=&quot;string&quot;&gt;&quot;Link &quot;&lt;/span&gt; + i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        link.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                alert(num);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(link);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上記の2つのスニペットは&lt;a href=&quot;https://stackoverflow.com/questions/1451009/javascript-infamous-loop-issue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ここから拝借した&lt;/a&gt;。著者の解説にあるように、&lt;strong&gt;closure&lt;/strong&gt;は魔法のように見える。&lt;/p&gt;
&lt;p&gt;でも、どのように動作し、どのように&lt;strong&gt;クロージャ&lt;/strong&gt;が動作するかは、僕には理解不能。なぜ最初のものは動作しないの？誰かこの魔法の詳細な説明ってできる？&lt;/p&gt;
&lt;p&gt;よろしくお願いします。。&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/125633/zhu-tao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zhu Tao&lt;/a&gt; | 質問日時： 2009年9月20日 13:21 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="closures" scheme="https://so-matome.net/tags/closures/"/>
    
  </entry>
  
  <entry>
    <title>データフレームを（inner, outer, left, rightで）結合（マージ）する方法は？ [R]</title>
    <link href="https://so-matome.net/2017/10/26/how-to-join-merge-data-frames-inner-outer-left-right/"/>
    <id>https://so-matome.net/2017/10/26/how-to-join-merge-data-frames-inner-outer-left-right/</id>
    <published>2017-10-26T22:36:39.000Z</published>
    <updated>2017-10-28T02:50:56.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>2つのデータフレームがあるとする：<br><figure class="highlight r"><table><tr><td class="code"><pre><div class="line">df1 = data.frame(CustomerId = c(<span class="number">1</span>:<span class="number">6</span>), Product = c(rep(<span class="string">"Toaster"</span>, <span class="number">3</span>), rep(<span class="string">"Radio"</span>, <span class="number">3</span>)))</div><div class="line">df2 = data.frame(CustomerId = c(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>), State = c(rep(<span class="string">"Alabama"</span>, <span class="number">2</span>), rep(<span class="string">"Ohio"</span>, <span class="number">1</span>)))</div><div class="line"></div><div class="line">df1</div><div class="line"><span class="comment">#  CustomerId Product</span></div><div class="line"><span class="comment">#           1 Toaster</span></div><div class="line"><span class="comment">#           2 Toaster</span></div><div class="line"><span class="comment">#           3 Toaster</span></div><div class="line"><span class="comment">#           4   Radio</span></div><div class="line"><span class="comment">#           5   Radio</span></div><div class="line"><span class="comment">#           6   Radio</span></div><div class="line"></div><div class="line">df2</div><div class="line"><span class="comment">#  CustomerId   State</span></div><div class="line"><span class="comment">#           2 Alabama</span></div><div class="line"><span class="comment">#           4 Alabama</span></div><div class="line"><span class="comment">#           6    Ohio</span></div></pre></td></tr></table></figure></p><p>どうやったらデータベース的、すなわち、<a href="http://en.wikipedia.org/wiki/Join_%28SQL%29" target="_blank" rel="external">SQLみたいなjoin</a>ができる？つまり、</p><ul><li><p><code>df1</code>と<code>df2</code>の<a href="http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join" target="_blank" rel="external">inner join</a>：<br>左側のテーブルが右側のテーブルに一致するキーがある行のみを返す。</p></li><li><p><code>df1</code>と<code>df2</code>の<a href="http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join" target="_blank" rel="external">外部結合</a>：<br>両方のテーブルのすべての行を返し、右側のテーブルの一致するキーがある左側のテーブルからレコードは結合する。</p></li><li><p><code>df1</code>と<code>df2</code>の<a href="http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join" target="_blank" rel="external">left outer join(または単にleft join)</a><br>左のテーブルからすべての行と、右側からマッチするキーが有るすべての行を返す</p></li><li><p><code>df1</code>と<code>df2</code>の<a href="http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join" target="_blank" rel="external">right outer join</a><br>右側のテーブルからすべての行を返し、さらに左側から一致するキーを持つ行の全てを返す<br>左のテーブル。</p></li></ul><p>おまけ：</p><p>どのやったらSQLっぽいのselect文を実行できる？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/23929/dan-goldstein" target="_blank" rel="external">Dan Goldstein</a> | 質問日時： 2009年8月19日 13:18 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p><code>merge</code>関数とそのパラメータを使うことでできるよ：</p><p><strong>Inner join</strong>: <code>merge(df1、df2)</code>で出来る。Rは自動的に共通の変数名でフレームに結合するから。でも、必要とするfieldをマッチしてるのを確認するために、<code>merge(df1、df2、by = CustomerId &quot;)</code>を使用したほうがいいかな。一致する変数が異なるデータフレームで異なる名前を持つ場合は、 <code>by.x</code>と<code>by.y</code>パラメータを使うこともできるよ。</p><p><strong>Outer join</strong>: <code>merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all = TRUE)</code></p><p><strong>Left outer</strong>: <code>merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.x = TRUE)</code></p><p><strong>Right outer</strong>: <code>merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.y = TRUE)</code></p><p><strong>Cross join</strong>: <code>merge(x = df1, y = df2, by = NULL)</code></p><p>でもほとんどの場合、マージしたい識別子を明示的に記述するほうが安全だろうね。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/143319/matt-parker" target="_blank" rel="external">Matt Parker</a> | 回答日時： 2009年8月19日 15:15 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>Gabor Grothendieckの <a href="http://cran.r-project.org/web/packages/sqldf/index.html" target="_blank" rel="external"><code>sqldf</code>パッケージ</a>をおすすめするよ。SQLでの操作みたいにできるから.</p><figure class="highlight r"><table><tr><td class="code"><pre><div class="line"><span class="keyword">library</span>(sqldf)</div><div class="line"></div><div class="line"><span class="comment">## inner join</span></div><div class="line">df3 &lt;- sqldf(<span class="string">"SELECT CustomerId, Product, State</span></div><div class="line"><span class="string">              FROM df1</span></div><div class="line"><span class="string">              JOIN df2 USING(CustomerID)"</span>)</div><div class="line"></div><div class="line"><span class="comment">## left join (substitute 'right' for right join)</span></div><div class="line">df4 &lt;- sqldf(<span class="string">"SELECT CustomerId, Product, State</span></div><div class="line"><span class="string">              FROM df1</span></div><div class="line"><span class="string">              LEFT JOIN df2 USING(CustomerID)"</span>)</div></pre></td></tr></table></figure><p>SQLの構文の方が、Rの同じ構文よりも簡単で自然だと思うから(でもこれは僕のRDBMSバイアスを反映してるだけかも)。</p><p>結合に関しては<a href="https://github.com/ggrothendieck/sqldf#example-4-join" target="_blank" rel="external">Gaborのsqldf<br>GitHub</a>を参照</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/2002705/medriscoll" target="_blank" rel="external">medriscoll</a> | 回答日時： 2009年8月20日 17:54 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/1299871/how-to-join-merge-data-frames-inner-outer-left-right" target="_blank" rel="external">How to join (merge) data frames (inner, outer, left, right)?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;2つのデータフレームがあるとする：&lt;br&gt;&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;df1 = data.frame(CustomerId = c(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;), Product = c(rep(&lt;span class=&quot;string&quot;&gt;&quot;Toaster&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), rep(&lt;span class=&quot;string&quot;&gt;&quot;Radio&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df2 = data.frame(CustomerId = c(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;), State = c(rep(&lt;span class=&quot;string&quot;&gt;&quot;Alabama&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), rep(&lt;span class=&quot;string&quot;&gt;&quot;Ohio&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  CustomerId Product&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           1 Toaster&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           2 Toaster&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           3 Toaster&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           4   Radio&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           5   Radio&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           6   Radio&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  CustomerId   State&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           2 Alabama&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           4 Alabama&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           6    Ohio&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;どうやったらデータベース的、すなわち、&lt;a href=&quot;http://en.wikipedia.org/wiki/Join_%28SQL%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLみたいなjoin&lt;/a&gt;ができる？つまり、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1&lt;/code&gt;と&lt;code&gt;df2&lt;/code&gt;の&lt;a href=&quot;http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inner join&lt;/a&gt;：&lt;br&gt;左側のテーブルが右側のテーブルに一致するキーがある行のみを返す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1&lt;/code&gt;と&lt;code&gt;df2&lt;/code&gt;の&lt;a href=&quot;http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;外部結合&lt;/a&gt;：&lt;br&gt;両方のテーブルのすべての行を返し、右側のテーブルの一致するキーがある左側のテーブルからレコードは結合する。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1&lt;/code&gt;と&lt;code&gt;df2&lt;/code&gt;の&lt;a href=&quot;http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;left outer join(または単にleft join)&lt;/a&gt;&lt;br&gt;左のテーブルからすべての行と、右側からマッチするキーが有るすべての行を返す&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;df1&lt;/code&gt;と&lt;code&gt;df2&lt;/code&gt;の&lt;a href=&quot;http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;right outer join&lt;/a&gt;&lt;br&gt;右側のテーブルからすべての行を返し、さらに左側から一致するキーを持つ行の全てを返す&lt;br&gt;左のテーブル。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;おまけ：&lt;/p&gt;
&lt;p&gt;どのやったらSQLっぽいのselect文を実行できる？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/23929/dan-goldstein&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dan Goldstein&lt;/a&gt; | 質問日時： 2009年8月19日 13:18 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="r" scheme="https://so-matome.net/tags/r/"/>
    
      <category term="dataframe" scheme="https://so-matome.net/tags/dataframe/"/>
    
      <category term="r-faq" scheme="https://so-matome.net/tags/r-faq/"/>
    
      <category term="join" scheme="https://so-matome.net/tags/join/"/>
    
      <category term="merge" scheme="https://so-matome.net/tags/merge/"/>
    
  </entry>
  
  <entry>
    <title>バージョニングは重要だ [Webコミック]</title>
    <link href="https://so-matome.net/2017/10/24/commic-2017-09-12-versioning-is-important/"/>
    <id>https://so-matome.net/2017/10/24/commic-2017-09-12-versioning-is-important/</id>
    <published>2017-10-24T21:00:01.000Z</published>
    <updated>2017-10-24T21:00:01.408Z</updated>
    
    <content type="html"><![CDATA[<p>毎週水曜日はIT企業で働く人達をネタにしたWebコミック、<a href="http://www.commitstrip.com/en/" target="_blank" rel="external">Commit Strip</a>を翻訳したものを紹介しています。<br>Webデベロッパーなら笑えるネタがたくさん（？）</p><p>今回のお題は「Versioning is important（バージョニングは重要だ）」です。</p><a id="more"></a><p><strong>１コマ目：</strong><br>「（ニヤニヤしながら）デザイナーバーション管理の方法って俺好きなんだよな～」<br>「ホント、俺もそうだよ」</p><p><strong>２コマ目：</strong><br>「そう、poster.psd、poster最終.psd、poster最終＿最後.psd、、、」<br>「それからposter最終＿最終最後.psd、poster最終＿最終最後＿サイゴ.psd」</p><img src="/2017/10/24/commic-2017-09-12-versioning-is-important/commic-2017-09-12-versioning-is-important.jpg" alt="commic-2017-09-12-versioning-is-important.jpg" title=""><p><strong>３コマ目：</strong><br>「ってことはバージョン管理システムなんて使ってないってことじゃないの？」「いつになったら誰がPSDファイルのためのバージョン管理システムとか発明するのかな～」<br>「うぅ、、、」</p><p><strong>４コマ目：</strong><br>「ちゃんとしたバージョン番号とちゃんとしたバージョンメッセージ、、、」<br>「そうしたらもうちょっとプロっぽくなるんじゃね？」<br>（手前のパソコンのコミット・ログ）<br>バグフィックス終了！<br>バグフィックス修正済み！<br>バグフィックス！<br>バグフィックス</p><hr><hr><p>Source: <a href="http://www.commitstrip.com/en/2017/09/12/versioning-is-important/" target="_blank" rel="external">Versioning is important</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毎週水曜日はIT企業で働く人達をネタにしたWebコミック、&lt;a href=&quot;http://www.commitstrip.com/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Commit Strip&lt;/a&gt;を翻訳したものを紹介しています。&lt;br&gt;Webデベロッパーなら笑えるネタがたくさん（？）&lt;/p&gt;
&lt;p&gt;今回のお題は「Versioning is important（バージョニングは重要だ）」です。&lt;/p&gt;
    
    </summary>
    
    
      <category term="comic" scheme="https://so-matome.net/tags/comic/"/>
    
  </entry>
  
  <entry>
    <title>昔話 [Webコミック]</title>
    <link href="https://so-matome.net/2017/10/24/commic-2017-05-02-telling-our-story/"/>
    <id>https://so-matome.net/2017/10/24/commic-2017-05-02-telling-our-story/</id>
    <published>2017-10-24T04:06:51.000Z</published>
    <updated>2017-10-24T04:06:51.711Z</updated>
    
    <content type="html"><![CDATA[<p><strong>１コマ目：</strong><br>「ねえ、叔父さん、僕ちょっと分からないことがあるんだけど、、、」<br>「何が分からないんだい？」</p><p><strong>２コマ目：</strong><br>「どうしてハードディスクはA:からじゃなくて、C:から始まるの？」<br>「ああ！」</p><img src="/2017/10/24/commic-2017-05-02-telling-our-story/commic-2017-05-02-telling-our-story.jpg" alt="commic-2017-05-02-telling-our-story.jpg" title=""><p><strong>３コマ目：</strong><br>「お前がそんな事を聞くなんて思っても見なかったなー！」<br>「よし、それじゃ初めから話をしてやろう」</p><p><strong>４コマ目：</strong><br>「むかぁ～し昔、あるところに、、、」</p><hr><hr><p>Source: <a href="http://www.commitstrip.com/en/2017/05/02/telling-our-story/" target="_blank" rel="external">Telling our story</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;１コマ目：&lt;/strong&gt;&lt;br&gt;「ねえ、叔父さん、僕ちょっと分からないことがあるんだけど、、、」&lt;br&gt;「何が分からないんだい？」&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;２コマ目：&lt;/strong&gt;&lt;br&gt;「どうしてハードディスクはA:からじゃなくて、C:から始
      
    
    </summary>
    
    
      <category term="comic" scheme="https://so-matome.net/tags/comic/"/>
    
  </entry>
  
  <entry>
    <title>ループ内のJavaScriptクロージャ - 簡単な実用的な例 [Javascript]</title>
    <link href="https://so-matome.net/2017/10/24/javascript-closure-inside-loops-simple-practical-example/"/>
    <id>https://so-matome.net/2017/10/24/javascript-closure-inside-loops-simple-practical-example/</id>
    <published>2017-10-24T04:06:51.000Z</published>
    <updated>2017-10-24T04:06:51.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;      <span class="comment">// 関数を３つ作る</span></div><div class="line">  funcs[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;          <span class="comment">// それらをfuncsに入れる</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"My value: "</span> + i); <span class="comment">// 各関数はその値を記録する</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</div><div class="line">  funcs[j]();                      <span class="comment">// 走らせる</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>でもこれは以下を出力してしまう：</p><blockquote><p>My value: 3<br>My value: 3<br>My value: 3</p></blockquote><p>でも僕が欲しいのは</p><blockquote><p>My value: 0<br>My value: 1<br>My value: 2</p></blockquote><hr><p>同じ問題は、関数の実行がイベントリスナーを使用することによって遅延してしまう時にも起こる：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> buttons = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buttons.length; i++) &#123;          <span class="comment">// let's create 3 functions</span></div><div class="line">  buttons[i].addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// as event listeners</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"My value: "</span> + i);                  <span class="comment">// each should log its value.</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p>この基本的な問題の解決策ってある？？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/9021/nickf" target="_blank" rel="external">nickf</a> | 質問日時： 2009年4月15日 6:06 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>えっと、問題は、それぞれの匿名の関数の中にある変数<code>i</code>が関数の外部にある同じ変数にバインドされてるってことだよ。</p><p>君がしたいのは、各関数内の変数を独立した変数にバインドすることだと思う。そうすれば関数の外で値が変わらない：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createfunc</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"My value: "</span> + i); &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    funcs[i] = createfunc(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</div><div class="line">    funcs[j]();                        <span class="comment">// 表示させてみる</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>JavaScriptにはブロックスコープがないので（関数スコープのみ）、新しい関数の中で関数の作成をラップすると、<br><code>&quot;i&quot;</code>は君が意図した通りになるように気をつけないといけない。</p><hr><p><strong> Update：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> someArray = [ <span class="comment">/* なんでもいい */</span> ];</div><div class="line"><span class="comment">// ...</span></div><div class="line">someArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arrayElement</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...この要素のコードコードコード</span></div><div class="line">  someAsynchronousFunction(arrayElement, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    arrayElement.doSomething();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>つまり、<code>.forEach</code>ループと一緒に使われたコールバック関数の各呼び出しが独自のクロージャになる。そのハンドラに渡されたパラメータは、その特定の反復ステップに固有の配列要素になってる。非同期コールバックで使用されている場合、それはその反復の他のステップで確立された他のコールバックどれとも衝突しない。</p><p>もしjQueryで作業している場合なら、<code>$ .each()</code>関数で同じようなことができるよ。</p><p><strong>Update 2：</strong> JavaScriptの最新バージョンであるECMAScript 6(ES6)は、多くのブラウザとバックエンドシステムで実装され始めてる。古いシステムで新しい機能を使用できるようにES6からES5に変換する<a href="http://babeljs.io/" target="_blank" rel="external">Babel</a>のようなトランスパイライザーとかももあります。</p><p>ES6では、<code>var</code>ベースの変数とは違うスコープを持つ新しい <code>let</code>と<code>const</code>キーワードが導入されてる。たとえば、 <code>let</code>ベースのインデックスを持つループでは、それぞれループを通る反復は新しい値「i」を持ち、各値はループの内側にスコープがあるので、君のコードは期待どおりに動作するはず。いろんなリソースがあると思うけど、僕は<a href="http://www.2ality.com/2015/02/es6-scoping.html" target="_blank" rel="external">2alityのブロックスコープに関する記事</a>の素晴らしいソースとしておすすめするよ。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    funcs[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"My value: "</span> + i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>でも注意すべきはIE9-IE11とEdge14以前のEdgeは、<code>let</code>をサポートしてるけど、上記の間違いをしてしまう(毎回新しい <code>i</code>を作成しないので、上で書いたどの関数も<code>var</code>を使用した場合と同様に「3」を出力する)。Edge 14では最終的にそれは解決してる。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/86463/harto" target="_blank" rel="external">harto</a> | 回答日時： 2009年4月15日 6:18 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>最初にループの外側で関数を作り、その結果をループ内でバインドさせる方がパフォーマンスがいいと思うよ。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'My value: '</span> + x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    funcs[i] = log.bind(<span class="keyword">this</span>, i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</div><div class="line">    funcs[j]();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1408717/aust" target="_blank" rel="external">Aust</a> | 回答日時： 2013年10月11日 16:41 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example/" target="_blank" rel="external">JavaScript closure inside loops – simple practical example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; funcs = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;      &lt;span class=&quot;comment&quot;&gt;// 関数を３つ作る&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  funcs[i] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;          &lt;span class=&quot;comment&quot;&gt;// それらをfuncsに入れる&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i); &lt;span class=&quot;comment&quot;&gt;// 各関数はその値を記録する&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; j++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  funcs[j]();                      &lt;span class=&quot;comment&quot;&gt;// 走らせる&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;でもこれは以下を出力してしまう：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My value: 3&lt;br&gt;My value: 3&lt;br&gt;My value: 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;でも僕が欲しいのは&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My value: 0&lt;br&gt;My value: 1&lt;br&gt;My value: 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;同じ問題は、関数の実行がイベントリスナーを使用することによって遅延してしまう時にも起こる：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buttons = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; buttons.length; i++) &amp;#123;          &lt;span class=&quot;comment&quot;&gt;// let&#39;s create 3 functions&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  buttons[i].addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// as event listeners&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;My value: &quot;&lt;/span&gt; + i);                  &lt;span class=&quot;comment&quot;&gt;// each should log its value.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;この基本的な問題の解決策ってある？？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/9021/nickf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nickf&lt;/a&gt; | 質問日時： 2009年4月15日 6:06 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="loops" scheme="https://so-matome.net/tags/loops/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="closures" scheme="https://so-matome.net/tags/closures/"/>
    
  </entry>
  
  <entry>
    <title>Pythonの@staticmethodと@classmethodの違いって何？ [Python]</title>
    <link href="https://so-matome.net/2017/10/24/what-is-the-difference-between-staticmethod-and-classmethod-in-python/"/>
    <id>https://so-matome.net/2017/10/24/what-is-the-difference-between-staticmethod-and-classmethod-in-python/</id>
    <published>2017-10-24T04:06:51.000Z</published>
    <updated>2017-10-24T04:06:51.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p><a href="http://docs.python.org/library/functions.html#staticmethod" target="_blank" rel="external"><code>@staticmethod</code></a>が付いてる関数と、<a href="http://docs.python.org/library/functions.html#classmethod" target="_blank" rel="external"><code>@classmethod</code></a>が付いてる関数の違いって何？</p><p><div style="text-align: right"> By  <a href="/users/4766/daryl-spitzer">Daryl Spitzer</a> | 質問日時： Sep 25 ‘08 at 21:01 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>たぶんコード例で見たほうがいいと思う：<code>foo</code>、<code>class_foo</code>と <code>static_foo</code>のコールのsignature(訳注：メソッド名、パラメータ、戻り値の型をあわせたもの)の違いに注意：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"を実行する foo(%s,%s)"</span>%(self,x)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"を実行する class_foo(%s,%s)"</span>%(cls,x)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"を実行する static_foo(%s)"</span>%x</div><div class="line"></div><div class="line">a=A()</div></pre></td></tr></table></figure><p>以下は、オブジェクトインスタンスがメソッドを呼び出す一般的な方法。オブジェクトインスタンス<code>a</code>は最初の引数として暗黙的に渡される。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a.foo(<span class="number">1</span>)</div><div class="line"><span class="comment">#  foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)を実行する</span></div></pre></td></tr></table></figure><hr><p><strong>classmethods</strong>では、オブジェクトインスタンスのクラスは、<code>self</code>じゃなく最初の引数として暗黙的に渡される。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a.class_foo(<span class="number">1</span>)</div><div class="line"><span class="comment"># class_foo(&lt;class '__main__.A'&gt;,1)を実行する</span></div></pre></td></tr></table></figure><p>クラスを使って <code>class_foo</code>を呼び出すこともできるよ。実際、何かをクラスメソッドとが定義した場合、たぶんそれはクラスインスタンスからじゃなくクラスから呼び出されると仮定して定義しているはずなので。<code>A.foo(1)</code>はTypeErrorだけど、 <code>A.class_foo(1)</code>はうまくいくよ：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">A.class_foo(<span class="number">1</span>)</div><div class="line"><span class="comment"># class_foo(&lt;class '__main__.A'&gt;,1)を実行する</span></div></pre></td></tr></table></figure><p>クラスメソッドとしてよく使われるのは、<a href="https://stackoverflow.com/a/1950927/190597" target="_blank" rel="external">継承可能な代替コンストラクタ</a>を作ること。</p><hr><p><strong>staticmethods</strong>では、 <code>self</code>(オブジェクトインスタンス)も<code>cls</code>(クラス)も暗黙のうちに第1引数として渡されない。インスタンスやクラスから呼び出すことができる点を除いて、通常の関数のように動作するよ。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a.static_foo(<span class="number">1</span>)</div><div class="line"><span class="comment"># static_foo(1)を実行する</span></div><div class="line"></div><div class="line">A.static_foo(<span class="string">'hi'</span>)</div><div class="line"><span class="comment"># static_foo(hi)を実行する</span></div></pre></td></tr></table></figure><p>staticmethodsはあるクラスとそのクラスへの論理接続を持つ関数をグループ化するために使用される。</p><hr><p><code>foo</code>は単なる関数だけど、<code>a.foo</code>を呼び出すと、関数自身は得ることができなくて、最初の引数としてバインドされたオブジェクトインスタンス <code>a</code>へ”部分的に適用された”関数が与えられる。<code>foo</code>は２つの引数があることを期待してるけど、<code>a.foo</code>は1つの引数しか期待していない。</p><p>ここで<code>a</code>は<code>foo</code>にバインドされてる。これは、以下のように「束縛」(bound)が意味してるものでもある：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(a.foo)</div><div class="line"><span class="comment"># &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;</span></div></pre></td></tr></table></figure><p><code>a.class_foo</code>では、<code>a</code>は <code>class_foo</code>に束縛されず、むしろクラス<code>A</code>は<code>class_foo</code>に束縛されてる。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(a.class_foo)</div><div class="line"><span class="comment"># &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;</span></div></pre></td></tr></table></figure><p>staticメソッドでは、例えそれがメソッドであっても <code>a.static_foo</code>は何も引数がバインドされていない「古き良き」関数を返してくれる。<code>static_foo</code>は1つ引数があるのをを期待してて、<code>a.static_foo</code>も1つの引数があるのを期待してる。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(a.static_foo)</div><div class="line"><span class="comment"># &lt;function static_foo at 0xb7d479cc&gt;</span></div></pre></td></tr></table></figure><p>そしてもちろん、代わりにクラス<code>A</code>で<code>static_foo</code>を呼び出すと同じことが起こる。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(A.static_foo)</div><div class="line"><span class="comment"># &lt;function static_foo at 0xb7d479cc&gt;</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="/users/190597/unutbu">unutbu</a> | 回答日時： Nov 3 ‘09 at 19:13 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python" target="_blank" rel="external">What is the difference between @staticmethod and @classmethod in Python?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://docs.python.org/library/functions.html#staticmethod&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;@staticmethod&lt;/code&gt;&lt;/a&gt;が付いてる関数と、&lt;a href=&quot;http://docs.python.org/library/functions.html#classmethod&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;@classmethod&lt;/code&gt;&lt;/a&gt;が付いてる関数の違いって何？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;/users/4766/daryl-spitzer&quot;&gt;Daryl Spitzer&lt;/a&gt; | 質問日時： Sep 25 ‘08 at 21:01 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="python" scheme="https://so-matome.net/tags/python/"/>
    
      <category term="oop" scheme="https://so-matome.net/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>プログラマーが見るべき20のTEDトーク(２)　 怠け者の達人の頭の中 [Video]</title>
    <link href="https://so-matome.net/2017/10/21/ted-talks-programming-everyone-must-watch-2/"/>
    <id>https://so-matome.net/2017/10/21/ted-talks-programming-everyone-must-watch-2/</id>
    <published>2017-10-21T08:00:00.000Z</published>
    <updated>2017-10-21T09:16:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tim-Urban-怠け者の達人の頭の中"><a href="#Tim-Urban-怠け者の達人の頭の中" class="headerlink" title="Tim Urban: 怠け者の達人の頭の中"></a>Tim Urban: 怠け者の達人の頭の中</h2><p><a href="http://www.makeuseof.com/tag/ted-talks-programming/" target="_blank" rel="external">MakeUseOf</a>より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。<br>第２段は「Tim Urban: 怠け者の達人の頭の中」。以下のように紹介されています：</p><blockquote><p>プログラマとして、あなたはいろんな事を先延ばししたいと思うでしょう。それも<strong>たくさん</strong>。<br>この14分間のTEDトークは、これと最悪の状況で苦労し、それを克服することができた人による話です。 彼は、彼の先延ばしにつながったパターンとその解決策を提示します。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/arj7oStGLkU?cc_load_policy=1&cc_lang_pref=ja" frameborder="0" allowfullscreen></iframe><p>動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：</p><a id="more"></a><div id="" style="overflow-y: scroll; height:400px;"><br>So in college, I was a government major, which means I had to write a lot of papers. Now, when a normal student writes a paper, they might spread the work out a little like this. So, you know –<br><br>(Laughter)<br><br>you get started maybe a little slowly, but you get enough done in the first week that, with some heavier days later on, everything gets done, things stay civil.<br><br>(Laughter)<br><br>And I would want to do that like that. That would be the plan. I would have it all ready to go, but then, actually, the paper would come along, and then I would kind of do this.<br><br>(Laughter)<br><br>And that would happen every single paper.<br><br>But then came my 90-page senior thesis, a paper you’re supposed to spend a year on. And I knew for a paper like that, my normal work flow was not an option. It was way too big a project. So I planned things out, and I decided I kind of had to go something like this. This is how the year would go. So I’d start off light, and I’d bump it up in the middle months, and then at the end, I would kick it up into high gear just like a little staircase. How hard could it be to walk up the stairs? No big deal, right?<br><br>But then, the funniest thing happened. Those first few months? They came and went, and I couldn’t quite do stuff. So we had an awesome new revised plan.<br><br>(Laughter)<br><br>And then –<br><br>(Laughter)<br><br>But then those middle months actually went by, and I didn’t really write words, and so we were here. And then two months turned into one month, which turned into two weeks. And one day I woke up with three days until the deadline, still not having written a word, and so I did the only thing I could: I wrote 90 pages over 72 hours, pulling not one but two all-nighters – humans are not supposed to pull two all-nighters – sprinted across campus, dove in slow motion, and got it in just at the deadline.<br><br>I thought that was the end of everything. But a week later I get a call, and it’s the school. And they say, “Is this Tim Urban?” And I say, “Yeah.” And they say, “We need to talk about your thesis.” And I say, “OK.” And they say, “It’s the best one we’ve ever seen.”<br><br>(Laughter)<br><br>(Applause)<br><br>That did not happen.<br><br>(Laughter)<br><br>It was a very, very bad thesis.<br><br>(Laughter)<br><br>I just wanted to enjoy that one moment when all of you thought, “This guy is amazing!”<br><br>(Laughter)<br><br>No, no, it was very, very bad. Anyway, today I’m a writer-blogger guy. I write the blog Wait But Why. And a couple of years ago, I decided to write about procrastination. My behavior has always perplexed the non-procrastinators around me, and I wanted to explain to the non-procrastinators of the world what goes on in the heads of procrastinators, and why we are the way we are. Now, I had a hypothesis that the brains of procrastinators were actually different than the brains of other people. And to test this, I found an MRI lab that actually let me scan both my brain and the brain of a proven non-procrastinator, so I could compare them. I actually brought them here to show you today. I want you to take a look carefully to see if you can notice a difference. I know that if you’re not a trained brain expert, it’s not that obvious, but just take a look, OK? So here’s the brain of a non-procrastinator.<br><br>(Laughter)<br><br>Now … here’s my brain.<br><br>(Laughter)<br><br>There is a difference. Both brains have a Rational Decision-Maker in them, but the procrastinator’s brain also has an Instant Gratification Monkey. Now, what does this mean for the procrastinator? Well, it means everything’s fine until this happens.<br><br>[This is a perfect time to get some work done.] [Nope!]<br><br>So the Rational Decision-Maker will make the rational decision to do something productive, but the Monkey doesn’t like that plan, so he actually takes the wheel, and he says, “Actually, let’s read the entire Wikipedia page of the Nancy Kerrigan/ Tonya Harding scandal, because I just remembered that that happened.<br><br>(Laughter)<br><br>Then –<br><br>(Laughter)<br><br>Then we’re going to go over to the fridge, to see if there’s anything new in there since 10 minutes ago. After that, we’re going to go on a YouTube spiral that starts with videos of Richard Feynman talking about magnets and ends much, much later with us watching interviews with Justin Bieber’s mom.<br><br>(Laughter)<br><br>“All of that’s going to take a while, so we’re not going to really have room on the schedule for any work today. Sorry!”<br><br>(Sigh)<br><br>Now, what is going on here? The Instant Gratification Monkey does not seem like a guy you want behind the wheel. He lives entirely in the present moment. He has no memory of the past, no knowledge of the future, and he only cares about two things: easy and fun.<br><br>Now, in the animal world, that works fine. If you’re a dog and you spend your whole life doing nothing other than easy and fun things, you’re a huge success!<br><br>(Laughter)<br><br>And to the Monkey, humans are just another animal species. You have to keep well-slept, well-fed and propagating into the next generation, which in tribal times might have worked OK. But, if you haven’t noticed, now we’re not in tribal times. We’re in an advanced civilization, and the Monkey does not know what that is. Which is why we have another guy in our brain, the Rational Decision-Maker, who gives us the ability to do things no other animal can do. We can visualize the future. We can see the big picture. We can make long-term plans. And he wants to take all of that into account. And he wants to just have us do whatever makes sense to be doing right now. Now, sometimes it makes sense to be doing things that are easy and fun, like when you’re having dinner or going to bed or enjoying well-earned leisure time. That’s why there’s an overlap. Sometimes they agree. But other times, it makes much more sense to be doing things that are harder and less pleasant, for the sake of the big picture. And that’s when we have a conflict. And for the procrastinator, that conflict tends to end a certain way every time, leaving him spending a lot of time in this orange zone, an easy and fun place that’s entirely out of the Makes Sense circle. I call it the Dark Playground.<br><br>(Laughter)<br><br>Now, the Dark Playground is a place that all of you procrastinators out there know very well. It’s where leisure activities happen at times when leisure activities are not supposed to be happening. The fun you have in the Dark Playground isn’t actually fun, because it’s completely unearned, and the air is filled with guilt, dread, anxiety, self-hatred – all of those good procrastinator feelings. And the question is, in this situation, with the Monkey behind the wheel, how does the procrastinator ever get himself over here to this blue zone, a less pleasant place, but where really important things happen?<br><br>Well, turns out the procrastinator has a guardian angel, someone who’s always looking down on him and watching over him in his darkest moments – someone called the Panic Monster.<br><br>(Laughter)<br><br>Now, the Panic Monster is dormant most of the time, but he suddenly wakes up anytime a deadline gets too close or there’s danger of public embarrassment, a career disaster or some other scary consequence. And importantly, he’s the only thing the Monkey is terrified of. Now, he became very relevant in my life pretty recently, because the people of TED reached out to me about six months ago and invited me to do a TED Talk.<br><br>(Laughter)<br><br>Now, of course, I said yes. It’s always been a dream of mine to have done a TED Talk in the past.<br><br>(Laughter)<br><br>(Applause) But in the middle of all this excitement, the Rational Decision-Maker seemed to have something else on his mind. He was saying, “Are we clear on what we just accepted? Do we get what’s going to be now happening one day in the future? We need to sit down and work on this right now.” And the Monkey said, “Totally agree, but let’s just open Google Earth and zoom in to the bottom of India, like 200 feet above the ground, and scroll up for two and a half hours til we get to the top of the country, so we can get a better feel for India.”<br><br>(Laughter)<br><br>So that’s what we did that day.<br><br>(Laughter)<br><br>As six months turned into four and then two and then one, the people of TED decided to release the speakers. And I opened up the website, and there was my face staring right back at me. And guess who woke up?<br><br>(Laughter)<br><br>So the Panic Monster starts losing his mind, and a few seconds later, the whole system’s in mayhem.<br><br>(Laughter)<br><br>And the Monkey – remember, he’s terrified of the Panic Monster – boom, he’s up the tree! And finally, finally, the Rational Decision-Maker can take the wheel and I can start working on the talk.<br><br>Now, the Panic Monster explains all kinds of pretty insane procrastinator behavior, like how someone like me could spend two weeks unable to start the opening sentence of a paper, and then miraculously find the unbelievable work ethic to stay up all night and write eight pages. And this entire situation, with the three characters – this is the procrastinator’s system. It’s not pretty, but in the end, it works. This is what I decided to write about on the blog a couple of years ago.<br><br>When I did, I was amazed by the response. Literally thousands of emails came in, from all different kinds of people from all over the world, doing all different kinds of things. These are people who were nurses, bankers, painters, engineers and lots and lots of PhD students.<br><br>(Laughter)<br><br>And they were all writing, saying the same thing: “I have this problem too.” But what struck me was the contrast between the light tone of the post and the heaviness of these emails. These people were writing with intense frustration about what procrastination had done to their lives, about what this Monkey had done to them. And I thought about this, and I said, well, if the procrastinator’s system works, then what’s going on? Why are all of these people in such a dark place?<br><br>Well, it turns out that there’s two kinds of procrastination. Everything I’ve talked about today, the examples I’ve given, they all have deadlines. And when there’s deadlines, the effects of procrastination are contained to the short term because the Panic Monster gets involved. But there’s a second kind of procrastination that happens in situations when there is no deadline. So if you wanted a career where you’re a self-starter – something in the arts, something entrepreneurial – there’s no deadlines on those things at first, because nothing’s happening, not until you’ve gone out and done the hard work to get momentum, get things going. There’s also all kinds of important things outside of your career that don’t involve any deadlines, like seeing your family or exercising and taking care of your health, working on your relationship or getting out of a relationship that isn’t working.<br><br>Now if the procrastinator’s only mechanism of doing these hard things is the Panic Monster, that’s a problem, because in all of these non-deadline situations, the Panic Monster doesn’t show up. He has nothing to wake up for, so the effects of procrastination, they’re not contained; they just extend outward forever. And it’s this long-term kind of procrastination that’s much less visible and much less talked about than the funnier, short-term deadline-based kind. It’s usually suffered quietly and privately. And it can be the source of a huge amount of long-term unhappiness, and regrets. And I thought, that’s why those people are emailing, and that’s why they’re in such a bad place. It’s not that they’re cramming for some project. It’s that long-term procrastination has made them feel like a spectator, at times, in their own lives. The frustration is not that they couldn’t achieve their dreams; it’s that they weren’t even able to start chasing them.<br><br>So I read these emails and I had a little bit of an epiphany – that I don’t think non-procrastinators exist. That’s right – I think all of you are procrastinators. Now, you might not all be a mess, like some of us,<br><br>(Laughter)<br><br>and some of you may have a healthy relationship with deadlines, but remember: the Monkey’s sneakiest trick is when the deadlines aren’t there.<br><br>Now, I want to show you one last thing. I call this a Life Calendar. That’s one box for every week of a 90-year life. That’s not that many boxes, especially since we’ve already used a bunch of those. So I think we need to all take a long, hard look at that calendar. We need to think about what we’re really procrastinating on, because everyone is procrastinating on something in life. We need to stay aware of the Instant Gratification Monkey. That’s a job for all of us. And because there’s not that many boxes on there, it’s a job that should probably start today.<br><br>Well, maybe not today, but …<br><br>(Laughter)<br><br>You know. Sometime soon.<br><br>Thank you.<br><br>(Applause)<br></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tim-Urban-怠け者の達人の頭の中&quot;&gt;&lt;a href=&quot;#Tim-Urban-怠け者の達人の頭の中&quot; class=&quot;headerlink&quot; title=&quot;Tim Urban: 怠け者の達人の頭の中&quot;&gt;&lt;/a&gt;Tim Urban: 怠け者の達人の頭の中&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.makeuseof.com/tag/ted-talks-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MakeUseOf&lt;/a&gt;より、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。&lt;br&gt;第２段は「Tim Urban: 怠け者の達人の頭の中」。以下のように紹介されています：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プログラマとして、あなたはいろんな事を先延ばししたいと思うでしょう。それも&lt;strong&gt;たくさん&lt;/strong&gt;。&lt;br&gt;この14分間のTEDトークは、これと最悪の状況で苦労し、それを克服することができた人による話です。 彼は、彼の先延ばしにつながったパターンとその解決策を提示します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/arj7oStGLkU?cc_load_policy=1&amp;cc_lang_pref=ja&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：&lt;/p&gt;
    
    </summary>
    
    
      <category term="video" scheme="https://so-matome.net/tags/video/"/>
    
      <category term="english" scheme="https://so-matome.net/tags/english/"/>
    
      <category term="TED" scheme="https://so-matome.net/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>どうしてdocument.writeは「Bad practice（悪い習慣）」って考えられてるの？ [Javascript]</title>
    <link href="https://so-matome.net/2017/10/20/why-is-document-write-considered-a-bad-practice/"/>
    <id>https://so-matome.net/2017/10/20/why-is-document-write-considered-a-bad-practice/</id>
    <published>2017-10-20T08:00:01.000Z</published>
    <updated>2017-10-21T09:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p><a href="https://developer.mozilla.org/en-US/docs/DOM/document.write" target="_blank" rel="external"><code>document.write</code></a>がbad practice(悪い習慣)とみなされてるのは知ってる。で、僕が望んでいるのはその理由を集めて、なぜ解析コードの実装に <code>document.write</code>を使用すべきじゃないのか第三者のベンダーに提出したいんだ。</p><p><code>document.write</code>を悪い習慣として主張するあなたの理由を教えて？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1965/flyswat" target="_blank" rel="external">FlySwat</a> | 質問日時： 2009年4月29日 15:18 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>深刻な問題をまず初めにいくつか：</p><ul><li>document.write(以後DW)はXHTMLでは動作しない</li><li>ページの読み込みが終了した後に実行されるDWは、ページを上書きしたり、新しいページを書き出したり、また動作しないこともある</li><li>DWはエンカウンターした場所で実行されます：つまり、あるノードポイントにインジェクトしたりはできない</li><li>DWは実質的にシリアル化されたテキストを書き出すので、コンセプト的にDOMが動作する方法じゃない。そしてバグを作成するのも簡単だ(.innerHTMLにも同じ問題がある)</li></ul><p>安全でDOMフレンドリーな操作は、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document" target="_blank" rel="external">DOM操作メソッド</a>を参照。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/13018/annakata" target="_blank" rel="external">annakata</a> | 回答日時： 2009年4月29日 15:36 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>実際に <code>document.write</code>自体は何も問題は無いよ。問題はそれを誤用するのは本当に簡単だって事。</p><p>Googleアナリティクスとかの分析コードを提供するベンダーに関して言えば、彼らは実際にそんな誤用を招くスニペット（コードの断片）を配布する元になってる。なぜなら：</p><p>  1.スクリプトを小さく保てる<br>  2.彼らは、すでに確立されているオンロードイベントをオーバーライドすることや、オンロードイベントを安全に追加するために必要な抽象化を心配する必要がない<br>  3.(<code>document.write</code>は)非常に互換性があります</p><p>ドキュメントがロードされた後でそれを使用しようとしない限り、僕は個人的には<code>document.write</code>は本質的に悪だとは思わないなあ。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/8815/peter-bailey" target="_blank" rel="external">Peter Bailey</a> | 回答日時： 2009年4月29日 15:26 </div><br></p><hr><hr><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><p><code>document.write</code>のもう一つの正当な使用は、HTML5 Boilerplate<br><a href="https://github.com/h5bp/html5-boilerplate/blob/master/src/index.html" target="_blank" rel="external">index.html</a><br>例。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;!-- GoogleのCDNのjQueryをプロトコル相対URLで取得。オフラインの場合はローカルにフォールバックする --&gt;</div><div class="line">&lt;script src=<span class="string">"//ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;<span class="built_in">window</span>.jQuery || <span class="built_in">document</span>.write(<span class="string">'&lt;script src="js/libs/jquery-1.6.3.min.js"&gt;&lt;\/script&gt;'</span>)&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>僕は、<a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="external">json2.js</a>JSON parse/stringify<br>polyfill(<a href="http://caniuse.com/#search=JSON" target="_blank" rel="external">IE7以下で必要</a>)でも同じようなテクニックを使ってるのを見たよ。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;<span class="built_in">window</span>.JSON || <span class="built_in">document</span>.write(<span class="string">'&lt;script src="json2.js"&gt;&lt;\/script&gt;'</span>)&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/22514/kevin-hakanson" target="_blank" rel="external">Kevin Hakanson</a> | 回答日時： 2011年9月8日 20:49 </div><br></p><hr><hr><h2 id="回答4"><a href="#回答4" class="headerlink" title="回答4:"></a>回答4:</h2><p><strong>利点：</strong></p><ul><li>外部(ホスト/ドメイン)のスクリプトからインラインコンテンツを埋め込む最も簡単な方法。</li><li>frameまたはiframe内のコンテンツ全体を上書きすることができる。最近のAjax技術が広く普及する前に(1998年〜2002年)、僕はこの技術をメニュー/ナビゲーション用に多用してたよ。</li></ul><p><strong>欠点：</strong></p><ul><li>これは、外部スクリプトがロードされるまでレンダリングエンジンをシリアライズするようにシリアル化します。内部スクリプトよりもはるかに時間がかかる。</li><li>通常、スクリプトがコンテンツ内に配置されるように使用されるけど、これはあんまり良い使い方じゃない。</li></ul><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/43906/tracker1" target="_blank" rel="external">Tracker1</a> | 回答日時： 2009年4月29日 16:19 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/802854/why-is-document-write-considered-a-bad-practice" target="_blank" rel="external">Why is document.write considered a “bad practice”?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/document.write&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;document.write&lt;/code&gt;&lt;/a&gt;がbad practice(悪い習慣)とみなされてるのは知ってる。で、僕が望んでいるのはその理由を集めて、なぜ解析コードの実装に &lt;code&gt;document.write&lt;/code&gt;を使用すべきじゃないのか第三者のベンダーに提出したいんだ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;document.write&lt;/code&gt;を悪い習慣として主張するあなたの理由を教えて？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/1965/flyswat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlySwat&lt;/a&gt; | 質問日時： 2009年4月29日 15:18 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>なぜ&quot;for ... in&quot;を使って配列の反復をするはダメなの？ [Javascript]</title>
    <link href="https://so-matome.net/2017/10/19/why-is-using-for-in-with-array-iteration-a-bad-idea/"/>
    <id>https://so-matome.net/2017/10/19/why-is-using-for-in-with-array-iteration-a-bad-idea/</id>
    <published>2017-10-19T08:00:02.000Z</published>
    <updated>2017-10-21T09:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>JavaScriptの配列で <code>for ... in</code>を使わないように言われたんだけど、何故なの？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/60102/lyricalssh" target="_blank" rel="external">lYriCAlsSH</a> | 質問日時： 2009年2月1日 9:46 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>その理由はこう。まずこんなコンストラクトを考えてみる：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = []; <span class="comment">//新しい空の配列を作成</span></div><div class="line">a[<span class="number">5</span>] = <span class="number">5</span>;   <span class="comment">//配列のサイズを変更する完全に合法なJavaScript</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">    <span class="comment">//誰もがわかってると思うけど、0から5までの数値インデックスをループする。</span></div><div class="line">    <span class="built_in">console</span>.log(a[i]);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* これは以下を出力するはず</span></div><div class="line"><span class="comment">   undefined</span></div><div class="line"><span class="comment">   undefined</span></div><div class="line"><span class="comment">   undefined</span></div><div class="line"><span class="comment">   undefined</span></div><div class="line"><span class="comment">   undefined</span></div><div class="line"><span class="comment">   5</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p>これはときどき他とは全く異なる場合がある：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line">a[<span class="number">5</span>] = <span class="number">5</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</div><div class="line">    <span class="comment">//明示的に設定されたインデックス "5"のみを表示し、0〜4を無視</span></div><div class="line">    <span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 以下が出力するはず</span></div><div class="line"><span class="comment">   5</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p><a href="http://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a>ライブラリは時々こんなことをして、作成する配列に影響を与えるのに注意：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// JavaScriptライブラリのどこかに...</span></div><div class="line"><span class="built_in">Array</span>.prototype.foo = <span class="number">1</span>;</div><div class="line"><span class="comment">//今、下のコードが何をするのか分からないと思う。</span></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a)&#123;</div><div class="line">    <span class="comment">// fooはすべての配列の一部で、</span></div><div class="line">    <span class="comment">//ここに 'x'の値として表示される。</span></div><div class="line">    <span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 以下が出力するはず:</span></div><div class="line"><span class="comment">   0</span></div><div class="line"><span class="comment">   1</span></div><div class="line"><span class="comment">   2</span></div><div class="line"><span class="comment">   3</span></div><div class="line"><span class="comment">   4</span></div><div class="line"><span class="comment">   foo</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/43089/triptych" target="_blank" rel="external">Triptych</a> | 回答日時： 2009年2月1日 10:08 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-a-bad-idea" target="_blank" rel="external">Why is using “for…in” with array iteration a bad idea?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;JavaScriptの配列で &lt;code&gt;for ... in&lt;/code&gt;を使わないように言われたんだけど、何故なの？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/60102/lyricalssh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lYriCAlsSH&lt;/a&gt; | 質問日時： 2009年2月1日 9:46 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="arrays" scheme="https://so-matome.net/tags/arrays/"/>
    
      <category term="for-loop" scheme="https://so-matome.net/tags/for-loop/"/>
    
  </entry>
  
  <entry>
    <title>Pandasのデータを標準化する方法 [Python]</title>
    <link href="https://so-matome.net/2017/10/18/normalize-data-in-pandas/"/>
    <id>https://so-matome.net/2017/10/18/normalize-data-in-pandas/</id>
    <published>2017-10-18T08:00:02.000Z</published>
    <updated>2017-10-21T09:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>Pandasのデータフレームがあるとする。このデータフレームの列ごとの平均を計算するのは簡単：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">df.apply(average)</div></pre></td></tr></table></figure><p>で、この列ごとの<code>max(col) - min (col)</code>を計算するのも簡単：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">df.apply(max) - df.apply(min)</div></pre></td></tr></table></figure></p><p>で、この列ごとの差を平均で割りたいんだけどどうやったらいいの？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/218900/jason" target="_blank" rel="external">jason</a> | 質問日時： 2012年9月21日 7:04 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In [92]: df</div><div class="line">Out[92]:</div><div class="line">           a         b          c         d</div><div class="line">A  -0.488816  0.863769   4.325608 -4.721202</div><div class="line">B -11.937097  2.993993 -12.916784 -1.086236</div><div class="line">C  -5.569493  4.672679  -2.168464 -9.315900</div><div class="line">D   8.892368  0.932785   4.535396  0.598124</div><div class="line"></div><div class="line">In [93]: df_norm = (df - df.mean()) / (df.max() - df.min())</div><div class="line"></div><div class="line">In [94]: df_norm</div><div class="line">Out[94]:</div><div class="line">          a         b         c         d</div><div class="line">A  0.085789 -0.394348  0.337016 -0.109935</div><div class="line">B -0.463830  0.164926 -0.650963  0.256714</div><div class="line">C -0.158129  0.605652 -0.035090 -0.573389</div><div class="line">D  0.536170 -0.376229  0.349037  0.426611</div><div class="line"></div><div class="line">In [95]: df_norm.mean()</div><div class="line">Out[95]:</div><div class="line">a   -2.081668e-17</div><div class="line">b    4.857226e-17</div><div class="line">c    1.734723e-17</div><div class="line">d   -1.040834e-17</div><div class="line"></div><div class="line">In [96]: df_norm.max() - df_norm.min()</div><div class="line">Out[96]:</div><div class="line">a    1</div><div class="line">b    1</div><div class="line">c    1</div><div class="line">d    1</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1548051/wouter-overmeire" target="_blank" rel="external">Wouter Overmeire</a> | 回答日時： 2012年9月21日 7:14 </div><br></p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p><code>sklearn</code>ライブラリ使ってもいいのであれば、<a href="https://web.archive.org/web/20160520170701/http://chrisalbon.com:80/python/pandas_normalize_column.html" target="_blank" rel="external">このブログの方法</a>がいいと思う：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div><div class="line"></div><div class="line">data = &#123;<span class="string">'score'</span>: [<span class="number">234</span>,<span class="number">24</span>,<span class="number">14</span>,<span class="number">27</span>,<span class="number">-74</span>,<span class="number">46</span>,<span class="number">73</span>,<span class="number">-18</span>,<span class="number">59</span>,<span class="number">160</span>]&#125;</div><div class="line">df = pd.DataFrame(data)</div><div class="line">df</div><div class="line"></div><div class="line">min_max_scaler = preprocessing.MinMaxScaler()</div><div class="line">np_scaled = min_max_scaler.fit_transform(df)</div><div class="line">df_normalized = pd.DataFrame(np_scaled)</div><div class="line">df_normalized</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/309830/davidshen84" target="_blank" rel="external">davidshen84</a> | 回答日時： 2016年5月13日 0:48 </div><br></p><hr><hr><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><p><code>apply</code>を使えばいいよ。よりキレイだと思う：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">np.random.seed(<span class="number">1</span>)</div><div class="line"></div><div class="line">df = pd.DataFrame(np.random.randn(<span class="number">4</span>,<span class="number">4</span>)* <span class="number">4</span> + <span class="number">3</span>)</div><div class="line"></div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span>  <span class="number">9.497381</span>  <span class="number">0.552974</span>  <span class="number">0.887313</span> <span class="number">-1.291874</span></div><div class="line"><span class="number">1</span>  <span class="number">6.461631</span> <span class="number">-6.206155</span>  <span class="number">9.979247</span> <span class="number">-0.044828</span></div><div class="line"><span class="number">2</span>  <span class="number">4.276156</span>  <span class="number">2.002518</span>  <span class="number">8.848432</span> <span class="number">-5.240563</span></div><div class="line"><span class="number">3</span>  <span class="number">1.710331</span>  <span class="number">1.463783</span>  <span class="number">7.535078</span> <span class="number">-1.399565</span></div><div class="line"></div><div class="line">df.apply(<span class="keyword">lambda</span> x: (x - np.mean(x)) / (np.max(x) - np.min(x)))</div><div class="line"></div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span>  <span class="number">0.515087</span>  <span class="number">0.133967</span> <span class="number">-0.651699</span>  <span class="number">0.135175</span></div><div class="line"><span class="number">1</span>  <span class="number">0.125241</span> <span class="number">-0.689446</span>  <span class="number">0.348301</span>  <span class="number">0.375188</span></div><div class="line"><span class="number">2</span> <span class="number">-0.155414</span>  <span class="number">0.310554</span>  <span class="number">0.223925</span> <span class="number">-0.624812</span></div><div class="line"><span class="number">3</span> <span class="number">-0.484913</span>  <span class="number">0.244924</span>  <span class="number">0.079473</span>  <span class="number">0.114448</span></div></pre></td></tr></table></figure><p>それか、適切な列を選択すると、<code>groupby</code>で上手くいくと思う：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">df[&apos;grp&apos;] = [&apos;A&apos;, &apos;A&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class="line"></div><div class="line">          0         1         2         3 grp</div><div class="line">0  9.497381  0.552974  0.887313 -1.291874   A</div><div class="line">1  6.461631 -6.206155  9.979247 -0.044828   A</div><div class="line">2  4.276156  2.002518  8.848432 -5.240563   B</div><div class="line">3  1.710331  1.463783  7.535078 -1.399565   B</div><div class="line"></div><div class="line">df.groupby([&apos;grp&apos;])[[0,1,2,3]].apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x)))</div><div class="line"></div><div class="line">     0    1    2    3</div><div class="line">0  0.5  0.5 -0.5 -0.5</div><div class="line">1 -0.5 -0.5  0.5  0.5</div><div class="line">2  0.5  0.5  0.5 -0.5</div><div class="line">3 -0.5 -0.5 -0.5  0.5</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/210945/naught101" target="_blank" rel="external">naught101</a> | 回答日時： 2015年10月21日 3:10 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/12525722/normalize-data-in-pandas" target="_blank" rel="external">Normalize data in pandas</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;Pandasのデータフレームがあるとする。このデータフレームの列ごとの平均を計算するのは簡単：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;df.apply(average)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;で、この列ごとの&lt;code&gt;max(col) - min (col)&lt;/code&gt;を計算するのも簡単：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;df.apply(max) - df.apply(min)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;で、この列ごとの差を平均で割りたいんだけどどうやったらいいの？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/218900/jason&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jason&lt;/a&gt; | 質問日時： 2012年9月21日 7:04 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="python" scheme="https://so-matome.net/tags/python/"/>
    
      <category term="pandas" scheme="https://so-matome.net/tags/pandas/"/>
    
      <category term="numpy" scheme="https://so-matome.net/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>Trapped (出られない) [Webコミック]</title>
    <link href="https://so-matome.net/2017/10/18/commic-2017-05-29-trapped/"/>
    <id>https://so-matome.net/2017/10/18/commic-2017-05-29-trapped/</id>
    <published>2017-10-18T08:00:01.000Z</published>
    <updated>2017-10-19T00:17:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>毎週水曜日はIT企業で働く人達をネタにしたWebコミック、<a href="http://www.commitstrip.com/en/" target="_blank" rel="external">Commit Strip</a>を翻訳したものを紹介しています。</p><p>今回のお題は「Trapped（出られない）」です。</p><p>&lt;%- post.permalink %&gt;</p><a id="more"></a><hr><hr><p><strong>１コマ目：</strong><br>「もう何日も出口を探してるのに。これって馬鹿げてるよ！」<br>「忘れな。もう俺達は出られないよ。」</p><p><strong>２コマ目：</strong><br>「でもさ、ここからずっと出られないなんて馬鹿げて、、、」「あっ！」</p><p><strong>３コマ目：</strong><br>「えええー、彼まで！」</p><p><strong>４コマ目：</strong><br>「すまん、お前らを助け出すつもりできたのに、でも上手く行かなかった、、、」<br>「えーっ！あんたが最後の希望だったのに！」</p><img src="/2017/10/18/commic-2017-05-29-trapped/commic-2017-05-29-trapped.jpg" alt="commic-2017-05-29-trapped.jpg" title=""><p><strong>５コマ目：</strong><br>「もうハード・リブートするしかないのかな、、、」<br>「落ち着いて！Vimから出る方法はあるはずだ。きっと俺達なら探し出せる、、、」</p><hr><hr><p>Source: <a href="http://www.commitstrip.com/en/2017/05/29/trapped/" target="_blank" rel="external">Trapped</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毎週水曜日はIT企業で働く人達をネタにしたWebコミック、&lt;a href=&quot;http://www.commitstrip.com/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Commit Strip&lt;/a&gt;を翻訳したものを紹介しています。&lt;/p&gt;
&lt;p&gt;今回のお題は「Trapped（出られない）」です。&lt;/p&gt;
&lt;p&gt;&amp;lt;%- post.permalink %&amp;gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="comic" scheme="https://so-matome.net/tags/comic/"/>
    
  </entry>
  
  <entry>
    <title>値を指定してリストから要素を削除する簡単な方法ってある？ [Python]</title>
    <link href="https://so-matome.net/2017/10/18/is-there-a-simple-way-to-delete-a-list-element-by-value/"/>
    <id>https://so-matome.net/2017/10/18/is-there-a-simple-way-to-delete-a-list-element-by-value/</id>
    <published>2017-10-18T08:00:01.000Z</published>
    <updated>2017-10-21T09:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">b=a.index(<span class="number">6</span>)</div><div class="line"><span class="keyword">del</span> a[b]</div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure><p>これは次みたいなエラーを吐く：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"D:\zjm_code\a.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    b=a.index(<span class="number">6</span>)</div><div class="line">ValueError: list.index(x): x <span class="keyword">not</span> <span class="keyword">in</span> list</div></pre></td></tr></table></figure><p>だからこうしたんだけど：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    b=a.index(<span class="number">6</span>)</div><div class="line">    <span class="keyword">del</span> a[b]</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure><p>でも、これをするもっと簡単な方法って無い？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/234322/zjm1126" target="_blank" rel="external">zjm1126</a> | 質問日時： 2010年5月8日 7:48 </div><br></p><a id="more"></a><h2 id="—–"><a href="#—–" class="headerlink" title="—–"></a>—–</h2><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>リスト内の最初に出てきた要素を削除するには、単に <code>list.remove</code>でいける：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="string">'b'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</div><div class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure></p><p>マッチする要素全部を削除しないことに注意。リストの内包表記を使う必要がある。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [x <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">if</span> x != <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>]</div></pre></td></tr></table></figure></p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/178560/johannes-charra" target="_blank" rel="external">Johannes Charra</a> | 回答日時： 2010年5月8日 7:56 </div><br></p><h2 id="—–-1"><a href="#—–-1" class="headerlink" title="—–"></a>—–</h2><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>普通Pythonは実行できない何かをするように指示すると、Exceptionを投げる。だから、下記のうちどっちかをやらないといけないよ：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> c <span class="keyword">in</span> a:</div><div class="line">    a.remove(c)</div></pre></td></tr></table></figure><p>または</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    a.remove(c)</div><div class="line"><span class="keyword">except</span> ValueError:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure><p>An Exception isn’t necessarily a bad thing as long as it’s one you’re expecting and handle properly.<br>例外は、それが君がしたいしているもので、かつ適切に処理されるなら必ずしも悪いことじゃないよ。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/3171/dave-webb" target="_blank" rel="external">Dave Webb</a> | 回答日時： 2010年5月8日 8:02 </div><br></p><h2 id="—–-2"><a href="#—–-2" class="headerlink" title="—–"></a>—–</h2><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="keyword">if</span> <span class="number">6</span> <span class="keyword">in</span> a:</div><div class="line">    a.remove(<span class="number">6</span>)</div></pre></td></tr></table></figure><p>でもこれだと、リストを6回検索する必要があるから、try-exceptだともっと早くなると思う</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    a.remove(<span class="number">6</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/213464/you" target="_blank" rel="external">YOU</a> | 回答日時： 2010年5月8日 7:57 </div><br></p><h2 id="—–-3"><a href="#—–-3" class="headerlink" title="—–"></a>—–</h2><h2 id="回答4"><a href="#回答4" class="headerlink" title="回答4:"></a>回答4:</h2><p>こういうリストがあるとする：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div></pre></td></tr></table></figure><p>マッチする全ての要素を取り出すには、pythonだとfilter関数を使用できるよ。例えばこんな感じ、</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a = list(filter(<span class="keyword">lambda</span> x: x!= <span class="number">2</span>, a))</div></pre></td></tr></table></figure><p>だから、<code>a!=2</code>であるような要素は全てキープされる。</p><p>１つだけ取り除くような場合は</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a.remove(<span class="number">2</span>)</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/3562332/mathwizurd" target="_blank" rel="external">mathwizurd</a> | 回答日時： 2014年8月11日 19:55 </div><br></p><h2 id="—–-4"><a href="#—–-4" class="headerlink" title="—–"></a>—–</h2><h2 id="回答5"><a href="#回答5" class="headerlink" title="回答5:"></a>回答5:</h2><p>新しいリストとかを使わずにインプレースでやる方法(内包表記無し)：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_all</span><span class="params">(seq, value)</span>:</span></div><div class="line">    pos = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</div><div class="line">        <span class="keyword">if</span> item != value:</div><div class="line">           seq[pos] = item</div><div class="line">           pos += <span class="number">1</span></div><div class="line">    <span class="keyword">del</span> seq[pos:]</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/4279/jfs" target="_blank" rel="external">jfs</a> | 回答日時： 2010年5月8日 14:57 </div><br></p><h2 id="—–-5"><a href="#—–-5" class="headerlink" title="—–"></a>—–</h2><p>Source: <a href="https://stackoverflow.com/questions/2793324/is-there-a-simple-way-to-delete-a-list-element-by-value" target="_blank" rel="external">Is there a simple way to delete a list element by value?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b=a.index(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; a[b]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; a&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これは次みたいなエラーを吐く：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;D:\zjm_code\a.py&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b=a.index(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ValueError: list.index(x): x &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;だからこうしたんだけど：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b=a.index(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; a[b]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; a&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;でも、これをするもっと簡単な方法って無い？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/234322/zjm1126&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zjm1126&lt;/a&gt; | 質問日時： 2010年5月8日 7:48 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="python" scheme="https://so-matome.net/tags/python/"/>
    
      <category term="list" scheme="https://so-matome.net/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>ダイナミックに作成された要素のイベントバインド [Javascript]</title>
    <link href="https://so-matome.net/2017/10/17/event-binding-on-dynamically-created-elements/"/>
    <id>https://so-matome.net/2017/10/17/event-binding-on-dynamically-created-elements/</id>
    <published>2017-10-17T08:00:02.000Z</published>
    <updated>2017-10-21T09:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>ページ上のすべての選択ボックスに対して<code>.hover</code>イベントをバインドして、オンマウスかどうかによってその幅を少し変えるようなコードが有るんだけど、これはページの準備ができた時点ではうまく動作してる。</p><p>で、問題なのは、AjaxまたはDOMを介して追加した選択ボックスだとイベントがバインドされない、ってことなんだ。</p><p>幸いこのプラグイン(<a href="http://brandonaaron.net/docs/livequery/#getting-started" target="_blank" rel="external">jQuery Live Queryプラグイン</a>)を見つけたんだけど、僕のページにプラグインを追加する前に、誰かjQueryを使うか、別の方法かでこの問題を解決する方法を知ってる人がいないかなって聞きたいと思ったんだ。誰かいいアイデア無い？？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/27580/eli" target="_blank" rel="external">Eli</a> | 質問日時： 2008年10月14日 23:25 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p><strong>jQuery 1.7以降</strong> <a href="https://api.jquery.com/on/#on-events-selector-data-handler" target="_blank" rel="external"><code>jQuery.fn.on</code></a>が使える</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(staticAncestors).on(eventName, dynamicChild, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure><hr><p>**これよりも推奨されるべきアプローチは<a href="http://api.jquery.com/live" target="_blank" rel="external"><code>live()</code></a>かな：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(selector).live( eventName, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; );</div></pre></td></tr></table></figure><p>でも、 <code>live()</code>は <code>on()</code>のせいでに1.7では廃止され、1.9で完全に除去された。<br><code>live()</code>はこう書けるけど：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(selector).live( eventName, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; );</div></pre></td></tr></table></figure><p>でも以下の<a href="http://api.jquery.com/on/" target="_blank" rel="external"><code>on()</code></a>に置き換えることができる。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on( eventName, selector, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; );</div></pre></td></tr></table></figure><hr><p>たとえば、あるページがクラス名<code>dosomething</code>を持つ要素を動的に作成していたとすると、、イベントはすでに存在する親にバインドされてる。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'mouseover mouseout'</span>, <span class="string">'.dosomething'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//マウスオーバーやマウスアウト時に何をしたいか</span></div><div class="line">    <span class="comment">// '.dosomething'と一致する要素で発生する</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>イベントがバインドされる時点で存在するすべての親でうまくいくよ。例えば</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$(<span class="string">'.buttons'</span>).on(<span class="string">'click'</span>, <span class="string">'button'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//ここで何かする</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>は以下に適用される</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"buttons"</span>&gt;</div><div class="line">    &lt;!-- &lt;button&gt;は動的に生成され、ここに追加される --&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>これは、ライブラリやプラグインを使用しない<strong>純粋なJavaScript </strong>での方法だよ。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hasClass(e.target, <span class="string">'bu'</span>)) &#123;</div><div class="line">          <span class="comment">// .buがクリックされた</span></div><div class="line">          <span class="comment">// 何かやる</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasClass(e.target, <span class="string">'test'</span>)) &#123;</div><div class="line">        <span class="comment">// .testがクリックされた</span></div><div class="line">        <span class="comment">// 何か他のことやる</span></div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure><p>ここで <code>hasClass</code>は</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">elem, className</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> elem.className.split(<span class="string">' '</span>).indexOf(className) &gt; <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong> <a href="http://jsfiddle.net/ramswaroop/Nrxp5/28/" target="_blank" rel="external">ライブデモ</a></strong></p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1385441/ram-patra" target="_blank" rel="external">Ram Patra</a> | 回答日時： 2014年12月9日 7:59 </div><br></p><hr><hr><h2 id="回答3"><a href="#回答3" class="headerlink" title="回答3:"></a>回答3:</h2><p>オブジェクトを作成するときにイベントを追加することができるよ。君が同じイベントを複数のオブジェクトに異なるタイミングで追加している場合なら、名前付き関数を作成するのがいいかも：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mouseOverHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 何かやる</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> mouseOutHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 何かやる</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//ドキュメントの読み込み時に、既存の要素に適用する</span></div><div class="line">    $(<span class="string">'select'</span>).hover(mouseOverHandler, mouseOutHandler);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">///この次の部分はAjax呼び出しのコールバックにある</span></div><div class="line">$(<span class="string">"&lt;select&gt;&lt;/select&gt;"</span>)</div><div class="line">    .append( <span class="comment">/* 君の&lt;option&gt;s */</span> )</div><div class="line">    .hover(mouseOverHandler, mouseOutHandler)</div><div class="line">    .appendTo( <span class="comment">/* 選択ボックスが必要な場合はどこでも*/</span> )</div><div class="line">;</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/9021/nickf" target="_blank" rel="external">nickf</a> | 回答日時： 2008年10月14日 23:31 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/203198/event-binding-on-dynamically-created-elements" target="_blank" rel="external">Event binding on dynamically created elements?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;ページ上のすべての選択ボックスに対して&lt;code&gt;.hover&lt;/code&gt;イベントをバインドして、オンマウスかどうかによってその幅を少し変えるようなコードが有るんだけど、これはページの準備ができた時点ではうまく動作してる。&lt;/p&gt;
&lt;p&gt;で、問題なのは、AjaxまたはDOMを介して追加した選択ボックスだとイベントがバインドされない、ってことなんだ。&lt;/p&gt;
&lt;p&gt;幸いこのプラグイン(&lt;a href=&quot;http://brandonaaron.net/docs/livequery/#getting-started&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery Live Queryプラグイン&lt;/a&gt;)を見つけたんだけど、僕のページにプラグインを追加する前に、誰かjQueryを使うか、別の方法かでこの問題を解決する方法を知ってる人がいないかなって聞きたいと思ったんだ。誰かいいアイデア無い？？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/27580/eli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eli&lt;/a&gt; | 質問日時： 2008年10月14日 23:25 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="jquery" scheme="https://so-matome.net/tags/jquery/"/>
    
      <category term="events" scheme="https://so-matome.net/tags/events/"/>
    
      <category term="unobtrusive-javascript" scheme="https://so-matome.net/tags/unobtrusive-javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptは参照渡しpass-by-value言語か値渡しpass-by-reference言語か [Javascript]</title>
    <link href="https://so-matome.net/2017/10/17/is-javascript-a-pass-by-reference-or-pass-by-value-language/"/>
    <id>https://so-matome.net/2017/10/17/is-javascript-a-pass-by-reference-or-pass-by-value-language/</id>
    <published>2017-10-17T08:00:01.000Z</published>
    <updated>2017-10-20T22:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>プリミティブ型(Number、Stringなど)は値によって渡されるけど、でもObjectは決まってない、なぜなら値渡し(オブジェクトを保持する変数が実際にはオブジェクトへの参照である場合)にも参照渡し(あるオブジェクトへの変数がそのオブジェクト自体を保持している時)の療法があるから。</p><p>あと、あんまり重要じゃないけど、引数を渡す慣習的なやり方の正しい方法ってある？あと、これに関するセマンティクスが何でべきか定義してるようなJavaScriptの仕様を抜粋したものとかって無いかな？？</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/3219/danail-nachev" target="_blank" rel="external">Danail Nachev</a> | 質問日時： 2009年2月5日 21:23 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>これはJavascriptで面白い問題だよね。こんな例を考えてみよう：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStuff</span>(<span class="params">a, b, c</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  a = a * <span class="number">10</span>;</div><div class="line">  b.item = <span class="string">"changed"</span>;</div><div class="line">  c = &#123;<span class="attr">item</span>: <span class="string">"changed"</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">item</span>: <span class="string">"unchanged"</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">item</span>: <span class="string">"unchanged"</span>&#125;;</div><div class="line"></div><div class="line">changeStuff(num, obj1, obj2);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="built_in">console</span>.log(obj1.item);</div><div class="line"><span class="built_in">console</span>.log(obj2.item);</div></pre></td></tr></table></figure><p>これは次のような出力をする：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="number">10</span></div><div class="line">changed</div><div class="line">unchanged</div></pre></td></tr></table></figure><p>もし純粋な値渡しでだった場合、 <code>obj1.item</code>を変更することは関数の外では<code>obj1</code>への影響は全く無い。<br>もし参照渡しだった場合、話が変わってくる。 <code>num</code>は<code>100</code>、 <code>obj2.item</code>は<code>changed</code>になる。</p><p>そうじゃなくて、考える状況は渡されたアイテムが値渡しであって、でも値渡しされるアイテムそれ自身は参照になってる状況だ。</p><p>技術的には、これは<a href="http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" target="_blank" rel="external">call-by-sharing</a>って呼ばれてる。</p><p>実際には、(<code>num</code>と<code>obj2</code>のように)パラメータ自体を変更した場合、それはパラメータに渡されるアイテム自身には影響を与えない。でも、(<code>obj1</code>のように)パラメータの<strong>内部</strong>を変更すると、その影響は（<code>obj1</code>に）伝わっていく。</p><hr><hr><h2 id="回答2"><a href="#回答2" class="headerlink" title="回答2:"></a>回答2:</h2><p>基本常に値渡しだけど、オブジェクトの場合は変数の値は参照になってる。だから、オブジェクトを渡してそのメンバーを変更すると、その変更は関数の外でも引き継がれる。<br>これは、参照渡し<em>のように見える</em>。でも、実際にオブジェクト変数の値を変更すると変化が引き継がれないことがわかるので、それが本当に値渡しであることの証明になってる。</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeObject</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  x = &#123;<span class="attr">member</span>:<span class="string">"bar"</span>&#125;;</div><div class="line">  alert(<span class="string">"in changeObject: "</span> + x.member);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeMember</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  x.member = <span class="string">"bar"</span>;</div><div class="line">  alert(<span class="string">"in changeMember: "</span> + x.member);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = &#123;<span class="attr">member</span>:<span class="string">"foo"</span>&#125;;</div><div class="line"></div><div class="line">alert(<span class="string">"before changeObject: "</span> + x.member);</div><div class="line">changeObject(x);</div><div class="line">alert(<span class="string">"after changeObject: "</span> + x.member); <span class="comment">/*変更は引き継がない */</span></div><div class="line"></div><div class="line">alert(<span class="string">"before changeMember: "</span> + x.member);</div><div class="line">changeMember(x);</div><div class="line">alert(<span class="string">"after changeMember: "</span> + x.member); <span class="comment">/* 変更は引き継ぐ */</span></div></pre></td></tr></table></figure><p>出力：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">before changeObject: foo</div><div class="line"><span class="keyword">in</span> changeObject: bar</div><div class="line">after changeObject: foo</div><div class="line"></div><div class="line">before changeMember: foo</div><div class="line"><span class="keyword">in</span> changeMember: bar</div><div class="line">after changeMember: bar</div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/254364/tim-goodman" target="_blank" rel="external">Tim Goodman</a> | 回答日時： 2011年3月15日 16:38 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language" target="_blank" rel="external">Is JavaScript a pass-by-reference or pass-by-value language?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;プリミティブ型(Number、Stringなど)は値によって渡されるけど、でもObjectは決まってない、なぜなら値渡し(オブジェクトを保持する変数が実際にはオブジェクトへの参照である場合)にも参照渡し(あるオブジェクトへの変数がそのオブジェクト自体を保持している時)の療法があるから。&lt;/p&gt;
&lt;p&gt;あと、あんまり重要じゃないけど、引数を渡す慣習的なやり方の正しい方法ってある？あと、これに関するセマンティクスが何でべきか定義してるようなJavaScriptの仕様を抜粋したものとかって無いかな？？&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/3219/danail-nachev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Danail Nachev&lt;/a&gt; | 質問日時： 2009年2月5日 21:23 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="webdev" scheme="https://so-matome.net/tags/webdev/"/>
    
      <category term="javascript" scheme="https://so-matome.net/tags/javascript/"/>
    
      <category term="pass-by-reference" scheme="https://so-matome.net/tags/pass-by-reference/"/>
    
      <category term="pass-by-value" scheme="https://so-matome.net/tags/pass-by-value/"/>
    
  </entry>
  
  <entry>
    <title>matplotlibのFigureの文字をパスじゃなく文字としてSVGに出力する方法 [Python]</title>
    <link href="https://so-matome.net/2017/10/17/output-matplotlib-figure-to-svg-with-text-as-text-not-curves/"/>
    <id>https://so-matome.net/2017/10/17/output-matplotlib-figure-to-svg-with-text-as-text-not-curves/</id>
    <published>2017-10-17T08:00:01.000Z</published>
    <updated>2017-10-21T09:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p><code>matplotlib.pyplot.savefig(&quot;test.svg&quot;, format=&quot;svg&quot;)</code>で文字を大量に含むSVGとしてFigureを作ると、SVGファイルが膨大になるんだけど、これって文字がSVG内でパスとして保存されるからだよね。<br>パスだとSVGの解釈も難しくなるし、文字がSVGの文字として出力したいんだけど、matplotlibでカーブじゃなく文字を文字として出力させる方法はってある？</p><p>SVGファイルではこんなコードになってる。</p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">" M9.8125 72.9062 L55.9062 72.9062 L55.9062 64.5938 L19.6719</span></span></div><div class="line"><span class="tag"><span class="string">64.5938 L19.6719 43.0156 L54.3906 43.0156 L54.3906 34.7188 L19.6719</span></span></div><div class="line"><span class="tag"><span class="string">34.7188 L19.6719 8.29688 L56.7812 8.29688 L56.7812 0 L9.8125 0 z "</span></span></div><div class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"DejaVuSans-45"</span> /&gt;</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/301166/bram" target="_blank" rel="external">Bram</a> | 質問日時： 2015年12月21日 1:43 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>Matplotlibs SVG文字レンダリングは、matplotlibrcかコード内でできるよ。<br><a href="http://matplotlib.org/users/customizing.html" target="_blank" rel="external">http://matplotlib.org/users/customizing.html</a>を参照：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#svg.fonttype : 'path'         # SVGフォントを扱う方法：</span></div><div class="line"><span class="comment">#    'none': SVGが表示されるマシンにフォントがインストールされていると仮定。</span></div><div class="line"><span class="comment">#    'path': 文字をパスとして埋め込む - ほとんどのSVGレンダラでサポートされている</span></div><div class="line"><span class="comment">#    'svgfont': 文字をSVGフォントとして埋め込む -  Chrome、オペラとサファリでサポートされてる</span></div></pre></td></tr></table></figure><p>これを使えば、フォントの埋め込みも文字をパスとしてレンダリングするのも両方できるよ：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.rcParams[<span class="string">'svg.fonttype'</span>] = <span class="string">'none'</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/3787580/zliw" target="_blank" rel="external">zliw</a> | 回答日時： 2016年3月1日 22:18 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/34387893/output-matplotlib-figure-to-svg-with-text-as-text-not-curves" target="_blank" rel="external">Output matplotlib figure to SVG with text as text, not curves</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;matplotlib.pyplot.savefig(&amp;quot;test.svg&amp;quot;, format=&amp;quot;svg&amp;quot;)&lt;/code&gt;で文字を大量に含むSVGとしてFigureを作ると、SVGファイルが膨大になるんだけど、これって文字がSVG内でパスとして保存されるからだよね。&lt;br&gt;パスだとSVGの解釈も難しくなるし、文字がSVGの文字として出力したいんだけど、matplotlibでカーブじゃなく文字を文字として出力させる方法はってある？&lt;/p&gt;
&lt;p&gt;SVGファイルではこんなコードになってる。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot; M9.8125 72.9062 L55.9062 72.9062 L55.9062 64.5938 L19.6719&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;64.5938 L19.6719 43.0156 L54.3906 43.0156 L54.3906 34.7188 L19.6719&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;34.7188 L19.6719 8.29688 L56.7812 8.29688 L56.7812 0 L9.8125 0 z &quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;DejaVuSans-45&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/301166/bram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bram&lt;/a&gt; | 質問日時： 2015年12月21日 1:43 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="datasci" scheme="https://so-matome.net/tags/datasci/"/>
    
      <category term="python" scheme="https://so-matome.net/tags/python/"/>
    
      <category term="svg" scheme="https://so-matome.net/tags/svg/"/>
    
      <category term="matplotlib" scheme="https://so-matome.net/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Pandasでgrepのような機能 [Python]</title>
    <link href="https://so-matome.net/2017/10/16/pandas-grep-like-function/"/>
    <id>https://so-matome.net/2017/10/16/pandas-grep-like-function/</id>
    <published>2017-10-16T08:00:01.000Z</published>
    <updated>2017-10-16T08:00:01.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="質問："><a href="#質問：" class="headerlink" title="質問："></a>質問：</h2><p>Pandasのbuilt-in関数で、ある文字列や値を含む行を削除するような、grepみたいな関数ってある？<br>よろしくお願いします。</p><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1289107/fred" target="_blank" rel="external">fred</a> | 質問日時： 2012年9月27日 16:10 </div><br></p><a id="more"></a><hr><hr><h2 id="回答1"><a href="#回答1" class="headerlink" title="回答1:"></a>回答1:</h2><p>df[‘column_label].strを見てみて。以下の例は、列Aに’a’という文字、列Bに20を持つようなすべての行を削除するよ。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">In [<span class="number">46</span>]: df</div><div class="line">Out[<span class="number">46</span>]:</div><div class="line">     A   B</div><div class="line"><span class="number">0</span>  foo  <span class="number">10</span></div><div class="line"><span class="number">1</span>  bar  <span class="number">20</span></div><div class="line"><span class="number">2</span>  baz  <span class="number">30</span></div><div class="line"></div><div class="line">In [<span class="number">47</span>]: cond = df[<span class="string">'A'</span>].str.contains(<span class="string">'a'</span>) &amp;amp; (df[<span class="string">'B'</span>] == <span class="number">20</span>)</div><div class="line"></div><div class="line">In [<span class="number">48</span>]: df.drop(df[cond].index.values)</div><div class="line">Out[<span class="number">48</span>]:</div><div class="line">     A   B</div><div class="line"><span class="number">0</span>  foo  <span class="number">10</span></div><div class="line"><span class="number">2</span>  baz  <span class="number">30</span></div></pre></td></tr></table></figure><p><div style="text-align: right"> By  <a href="https://stackoverflow.com/users/1548051/wouter-overmeire" target="_blank" rel="external">Wouter Overmeire</a> | 回答日時： 2012年9月27日 18:03 </div><br></p><hr><hr><p>Source: <a href="https://stackoverflow.com/questions/12625650/pandas-grep-like-function" target="_blank" rel="external">Pandas: grep like function</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;質問：&quot;&gt;&lt;a href=&quot;#質問：&quot; class=&quot;headerlink&quot; title=&quot;質問：&quot;&gt;&lt;/a&gt;質問：&lt;/h2&gt;&lt;p&gt;Pandasのbuilt-in関数で、ある文字列や値を含む行を削除するような、grepみたいな関数ってある？&lt;br&gt;よろしくお願いします。&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: right&quot;&gt; By  &lt;a href=&quot;https://stackoverflow.com/users/1289107/fred&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fred&lt;/a&gt; | 質問日時： 2012年9月27日 16:10 &lt;/div&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="pandas" scheme="https://so-matome.net/tags/pandas/"/>
    
      <category term="grep" scheme="https://so-matome.net/tags/grep/"/>
    
      <category term="row" scheme="https://so-matome.net/tags/row/"/>
    
  </entry>
  
</feed>
