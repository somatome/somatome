{"meta":{"title":"Stack Overflow まとめ","subtitle":null,"description":null,"author":"John Doe","url":"https://so-matome.net"},"pages":[],"posts":[{"title":"プログラマーが見るべき20のTEDトーク(14)　子供たちにコンピュータを教えるための楽しい方法 [Video]","slug":"ted-talks-programming-everyone-must-watch-14","date":"2018-02-23T22:00:02.000Z","updated":"2018-02-23T22:00:02.073Z","comments":true,"path":"2018/02/23/ted-talks-programming-everyone-must-watch-14/","link":"","permalink":"https://so-matome.net2018/02/23/ted-talks-programming-everyone-must-watch-14/","excerpt":"リンダ・リウカス：子供たちにコンピュータを教えるための楽しい方法MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第14段は「リンダ・リウカス：子供たちにコンピュータを教えるための楽しい方法」。以下のように紹介されています：Here’s another TEDx Talk, only 11 minutes long, but inspiring in just how optimistic and forward-thinking it is. “It isn’t magic and it isn’t complicated,” Liukas says about computers and programming. Her aim is to find ways to teach this to kids in an inviting way. Here’s what she’s learned.\n\nこのTEDx Talkはわずか11分ですが、楽観的でfoward-thinkingであり、インスパイアされます。 Liukas氏は、コンピュータについて「これは魔法じゃないよ、難しくない。」と言います。彼女の目的は、これを子供たちに魅力的な方法で教える方法を見つけることです。ここに彼女が学んだことがあります。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"リンダ・リウカス：子供たちにコンピュータを教えるための楽しい方法MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第14段は「リンダ・リウカス：子供たちにコンピュータを教えるための楽しい方法」。以下のように紹介されています：Here’s another TEDx Talk, only 11 minutes long, but inspiring in just how optimistic and forward-thinking it is. “It isn’t magic and it isn’t complicated,” Liukas says about computers and programming. Her aim is to find ways to teach this to kids in an inviting way. Here’s what she’s learned. このTEDx Talkはわずか11分ですが、楽観的でfoward-thinkingであり、インスパイアされます。 Liukas氏は、コンピュータについて「これは魔法じゃないよ、難しくない。」と言います。彼女の目的は、これを子供たちに魅力的な方法で教える方法を見つけることです。ここに彼女が学んだことがあります。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： Code is the next universal language. In the seventies, it was punk music that drove the whole generation. In the eighties, it was probably money. But for my generation of people, software is the interface to our imagination and our world. And that means that we need a radically, radically more diverse set of people to build those products, to not see computers as mechanical and lonely and boring and magic, to see them as things that they can tinker and turn around and twist, and so forth.My personal journey into the world of programming and technology started at the tender age of 14. I had this mad teenage crush on an older man, and the older man in question just happened to be the then Vice President of the United States, Mr. Al Gore. And I did what every single teenage girl would want to do. I wanted to somehow express all of this love, so I built him a website, it’s over here. And in 2001, there was no Tumblr, there was no Facebook, there was no Pinterest. So I needed to learn to code in order to express all of this longing and loving.And that is how programming started for me. It started as a means of self-expression. Just like when I was smaller, I would use crayons and legos. And when I was older, I would use guitar lessons and theater plays. But then, there were other things to get excited about, like poetry and knitting socks and conjugating French irregular verbs and coming up with make-believe worlds and Bertrand Russell and his philosophy. And I started to be one of those people who felt that computers are boring and technical and lonely.Here’s what I think today. Little girls don’t know that they are not supposed to like computers. Little girls are amazing. They are really, really good at concentrating on things and being exact and they ask amazing questions like, “What?” and “Why?” and “How?” and “What if?” And they don’t know that they are not supposed to like computers. It’s the parents who do. It’s us parents who feel like computer science is this esoteric, weird science discipline that only belongs to the mystery makers. That it’s almost as far removed from everyday life as, say, nuclear physics.And they are partly right about that. There’s a lot of syntax and controls and data structures and algorithms and practices, protocols and paradigms in programming. And we as a community, we’ve made computers smaller and smaller. We’ve built layers and layers of abstraction on top of each other between the man and the machine to the point that we no longer have any idea how computers work or how to talk to them. And we do teach our kids how the human body works, we teach them how the combustion engine functions and we even tell them that if you want to really be an astronaut you can become one. But when the kid comes to us and asks, “So, what is a bubble sort algorithm?” Or, “How does the computer know what happens when I press ‘play,’ how does it know which video to show?” Or, “Linda, is Internet a place?” We adults, we grow oddly silent. “It’s magic,” some of us say. “It’s too complicated,” the others say.Well, it’s neither. It’s not magic and it’s not complicated. It all just happened really, really, really fast. Computer scientists built these amazing, beautiful machines, but they made them very, very foreign to us, and also the language we speak to the computers so that we don’t know how to speak to the computers anymore without our fancy user interfaces.And that’s why no one recognized that when I was conjugating French irregular verbs, I was actually practicing my pattern recognition skills. And when I was excited about knitting, I actually was following a sequence of symbolic commands that included loops inside of them. And that Bertrand Russell’s lifelong quest to find an exact language between English and mathematics found its home inside of a computer. I was a programmer, but no one knew it.The kids of today, they tap, swipe and pinch their way through the world. But unless we give them tools to build with computers, we are raising only consumers instead of creators.This whole quest led me to this little girl. Her name is Ruby, she is six years old. She is completely fearless, imaginative and a little bit bossy. And every time I would run into a problem in trying to teach myself programming like, “What is object-oriented design or what is garbage collection?”, I would try to imagine how a six-year-old little girl would explain the problem.And I wrote a book about her and I illustrated it and the things Ruby taught me go like this. Ruby taught me that you’re not supposed to be afraid of the bugs under your bed. And even the biggest of the problems are a group of tiny problems stuck together. And Ruby also introduced me to her friends, the colorful side of the Internet culture. She has friends like the Snow Leopard, who is beautiful but doesn’t want to play with the other kids. And she has friends like the green robots that are really friendly but super messy. And she has friends like Linux the penguin who’s really ruthlessly efficient, but somewhat hard to understand. And idealistic foxes, and so on.In Ruby’s world, you learn technology through play. And, for instance, computers are really good at repeating stuff, so the way Ruby would teach loops goes like this. This is Ruby’s favorite dance move, it goes, “Clap, clap, stomp, stomp clap, clap and jump.” And you learn counter loops by repeating that four times. And you learn while loops by repeating that sequence while I’m standing on one leg. And you learn until loops by repeating that sequence until mom gets really mad. (Laughter) And most of all, you learn that there are no ready answers.When coming up with the curriculum for Ruby’s world, I needed to really ask the kids how they see the world and what kind of questions they have and I would organize play testing sessions. I would start by showing the kids these four pictures. I would show them a picture of a car, a grocery store, a dog and a toilet. And I would ask, “Which one of these do you think is a computer?” And the kids would be very conservative and go, “None of these is a computer. I know what a computer is: it’s that glowing box in front of which mom or dad spends way too much time.” But then we would talk and we would discover that actually, a car is a computer, it has a navigation system inside of it. And a dog – a dog might not be a computer, but it has a collar and the collar might have a computer inside of it. And grocery stores, they have so many different kinds of computers, like the cashier system and the burglar alarms. And kids, you know what? In Japan, toilets are computers and there’s even hackers who hack them. (Laughter)And we go further and I give them these little stickers with an on/off button on them. And I tell the kids, “Today you have this magic ability to make anything in this room into a computer.” And again, the kids go, “Sounds really hard, I don’t know the right answer for this.” But I tell them, “Don’t worry, your parents don’t know the right answer, either. They’ve just started to hear about this thing called The Internet of Things. But you kids, you are going to be the ones who are really going to live up in a world where everything is a computer.”And then I had this little girl who came to me and took a bicycle lamp and she said, “This bicycle lamp, if it were a computer, it would change colors.” And I said, “That’s a really good idea, what else could it do?” And she thinks and she thinks, and she goes, “If this bicycle lamp were a computer, we could go on a biking trip with my father and we would sleep in a tent and this biking lamp could also be a movie projector.” And that’s the moment I’m looking for, the moment when the kid realizes that the world is definitely not ready yet, that a really awesome way of making the world more ready is by building technology and that each one of us can be a part of that change.Final story, we also built a computer. And we got to know the bossy CPU and the helpful RAM and ROM that help it remember things. And after we’ve assembled our computer together, we also design an application for it. And my favorite story is this little boy, he’s six years old and his favorite thing in the world is to be an astronaut. And the boy, he has these huge headphones on and he’s completely immersed in his tiny paper computer because you see, he’s built his own intergalactic planetary navigation application. And his father, the lone astronaut in the Martian orbit, is on the other side of the room and the boy’s important mission is to bring the father safely back to earth. And these kids are going to have a profoundly different view of the world and the way we build it with technology.Finally, the more approachable, the more inclusive, and the more diverse we make the world of technology, the more colorful and better the world will look like. So, imagine with me, for a moment, a world where the stories we tell about how things get made don’t only include the twentysomething-year-old Silicon Valley boys, but also Kenyan schoolgirls and Norwegian librarians. Imagine a world where the little Ada Lovelaces of tomorrow, who live in a permanent reality of 1s and 0s, they grow up to be very optimistic and brave about technology. They embrace the powers and the opportunities and the limitations of the world. A world of technology that is wonderful, whimsical and a tiny bit weird.When I was a girl, I wanted to be a storyteller. I loved make-believe worlds and my favorite thing to do was to wake up in the mornings in Moominvalley. In the afternoons, I would roam around the Tatooines. And in the evenings, I would go to sleep in Narnia. And programming turned out to be the perfect profession for me. I still create worlds. Instead of stories, I do them with code.Programming gives me this amazing power to build my whole little universe with its own rules and paradigms and practices. Create something out of nothing with the pure power of logic.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(15)　21世紀のサイバーウェポン、Stuxnetをクラックする [Video]","slug":"ted-talks-programming-everyone-must-watch-15","date":"2018-02-16T22:00:01.000Z","updated":"2018-02-16T22:00:01.168Z","comments":true,"path":"2018/02/16/ted-talks-programming-everyone-must-watch-15/","link":"","permalink":"https://so-matome.net2018/02/16/ted-talks-programming-everyone-must-watch-15/","excerpt":"ラルフ・ラングナー：21世紀のサイバーウェポン、StuxnetをクラックするMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第15段は「ラルフ・ラングナー：21世紀のサイバーウェポン、Stuxnetをクラックする」。以下のように紹介されています：\n\nたぶんこれは最も魅力的なTED Talkかも。LangnerはStuxnetワームの説明に10分を費やし、 なぜそれが危険だったのか、そして彼のチームがそれをどのように解体し、それが何をしていたのかを解説しています。これは、問題に直面したときにプログラマーとして問題解決のために何をなすべきか、の良い例です。\n\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ラルフ・ラングナー：21世紀のサイバーウェポン、StuxnetをクラックするMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第15段は「ラルフ・ラングナー：21世紀のサイバーウェポン、Stuxnetをクラックする」。以下のように紹介されています： たぶんこれは最も魅力的なTED Talkかも。LangnerはStuxnetワームの説明に10分を費やし、 なぜそれが危険だったのか、そして彼のチームがそれをどのように解体し、それが何をしていたのかを解説しています。これは、問題に直面したときにプログラマーとして問題解決のために何をなすべきか、の良い例です。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： The idea behind the Stuxnet computer worm is actually quite simple.We don&#39;t want Iran to get the bomb.Their major asset for developing nuclear weapons is the Natanz uranium enrichment facility.The gray boxes that you see, these are real-time control systems.Now if we manage to compromise these systems that control drive speeds and valves, we can actually cause a lot of problems with the centrifuge.The gray boxes don&#39;t run Windows software; they are a completely different technology.But if we manage to place a good Windows virus on a notebook that is used by a maintenance engineer to configure this gray box, then we are in business.And this is the plot behind Stuxnet.So we start with a Windows dropper.The payload goes onto the gray box, damages the centrifuge, and the Iranian nuclear program is delayed – mission accomplished.That&#39;s easy, huh?I want to tell you how we found that out.When we started our research on Stuxnet six months ago, it was completely unknown what the purpose of this thing was.The only thing that was known is it&#39;s very, very complex on the Windows part, the dropper part, used multiple zero-day vulnerabilities.And it seemed to want to do something with these gray boxes, these real-time control systems.So that got our attention, and we started a lab project where we infected our environment with Stuxnet and checked this thing out.And then some very funny things happened.Stuxnet behaved like a lab rat that didn&#39;t like our cheese – sniffed, but didn&#39;t want to eat.Didn&#39;t make sense to me.And after we experimented with different flavors of cheese, I realized, well, this is a directed attack.It&#39;s completely directed.The dropper is prowling actively on the gray box if a specific configuration is found, and even if the actual program code that it&#39;s trying to infect is actually running on that target.And if not, Stuxnet does nothing.So that really got my attention, and we started to work on this nearly around the clock, because I thought, &quot;Well, we don&#39;t know what the target is.It could be, let&#39;s say for example, a U.S. power plant, or a chemical plant in Germany.So we better find out what the target is soon.&quot;So we extracted and decompiled the attack code, and we discovered that it&#39;s structured in two digital bombs – a smaller one and a bigger one.And we also saw that they are very professionally engineered by people who obviously had all insider information.They knew all the bits and bites that they had to attack.They probably even know the shoe size of the operator.So they know everything.And if you have heard that the dropper of Stuxnet is complex and high-tech, let me tell you this: the payload is rocket science.It&#39;s way above everything that we have ever seen before.Here you see a sample of this actual attack code.We are talking about – around about 15,000 lines of code.Looks pretty much like old-style assembly language.And I want to tell you how we were able to make sense out of this code.So what we were looking for is, first of all, system function calls, because we know what they do.And then we were looking for timers and data structures and trying to relate them to the real world – to potential real world targets.So we do need target theories that we can prove or disprove.In order to get target theories, we remember that it&#39;s definitely hardcore sabotage, it must be a high-value target and it is most likely located in Iran, because that&#39;s where most of the infections had been reported.Now you don&#39;t find several thousand targets in that area.It basically boils down to the Bushehr nuclear power plant and to the Natanz fuel enrichment plant.So I told my assistant, &quot;Get me a list of all centrifuge and power plant experts from our client base.&quot;And I phoned them up and picked their brain in an effort to match their expertise with what we found in code and data.And that worked pretty well.So we were able to associate the small digital warhead with the rotor control.The rotor is that moving part within the centrifuge, that black object that you see.And if you manipulate the speed of this rotor, you are actually able to crack the rotor and eventually even have the centrifuge explode.What we also saw is that the goal of the attack was really to do it slowly and creepy – obviously in an effort to drive maintenance engineers crazy, that they would not be able to figure this out quickly.The big digital warhead – we had a shot at this by looking very closely at data and data structures.So for example, the number 164 really stands out in that code; you can&#39;t overlook it.I started to research scientific literature on how these centrifuges are actually built in Natanz and found they are structured in what is called a cascade, and each cascade holds 164 centrifuges.So that made sense, that was a match.And it even got better.These centrifuges in Iran are subdivided into 15, what is called, stages.And guess what we found in the attack code?An almost identical structure.So again, that was a real good match.And this gave us very high confidence for what we were looking at.Now don&#39;t get me wrong here, it didn&#39;t go like this.These results have been obtained over several weeks of really hard labor.And we often went into just a dead end and had to recover.Anyway, so we figured out that both digital warheads were actually aiming at one and the same target, but from different angles.The small warhead is taking one cascade, and spinning up the rotors and slowing them down, and the big warhead is talking to six cascades and manipulating valves.So in all, we are very confident that we have actually determined what the target is.It is Natanz, and it is only Natanz.So we don&#39;t have to worry that other targets might be hit by Stuxnet.Here&#39;s some very cool stuff that we saw – really knocked my socks off.Down there is the gray box, and on the top you see the centrifuges.Now what this thing does is it intercepts the input values from sensors – so for example, from pressure sensors and vibration sensors – and it provides legitimate program code, which is still running during the attack, with fake input data.And as a matter of fact, this fake input data is actually prerecorded by Stuxnet.So it&#39;s just like from the Hollywood movies where during the heist, the observation camera is fed with prerecorded video.That&#39;s cool, huh?The idea here is obviously not only to fool the operators in the control room.It actually is much more dangerous and aggressive.The idea is to circumvent a digital safety system.We need digital safety systems where a human operator could not act quick enough.So for example, in a power plant, when your big steam turbine gets too over speed, you must open relief valves within a millisecond.Obviously, this cannot be done by a human operator.So this is where we need digital safety systems.And when they are compromised, then real bad things can happen.Your plant can blow up.And neither your operators nor your safety system will notice it.That&#39;s scary.But it gets worse.And this is very important, what I&#39;m going to say.Think about this: this attack is generic.It doesn&#39;t have anything to do, in specifics, with centrifuges, with uranium enrichment.So it would work as well, for example, in a power plant or in an automobile factory.It is generic.And you don&#39;t have – as an attacker – you don&#39;t have to deliver this payload by a USB stick, as we saw it in the case of Stuxnet.You could also use conventional worm technology for spreading.Just spread it as wide as possible.And if you do that, what you end up with is a cyber weapon of mass destruction.That&#39;s the consequence that we have to face.So unfortunately, the biggest number of targets for such attacks are not in the Middle East.They&#39;re in the United States and Europe and in Japan.So all of the green areas, these are your target-rich environments.We have to face the consequences, and we better start to prepare right now.Thanks.(Applause) Chris Anderson: I&#39;ve got a question.Ralph, it&#39;s been quite widely reported that people assume that Mossad is the main entity behind this.Is that your opinion?Ralph Langner: Okay, you really want to hear that?Yeah. Okay.My opinion is that the Mossad is involved, but that the leading force is not Israel.So the leading force behind that is the cyber superpower.There is only one, and that&#39;s the United States – fortunately, fortunately.Because otherwise, our problems would even be bigger.CA: Thank you for scaring the living daylights out of us. Thank you, Ralph.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(16)　ウィルスと戦い、ネットを守る [Video]","slug":"ted-talks-programming-everyone-must-watch-16","date":"2018-02-09T22:00:01.000Z","updated":"2018-02-09T22:00:01.825Z","comments":true,"path":"2018/02/09/ted-talks-programming-everyone-must-watch-16/","link":"","permalink":"https://so-matome.net2018/02/09/ted-talks-programming-everyone-must-watch-16/","excerpt":"Mikko Hypponen：ウィルスと戦い、ネットを守るMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第16段は「Mikko Hypponen：ウィルスと戦い、ネットを守る」。以下のように紹介されています：\n\nHypponenは、わずか17分で1986年の最初のインターネットウイルスから、組織化された犯罪マルウェア業界の誕生と進化、そしてその動機まで、ウイルスの歴史を探ります。 私たちはそれについて何をすることができ、これが私たちの将来にどのような影響を及ぼすのでしょうか？\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"Mikko Hypponen：ウィルスと戦い、ネットを守るMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第16段は「Mikko Hypponen：ウィルスと戦い、ネットを守る」。以下のように紹介されています： Hypponenは、わずか17分で1986年の最初のインターネットウイルスから、組織化された犯罪マルウェア業界の誕生と進化、そしてその動機まで、ウイルスの歴史を探ります。 私たちはそれについて何をすることができ、これが私たちの将来にどのような影響を及ぼすのでしょうか？ 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： I love the Internet.It&#39;s true.Think about everything it has brought us.Think about all the services we use, all the connectivity, all the entertainment, all the business, all the commerce.And it&#39;s happening during our lifetimes.I&#39;m pretty sure that one day we&#39;ll be writing history books hundreds of years from now. This time our generation will be remembered as the generation that got online, the generation that built something really and truly global.But yes, it&#39;s also true that the Internet has problems, very serious problems, problems with security and problems with privacy.I&#39;ve spent my career fighting these problems.So let me show you something.This here is Brain.This is a floppy disk – five and a quarter-inch floppy disk infected by Brain.A.It&#39;s the first virus we ever found for PC computers.And we actually know where Brain came from.We know because it says so inside the code.Let&#39;s take a look.All right.That&#39;s the boot sector of an infected floppy, and if we take a closer look inside, we&#39;ll see that right there, it says, &quot;Welcome to the dungeon.&quot;And then it continues, saying, 1986, Basit and Amjad.And Basit and Amjad are first names, Pakistani first names.In fact, there&#39;s a phone number and an address in Pakistan.(Laughter) Now, 1986.Now it&#39;s 2011.That&#39;s 25 years ago.The PC virus problem is 25 years old now.So half a year ago, I decided to go to Pakistan myself.So let&#39;s see, here&#39;s a couple of photos I took while I was in Pakistan.This is from the city of Lahore, which is around 300 kilometers south from Abbottabad, where Bin Laden was caught.Here&#39;s a typical street view.And here&#39;s the street or road leading to this building, which is 730 Nizam block at Allama Iqbal Town.And I knocked on the door.(Laughter) You want to guess who opened the door?Basit and Amjad; they are still there.(Laughter) (Applause) So here standing up is Basit.Sitting down is his brother Amjad.These are the guys who wrote the first PC virus.Now of course, we had a very interesting discussion.I asked them why.I asked them how they feel about what they started.And I got some sort of satisfaction from learning that both Basit and Amjad had had their computers infected dozens of times by completely unrelated other viruses over these years.So there is some sort of justice in the world after all.Now, the viruses that we used to see in the 1980s and 1990s obviously are not a problem any more.So let me just show you a couple of examples of what they used to look like.What I&#39;m running here is a system that enables me to run age-old programs on a modern computer.So let me just mount some drives. Go over there.What we have here is a list of old viruses.So let me just run some viruses on my computer.For example, let&#39;s go with the Centipede virus first.And you can see at the top of the screen, there&#39;s a centipede scrolling across your computer when you get infected by this one.You know that you&#39;re infected because it actually shows up.Here&#39;s another one. This is the virus called Crash, invented in Russia in 1992.Let me show you one which actually makes some sound.(Siren noise) And the last example, guess what the Walker virus does?Yes, there&#39;s a guy walking across your screen once you get infected.So it used to be fairly easy to know that you&#39;re infected by a virus, when the viruses were written by hobbyists and teenagers.Today, they are no longer being written by hobbyists and teenagers.Today, viruses are a global problem.What we have here in the background is an example of our systems that we run in our labs, where we track virus infections worldwide.So we can actually see in real time that we&#39;ve just blocked viruses in Sweden and Taiwan and Russia and elsewhere.In fact, if I just connect back to our lab systems through the Web, we can see in real time just some kind of idea of how many viruses, how many new examples of malware we find every single day.Here&#39;s the latest virus we&#39;ve found, in a file called Server.exe.And we found it right over here three seconds ago – the previous one, six seconds ago.And if we just scroll around, it&#39;s just massive.We find tens of thousands, even hundreds of thousands.And that&#39;s the last 20 minutes of malware every single day.So where are all these coming from then?Well today, it&#39;s the organized criminal gangs writing these viruses because they make money with their viruses.It&#39;s gangs like – let&#39;s go to GangstaBucks.com.This is a website operating in Moscow where these guys are buying infected computers.So if you are a virus writer and you&#39;re capable of infecting Windows computers, but you don&#39;t know what to do with them, you can sell those infected computers – somebody else&#39;s computers – to these guys.And they&#39;ll actually pay you money for those computers.So how do these guys then monetize those infected computers?Well there&#39;s multiple different ways, such as banking trojans, which will steal money from your online banking accounts when you do online banking, or keyloggers.Keyloggers silently sit on your computer, hidden from view, and they record everything you type.So you&#39;re sitting on your computer and you&#39;re doing Google searches.Every single Google search you type is saved and sent to the criminals.Every single email you write is saved and sent to the criminals.Same thing with every single password and so on.But the thing that they&#39;re actually looking for most are sessions where you go online and do online purchases in any online store.Because when you do purchases in online stores, you will be typing in your name, the delivery address, your credit card number and the credit card security codes.And here&#39;s an example of a file we found from a server a couple of weeks ago.That&#39;s the credit card number, that&#39;s the expiration date, that&#39;s the security code, and that&#39;s the name of the owner of the card.Once you gain access to other people&#39;s credit card information, you can just go online and buy whatever you want with this information.And that, obviously, is a problem.We now have a whole underground marketplace and business ecosystem built around online crime.One example of how these guys actually are capable of monetizing their operations: we go and have a look at the pages of INTERPOL and search for wanted persons.We find guys like Bjorn Sundin, originally from Sweden, and his partner in crime, also listed on the INTERPOL wanted pages, Mr. Shaileshkumar Jain, a U.S. citizen.These guys were running an operation called I.M.U., a cybercrime operation through which they netted millions.They are both right now on the run.Nobody knows where they are.U.S. officials, just a couple of weeks ago, froze a Swiss bank account belonging to Mr. Jain, and that bank account had 14.9 million U.S. dollars on it.So the amount of money online crime generates is significant.And that means that the online criminals can actually afford to invest into their attacks.We know that online criminals are hiring programmers, hiring testing people, testing their code, having back-end systems with SQL databases.And they can afford to watch how we work – like how security people work – and try to work their way around any security precautions we can build.They also use the global nature of Internet to their advantage.I mean, the Internet is international.That&#39;s why we call it the Internet.And if you just go and take a look at what&#39;s happening in the online world, here&#39;s a video built by Clarified Networks, which illustrates how one single malware family is able to move around the world.This operation, believed to be originally from Estonia, moves around from one country to another as soon as the website is tried to shut down.So you just can&#39;t shut these guys down.They will switch from one country to another, from one jurisdiction to another – moving around the world, using the fact that we don&#39;t have the capability to globally police operations like this.So the Internet is as if someone would have given free plane tickets to all the online criminals of the world.Now, criminals who weren&#39;t capable of reaching us before can reach us.So how do you actually go around finding online criminals?How do you actually track them down?Let me give you an example.What we have here is one exploit file.Here, I&#39;m looking at the Hex dump of an image file, which contains an exploit.And that basically means, if you&#39;re trying to view this image file on your Windows computer, it actually takes over your computer and runs code.Now, if you&#39;ll take a look at this image file – well there&#39;s the image header, and there the actual code of the attack starts.And that code has been encrypted, so let&#39;s decrypt it.It has been encrypted with XOR function 97.You just have to believe me, it is, it is.And we can go here and actually start decrypting it.Well the yellow part of the code is now decrypted.And I know, it doesn&#39;t really look much different from the original.But just keep staring at it.You&#39;ll actually see that down here you can see a Web address: unionseek.com/d/ioo.exe And when you view this image on your computer it actually is going to download and run that program.And that&#39;s a backdoor which will take over your computer.But even more interestingly, if we continue decrypting, we&#39;ll find this mysterious string, which says O600KO78RUS.That code is there underneath the encryption as some sort of a signature.It&#39;s not used for anything.And I was looking at that, trying to figure out what it means.So obviously I Googled for it.I got zero hits; wasn&#39;t there.So I spoke with the guys at the lab.And we have a couple of Russian guys in our labs, and one of them mentioned, well, it ends in RUS like Russia.And 78 is the city code for the city of St. Petersburg.For example, you can find it from some phone numbers and car license plates and stuff like that.So I went looking for contacts in St. Petersburg, and through a long road, we eventually found this one particular website.Here&#39;s this Russian guy who&#39;s been operating online for a number of years who runs his own website, and he runs a blog under the popular Live Journal.And on this blog, he blogs about his life, about his life in St. Petersburg – he&#39;s in his early 20s – about his cat, about his girlfriend.And he drives a very nice car.In fact, this guy drives a Mercedes-Benz S600 V12 with a six-liter engine with more than 400 horsepower.Now that&#39;s a nice car for a 20-something year-old kid in St. Petersburg.How do I know about this car?Because he blogged about the car.He actually had a car accident.In downtown St. Petersburg, he actually crashed his car into another car.And he put blogged images about the car accident – that&#39;s his Mercedes – right here is the Lada Samara he crashed into.And you can actually see that the license plate of the Samara ends in 78RUS.And if you actually take a look at the scene picture, you can see that the plate of the Mercedes is O600KO78RUS.Now I&#39;m not a lawyer, but if I would be, this is where I would say, &quot;I rest my case.&quot;(Laughter) So what happens when online criminals are caught?Well in most cases it never gets this far.The vast majority of the online crime cases, we don&#39;t even know which continent the attacks are coming from.And even if we are able to find online criminals, quite often there is no outcome.The local police don&#39;t act, or if they do, there&#39;s not enough evidence, or for some reason we can&#39;t take them down.I wish it would be easier; unfortunately it isn&#39;t.But things are also changing at a very rapid pace.You&#39;ve all heard about things like Stuxnet.So if you look at what Stuxnet did is that it infected these.That&#39;s a Siemens S7-400 PLC, programmable logic [controller].And this is what runs our infrastructure.This is what runs everything around us.PLC&#39;s, these small boxes which have no display, no keyboard, which are programmed, are put in place, and they do their job.For example, the elevators in this building most likely are controlled by one of these.And when Stuxnet infects one of these, that&#39;s a massive revolution on the kinds of risks we have to worry about.Because everything around us is being run by these.I mean, we have critical infrastructure.You go to any factory, any power plant, any chemical plant, any food processing plant, you look around – everything is being run by computers.Everything is being run by computers.Everything is reliant on these computers working.We have become very reliant on Internet, on basic things like electricity, obviously, on computers working.And this really is something which creates completely new problems for us.We must have some way of continuing to work even if computers fail.(Laughter) (Applause) So preparedness means that we can do stuff even when the things we take for granted aren&#39;t there.It&#39;s actually very basic stuff – thinking about continuity, thinking about backups, thinking about the things that actually matter.Now I told you – (Laughter) I love the Internet. I do.Think about all the services we have online.Think about if they are taken away from you, if one day you don&#39;t actually have them for some reason or another.I see beauty in the future of the Internet, but I&#39;m worried that we might not see that.I&#39;m worried that we are running into problems because of online crime.Online crime is the one thing that might take these things away from us.(Laughter) I&#39;ve spent my life defending the Net, and I do feel that if we don&#39;t fight online crime, we are running a risk of losing it all.We have to do this globally, and we have to do it right now.What we need is more global, international law enforcement work to find online criminal gangs – these organized gangs that are making millions out of their attacks.That&#39;s much more important than running anti-viruses or running firewalls.What actually matters is actually finding the people behind these attacks, and even more importantly, we have to find the people who are about to become part of this online world of crime, but haven&#39;t yet done it.We have to find the people with the skills, but without the opportunities and give them the opportunities to use their skills for good.Thank you very much.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(17)　ハッカーを雇う！ [Video]","slug":"ted-talks-programming-everyone-must-watch-17","date":"2018-02-02T22:00:01.000Z","updated":"2018-02-02T22:00:01.695Z","comments":true,"path":"2018/02/02/ted-talks-programming-everyone-must-watch-17/","link":"","permalink":"https://so-matome.net2018/02/02/ted-talks-programming-everyone-must-watch-17/","excerpt":"Misha Glenny：ハッカーを雇う！MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第17段は「Misha Glenny：ハッカーを雇う！」。以下のように紹介されています：\n\nこの18分間のTED Talkでは、21世紀の最悪の問題の1つに興味深い解決策があります。ハッカーやサイバー犯罪者を倒すためにはどうすればいいのでしょうか？ タイトルから推測できるかもしれませんが、Glennyはただ一つの本当の答えを提案しています：彼らをこちら側に連れてくればいい。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"Misha Glenny：ハッカーを雇う！MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第17段は「Misha Glenny：ハッカーを雇う！」。以下のように紹介されています： この18分間のTED Talkでは、21世紀の最悪の問題の1つに興味深い解決策があります。ハッカーやサイバー犯罪者を倒すためにはどうすればいいのでしょうか？ タイトルから推測できるかもしれませんが、Glennyはただ一つの本当の答えを提案しています：彼らをこちら側に連れてくればいい。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： Now this is a very un-TED-like thing to do, but let’s kick off the afternoon with a message from a mystery sponsor.Anonymous: Dear Fox News, it has come to our unfortunate attention that both the name and nature of Anonymous has been ravaged. We are everyone. We are no one. We are anonymous. We are legion. We do not forgive. We do not forget. We are but the base of chaos.Misha Glenny: Anonymous, ladies and gentlemen – a sophisticated group of politically motivated hackers who have emerged in 2011. And they’re pretty scary. You never know when they’re going to attack next, who or what the consequences will be. But interestingly, they have a sense of humor. These guys hacked into Fox News’ Twitter account to announce President Obama’s assassination. Now you can imagine the panic that would have generated in the newsroom at Fox. “What do we do now? Put on a black armband, or crack open the champagne?” (Laughter) And of course, who could escape the irony of a member of Rupert Murdoch’s News Corp. being a victim of hacking for a change.(Laughter)(Applause)Sometimes you turn on the news and you say, “Is there anyone left to hack?” Sony Playstation Network – done, the government of Turkey – tick, Britain’s Serious Organized Crime Agency – a breeze, the CIA – falling off a log. In fact, a friend of mine from the security industry told me the other day that there are two types of companies in the world: those that know they’ve been hacked, and those that don’t. I mean three companies providing cybersecurity services to the FBI have been hacked. Is nothing sacred anymore, for heaven’s sake?Anyway, this mysterious group Anonymous – and they would say this themselves – they are providing a service by demonstrating how useless companies are at protecting our data. But there is also a very serious aspect to Anonymous – they are ideologically driven. They claim that they are battling a dastardly conspiracy. They say that governments are trying to take over the Internet and control it, and that they, Anonymous, are the authentic voice of resistance – be it against Middle Eastern dictatorships, against global media corporations, or against intelligence agencies, or whoever it is. And their politics are not entirely unattractive. Okay, they’re a little inchoate. There’s a strong whiff of half-baked anarchism about them. But one thing is true: we are at the beginning of a mighty struggle for control of the Internet. The Web links everything, and very soon it will mediate most human activity. Because the Internet has fashioned a new and complicated environment for an old-age dilemma that pits the demands of security with the desire for freedom.Now this is a very complicated struggle. And unfortunately, for mortals like you and me, we probably can’t understand it very well. Nonetheless, in an unexpected attack of hubris a couple of years ago, I decided I would try and do that. And I sort of get it. These were the various things that I was looking at as I was trying to understand it. But in order to try and explain the whole thing, I would need another 18 minutes or so to do it, so you’re just going to have to take it on trust from me on this occasion, and let me assure you that all of these issues are involved in cybersecurity and control of the Internet one way or the other, but in a configuration that even Stephen Hawking would probably have difficulty trying to get his head around. So there you are. And as you see, in the middle, there is our old friend, the hacker. The hacker is absolutely central to many of the political, social and economic issues affecting the Net. And so I thought to myself, “Well, these are the guys who I want to talk to.” And what do you know, nobody else does talk to the hackers. They’re completely anonymous, as it were.So despite the fact that we are beginning to pour billions, hundreds of billions of dollars, into cybersecurity – for the most extraordinary technical solutions – no one wants to talk to these guys, the hackers, who are doing everything. Instead, we prefer these really dazzling technological solutions, which cost a huge amount of money. And so nothing is going into the hackers. Well, I say nothing, but actually there is one teeny weeny little research unit in Turin, Italy called the Hackers Profiling Project. And they are doing some fantastic research into the characteristics, into the abilities and the socialization of hackers. But because they’re a U.N. operation, maybe that’s why governments and corporations are not that interested in them. Because it’s a U.N. operation, of course, it lacks funding. But I think they’re doing very important work. Because where we have a surplus of technology in the cybersecurity industry, we have a definite lack of – call me old-fashioned – human intelligence.Now, so far I’ve mentioned the hackers Anonymous who are a politically motivated hacking group. Of course, the criminal justice system treats them as common old garden criminals. But interestingly, Anonymous does not make use of its hacked information for financial gain. But what about the real cybercriminals? Well real organized crime on the Internet goes back about 10 years when a group of gifted Ukrainian hackers developed a website, which led to the industrialization of cybercrime. Welcome to the now forgotten realm of CarderPlanet. This is how they were advertising themselves a decade ago on the Net. Now CarderPlanet was very interesting. Cybercriminals would go there to buy and sell stolen credit card details, to exchange information about new malware that was out there. And remember, this is a time when we’re seeing for the first time so-called off-the-shelf malware. This is ready for use, out-of-the-box stuff, which you can deploy even if you’re not a terribly sophisticated hacker.And so CarderPlanet became a sort of supermarket for cybercriminals. And its creators were incredibly smart and entrepreneurial, because they were faced with one enormous challenge as cybercriminals. And that challenge is: How do you do business, how do you trust somebody on the Web who you want to do business with when you know that they’re a criminal? (Laughter) It’s axiomatic that they’re dodgy, and they’re going to want to try and rip you off. So the family, as the inner core of CarderPlanet was known, came up with this brilliant idea called the escrow system. They appointed an officer who would mediate between the vendor and the purchaser. The vendor, say, had stolen credit card details; the purchaser wanted to get a hold of them. The purchaser would send the administrative officer some dollars digitally, and the vendor would sell the stolen credit card details. And the officer would then verify if the stolen credit card worked. And if they did, he then passed on the money to the vendor and the stolen credit card details to the purchaser. And it was this which completely revolutionized cybercrime on the Web. And after that, it just went wild. We had a champagne decade for people who we know as Carders.Now I spoke to one of these Carders who we’ll call RedBrigade – although that wasn’t even his proper nickname – but I promised I wouldn’t reveal who he was. And he explained to me how in 2003 and 2004 he would go on sprees in New York, taking out $10,000 from an ATM here, $30,000 from an ATM there, using cloned credit cards. He was making, on average a week, $150,000 – tax free of course. And he said that he had so much money stashed in his upper-East side apartment at one point that he just didn’t know what to do with it and actually fell into a depression. But that’s a slightly different story, which I won’t go into now. Now the interesting thing about RedBrigade is that he wasn’t an advanced hacker. He sort of understood the technology, and he realized that security was very important if you were going to be a Carder, but he didn’t spend his days and nights bent over a computer, eating pizza, drinking coke and that sort of thing. He was out there on the town having a fab time enjoying the high life.And this is because hackers are only one element in a cybercriminal enterprise. And often they’re the most vulnerable element of all. And I want to explain this to you by introducing you to six characters who I met while I was doing this research. Dimitry Golubov, aka SCRIPT – born in Odessa, Ukraine in 1982. Now he developed his social and moral compass on the Black Sea port during the 1990s. This was a sink-or-swim environment where involvement in criminal or corrupt activities was entirely necessary if you wanted to survive. As an accomplished computer user, what Dimitry did was to transfer the gangster capitalism of his hometown onto the Worldwide Web. And he did a great job in it. You have to understand though that from his ninth birthday, the only environment he knew was gangsterism. He knew no other way of making a living and making money.Then we have Renukanth Subramaniam, aka JiLsi – founder of DarkMarket, born in Colombo, Sri Lanka. As an eight year-old, he and his parents fled the Sri Lankan capital because Singhalese mobs were roaming the city, looking for Tamils like Renu to murder. At 11, he was interrogated by the Sri Lankan military, accused of being a terrorist, and his parents sent him on his own to Britain as a refugee seeking political asylum. At 13, with only little English and being bullied at school, he escaped into a world of computers where he showed great technical ability, but he was soon being seduced by people on the Internet. He was convicted of mortgage and credit card fraud, and he will be released from Wormwood Scrubs jail in London in 2012.Matrix001, who was an administrator at DarkMarket. Born in Southern Germany to a stable and well-respected middle class family, his obsession with gaming as a teenager led him to hacking. And he was soon controlling huge servers around the world where he stored his games that he had cracked and pirated. His slide into criminality was incremental. And when he finally woke up to his situation and understood the implications, he was already in too deep.Max Vision, aka ICEMAN – mastermind of CardersMarket. Born in Meridian, Idaho. Max Vision was one of the best penetration testers working out of Santa Clara, California in the late 90s for private companies and voluntarily for the FBI. Now in the late 1990s, he discovered a vulnerability on all U.S. government networks, and he went in and patched it up – because this included nuclear research facilities – sparing the American government a huge security embarrassment. But also, because he was an inveterate hacker, he left a tiny digital wormhole through which he alone could crawl. But this was spotted by an eagle-eye investigator, and he was convicted. At his open prison, he came under the influence of financial fraudsters, and those financial fraudsters persuaded him to work for them on his release. And this man with a planetary-sized brain is now serving a 13-year sentence in California.Adewale Taiwo, aka FreddyBB – master bank account cracker from Abuja in Nigeria. He set up his prosaically entitled newsgroup, bankfrauds@yahoo.co.uk before arriving in Britain in 2005 to take a Masters in chemical engineering at Manchester University. He impressed in the private sector, developing chemical applications for the oil industry while simultaneously running a worldwide bank and credit card fraud operation that was worth millions until his arrest in 2008.And then finally, Cagatay Evyapan, aka Cha0 – one of the most remarkable hackers ever, from Ankara in Turkey. He combined the tremendous skills of a geek with the suave social engineering skills of the master criminal. One of the smartest people I’ve ever met. He also had the most effective virtual private network security arrangement the police have ever encountered amongst global cybercriminals.Now the important thing about all of these people is they share certain characteristics despite the fact that they come from very different environments. They are all people who learned their hacking skills in their early to mid-teens. They are all people who demonstrate advanced ability in maths and the sciences. Remember that, when they developed those hacking skills, their moral compass had not yet developed. And most of them, with the exception of SCRIPT and Cha0, they did not demonstrate any real social skills in the outside world – only on the Web.And the other thing is the high incidence of hackers like these who have characteristics which are consistent with Asperger’s syndrome. Now I discussed this with Professor Simon Baron-Cohen who’s the professor of developmental psychopathology at Cambridge. And he has done path-breaking work on autism and confirmed, also for the authorities here, that Gary McKinnon – who is wanted by the United States for hacking into the Pentagon – suffers from Asperger’s and a secondary condition of depression. And Baron-Cohen explained that certain disabilities can manifest themselves in the hacking and computing world as tremendous skills, and that we should not be throwing in jail people who have such disabilities and skills because they have lost their way socially or been duped.Now I think we’re missing a trick here, because I don’t think people like Max Vision should be in jail. And let me be blunt about this. In China, in Russia and in loads of other countries that are developing cyber-offensive capabilities, this is exactly what they are doing. They are recruiting hackers both before and after they become involved in criminal and industrial espionage activities – are mobilizing them on behalf of the state. We need to engage and find ways of offering guidance to these young people, because they are a remarkable breed. And if we rely, as we do at the moment, solely on the criminal justice system and the threat of punitive sentences, we will be nurturing a monster we cannot tame.Thank you very much for listening.(Applause)Chris Anderson: So your idea worth spreading is hire hackers. How would someone get over that kind of fear that the hacker they hire might preserve that little teensy wormhole?MG: I think to an extent, you have to understand that it’s axiomatic among hackers that they do that. They’re just relentless and obsessive about what they do. But all of the people who I’ve spoken to who have fallen foul of the law, they have all said, “Please, please give us a chance to work in the legitimate industry. We just never knew how to get there, what we were doing. We want to work with you.”Chris Anderson: Okay, well that makes sense. Thanks a lot Misha.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(18)　コンピュータが我々よりも賢くなったらどうなるか？ [Video]","slug":"ted-talks-programming-everyone-must-watch-18","date":"2018-01-26T22:00:01.000Z","updated":"2018-01-26T22:00:01.284Z","comments":true,"path":"2018/01/26/ted-talks-programming-everyone-must-watch-18/","link":"","permalink":"https://so-matome.net2018/01/26/ted-talks-programming-everyone-must-watch-18/","excerpt":"ニック・ボストロム：コンピュータが我々よりも賢くなったらどうなるか？MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第18段は「ニック・ボストロム：コンピュータが我々よりも賢くなったらどうなるか？」。以下のように紹介されています：\n\nこの16分間のTEDトークでは、ニック・ボストロムは超人的なAIのアイデアを探求し、私たちがそれに備えて何をすべきかについて非常に懸命に考えるよう主張しています。 「機械知能は人類には必要ない発明だ」と彼は言います。それｈは我々にとっての恩恵でしょうか、それとも間違いなのでしょうか？\nもちろん、ロボットが私たちの仕事を引き継ぐときに何が起こるかなど、それより前に心配することはまだ沢山ありますが。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ニック・ボストロム：コンピュータが我々よりも賢くなったらどうなるか？MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第18段は「ニック・ボストロム：コンピュータが我々よりも賢くなったらどうなるか？」。以下のように紹介されています： この16分間のTEDトークでは、ニック・ボストロムは超人的なAIのアイデアを探求し、私たちがそれに備えて何をすべきかについて非常に懸命に考えるよう主張しています。 「機械知能は人類には必要ない発明だ」と彼は言います。それｈは我々にとっての恩恵でしょうか、それとも間違いなのでしょうか？ もちろん、ロボットが私たちの仕事を引き継ぐときに何が起こるかなど、それより前に心配することはまだ沢山ありますが。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： I work with a bunch of mathematicians, philosophers and computer scientists, and we sit around and think about the future of machine intelligence, among other things.Some people think that some of these things are sort of science fiction-y, far out there, crazy.But I like to say, okay, let&#39;s look at the modern human condition.(Laughter) This is the normal way for things to be.But if we think about it, we are actually recently arrived guests on this planet, the human species.Think about if Earth was created one year ago, the human species, then, would be 10 minutes old.The industrial era started two seconds ago.Another way to look at this is to think of world GDP over the last 10,000 years, I&#39;ve actually taken the trouble to plot this for you in a graph.It looks like this.(Laughter) It&#39;s a curious shape for a normal condition.I sure wouldn&#39;t want to sit on it.(Laughter) Let&#39;s ask ourselves, what is the cause of this current anomaly?Some people would say it&#39;s technology.Now it&#39;s true, technology has accumulated through human history, and right now, technology advances extremely rapidly – that is the proximate cause, that&#39;s why we are currently so very productive.But I like to think back further to the ultimate cause.Look at these two highly distinguished gentlemen: We have Kanzi – he&#39;s mastered 200 lexical tokens, an incredible feat.And Ed Witten unleashed the second superstring revolution.If we look under the hood, this is what we find: basically the same thing.One is a little larger, it maybe also has a few tricks in the exact way it&#39;s wired.These invisible differences cannot be too complicated, however, because there have only been 250,000 generations since our last common ancestor.We know that complicated mechanisms take a long time to evolve.So a bunch of relatively minor changes take us from Kanzi to Witten, from broken-off tree branches to intercontinental ballistic missiles.So this then seems pretty obvious that everything we&#39;ve achieved, and everything we care about, depends crucially on some relatively minor changes that made the human mind.And the corollary, of course, is that any further changes that could significantly change the substrate of thinking could have potentially enormous consequences.Some of my colleagues think we&#39;re on the verge of something that could cause a profound change in that substrate, and that is machine superintelligence.Artificial intelligence used to be about putting commands in a box.You would have human programmers that would painstakingly handcraft knowledge items.You build up these expert systems, and they were kind of useful for some purposes, but they were very brittle, you couldn&#39;t scale them.Basically, you got out only what you put in.But since then, a paradigm shift has taken place in the field of artificial intelligence.Today, the action is really around machine learning.So rather than handcrafting knowledge representations and features, we create algorithms that learn, often from raw perceptual data.Basically the same thing that the human infant does.The result is A.I. that is not limited to one domain – the same system can learn to translate between any pairs of languages, or learn to play any computer game on the Atari console.Now of course, A.I. is still nowhere near having the same powerful, cross-domain ability to learn and plan as a human being has.The cortex still has some algorithmic tricks that we don&#39;t yet know how to match in machines.So the question is, how far are we from being able to match those tricks?A couple of years ago, we did a survey of some of the world&#39;s leading A.I. experts, to see what they think, and one of the questions we asked was, &quot;By which year do you think there is a 50 percent probability that we will have achieved human-level machine intelligence?&quot;We defined human-level here as the ability to perform almost any job at least as well as an adult human, so real human-level, not just within some limited domain.And the median answer was 2040 or 2050, depending on precisely which group of experts we asked.Now, it could happen much, much later, or sooner, the truth is nobody really knows.What we do know is that the ultimate limit to information processing in a machine substrate lies far outside the limits in biological tissue.This comes down to physics.A biological neuron fires, maybe, at 200 hertz, 200 times a second.But even a present-day transistor operates at the Gigahertz.Neurons propagate slowly in axons, 100 meters per second, tops.But in computers, signals can travel at the speed of light.There are also size limitations, like a human brain has to fit inside a cranium, but a computer can be the size of a warehouse or larger.So the potential for superintelligence lies dormant in matter, much like the power of the atom lay dormant throughout human history, patiently waiting there until 1945.In this century, scientists may learn to awaken the power of artificial intelligence.And I think we might then see an intelligence explosion.Now most people, when they think about what is smart and what is dumb, I think have in mind a picture roughly like this.So at one end we have the village idiot, and then far over at the other side we have Ed Witten, or Albert Einstein, or whoever your favorite guru is.But I think that from the point of view of artificial intelligence, the true picture is actually probably more like this: AI starts out at this point here, at zero intelligence, and then, after many, many years of really hard work, maybe eventually we get to mouse-level artificial intelligence, something that can navigate cluttered environments as well as a mouse can.And then, after many, many more years of really hard work, lots of investment, maybe eventually we get to chimpanzee-level artificial intelligence.And then, after even more years of really, really hard work, we get to village idiot artificial intelligence.And a few moments later, we are beyond Ed Witten.The train doesn&#39;t stop at Humanville Station.It&#39;s likely, rather, to swoosh right by.Now this has profound implications, particularly when it comes to questions of power.For example, chimpanzees are strong – pound for pound, a chimpanzee is about twice as strong as a fit human male.And yet, the fate of Kanzi and his pals depends a lot more on what we humans do than on what the chimpanzees do themselves.Once there is superintelligence, the fate of humanity may depend on what the superintelligence does.Think about it: Machine intelligence is the last invention that humanity will ever need to make.Machines will then be better at inventing than we are, and they&#39;ll be doing so on digital timescales.What this means is basically a telescoping of the future.Think of all the crazy technologies that you could have imagined maybe humans could have developed in the fullness of time: cures for aging, space colonization, self-replicating nanobots or uploading of minds into computers, all kinds of science fiction-y stuff that&#39;s nevertheless consistent with the laws of physics.All of this superintelligence could develop, and possibly quite rapidly.Now, a superintelligence with such technological maturity would be extremely powerful, and at least in some scenarios, it would be able to get what it wants.We would then have a future that would be shaped by the preferences of this A.I.Now a good question is, what are those preferences?Here it gets trickier.To make any headway with this, we must first of all avoid anthropomorphizing.And this is ironic because every newspaper article about the future of A.I.has a picture of this: So I think what we need to do is to conceive of the issue more abstractly, not in terms of vivid Hollywood scenarios.We need to think of intelligence as an optimization process, a process that steers the future into a particular set of configurations.A superintelligence is a really strong optimization process.It&#39;s extremely good at using available means to achieve a state in which its goal is realized.This means that there is no necessary connection between being highly intelligent in this sense, and having an objective that we humans would find worthwhile or meaningful.Suppose we give an A.I. the goal to make humans smile.When the A.I. is weak, it performs useful or amusing actions that cause its user to smile.When the A.I. becomes superintelligent, it realizes that there is a more effective way to achieve this goal: take control of the world and stick electrodes into the facial muscles of humans to cause constant, beaming grins.Another example, suppose we give A.I. the goal to solve a difficult mathematical problem.When the A.I. becomes superintelligent, it realizes that the most effective way to get the solution to this problem is by transforming the planet into a giant computer, so as to increase its thinking capacity.And notice that this gives the A.I.s an instrumental reason to do things to us that we might not approve of.Human beings in this model are threats, we could prevent the mathematical problem from being solved.Of course, perceivably things won&#39;t go wrong in these particular ways; these are cartoon examples.But the general point here is important: if you create a really powerful optimization process to maximize for objective x, you better make sure that your definition of x incorporates everything you care about.This is a lesson that&#39;s also taught in many a myth.King Midas wishes that everything he touches be turned into gold.He touches his daughter, she turns into gold.He touches his food, it turns into gold.This could become practically relevant, not just as a metaphor for greed, but as an illustration of what happens if you create a powerful optimization process and give it misconceived or poorly specified goals.Now you might say, if a computer starts sticking electrodes into people&#39;s faces, we&#39;d just shut it off.A, this is not necessarily so easy to do if we&#39;ve grown dependent on the system – like, where is the off switch to the Internet?B, why haven&#39;t the chimpanzees flicked the off switch to humanity, or the Neanderthals?They certainly had reasons.We have an off switch, for example, right here.(Choking) The reason is that we are an intelligent adversary; we can anticipate threats and plan around them.But so could a superintelligent agent, and it would be much better at that than we are.The point is, we should not be confident that we have this under control here.And we could try to make our job a little bit easier by, say, putting the A.I. in a box, like a secure software environment, a virtual reality simulation from which it cannot escape.But how confident can we be that the A.I. couldn&#39;t find a bug.Given that merely human hackers find bugs all the time, I&#39;d say, probably not very confident.So we disconnect the ethernet cable to create an air gap, but again, like merely human hackers routinely transgress air gaps using social engineering.Right now, as I speak, I&#39;m sure there is some employee out there somewhere who has been talked into handing out her account details by somebody claiming to be from the I.T. department.More creative scenarios are also possible, like if you&#39;re the A.I., you can imagine wiggling electrodes around in your internal circuitry to create radio waves that you can use to communicate.Or maybe you could pretend to malfunction, and then when the programmers open you up to see what went wrong with you, they look at the source code – Bam! – the manipulation can take place.Or it could output the blueprint to a really nifty technology, and when we implement it, it has some surreptitious side effect that the A.I. had planned.The point here is that we should not be confident in our ability to keep a superintelligent genie locked up in its bottle forever.Sooner or later, it will out.I believe that the answer here is to figure out how to create superintelligent A.I.such that even if – when – it escapes, it is still safe because it is fundamentally on our side because it shares our values.I see no way around this difficult problem.Now, I&#39;m actually fairly optimistic that this problem can be solved.We wouldn&#39;t have to write down a long list of everything we care about, or worse yet, spell it out in some computer language like C++ or Python, that would be a task beyond hopeless.Instead, we would create an A.I.that uses its intelligence to learn what we value, and its motivation system is constructed in such a way that it is motivated to pursue our values or to perform actions that it predicts we would approve of.We would thus leverage its intelligence as much as possible to solve the problem of value-loading.This can happen, and the outcome could be very good for humanity.But it doesn&#39;t happen automatically.The initial conditions for the intelligence explosion might need to be set up in just the right way if we are to have a controlled detonation.The values that the A.I. has need to match ours, not just in the familiar context, like where we can easily check how the A.I. behaves, but also in all novel contexts that the A.I. might encounter in the indefinite future.And there are also some esoteric issues that would need to be solved, sorted out: the exact details of its decision theory, how to deal with logical uncertainty and so forth.So the technical problems that need to be solved to make this work look quite difficult – not as difficult as making a superintelligent A.I., but fairly difficult.Here is the worry: Making superintelligent A.I.is a really hard challenge.Making superintelligent A.I. that is safe involves some additional challenge on top of that.The risk is that if somebody figures out how to crack the first challenge without also having cracked the additional challenge of ensuring perfect safety.So I think that we should work out a solution to the control problem in advance, so that we have it available by the time it is needed.Now it might be that we cannot solve the entire control problem in advance because maybe some elements can only be put in place once you know the details of the architecture where it will be implemented.But the more of the control problem that we solve in advance, the better the odds that the transition to the machine intelligence era will go well.This to me looks like a thing that is well worth doing and I can imagine that if things turn out okay, that people a million years from now look back at this century and it might well be that they say that the one thing we did that really mattered was to get this thing right.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(19)　より安全なAIを創造するための3つの原則 [Video]","slug":"ted-talks-programming-everyone-must-watch-19","date":"2018-01-19T22:00:01.000Z","updated":"2018-01-19T22:00:01.115Z","comments":true,"path":"2018/01/19/ted-talks-programming-everyone-must-watch-19/","link":"","permalink":"https://so-matome.net2018/01/19/ted-talks-programming-everyone-must-watch-19/","excerpt":"スチュアート・ラッセル：より安全なAIを創造するための3つの原則MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第19段は「スチュアート・ラッセル：より安全なAIを創造するための3つの原則」。以下のように紹介されています：\n\n未確認のままにしておくと、超知能AIの成長は人類の大惨事を誘発する可能性がある。 この17分間のTEDトークでは、ラッセルはAIに問題解決能力を持たせながらも、ある意味人類の価値観に沿った形で開発をガイドさせるための、ビジョンと一連のガイドラインを提示します。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"スチュアート・ラッセル：より安全なAIを創造するための3つの原則MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第19段は「スチュアート・ラッセル：より安全なAIを創造するための3つの原則」。以下のように紹介されています： 未確認のままにしておくと、超知能AIの成長は人類の大惨事を誘発する可能性がある。 この17分間のTEDトークでは、ラッセルはAIに問題解決能力を持たせながらも、ある意味人類の価値観に沿った形で開発をガイドさせるための、ビジョンと一連のガイドラインを提示します。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： This is Lee Sedol. Lee Sedol is one of the world’s greatest Go players, and he’s having what my friends in Silicon Valley call a “Holy Cow” moment –(Laughter)a moment where we realize that AI is actually progressing a lot faster than we expected. So humans have lost on the Go board. What about the real world?Well, the real world is much bigger, much more complicated than the Go board. It’s a lot less visible, but it’s still a decision problem. And if we think about some of the technologies that are coming down the pike … Noriko [Arai] mentioned that reading is not yet happening in machines, at least with understanding. But that will happen, and when that happens, very soon afterwards, machines will have read everything that the human race has ever written. And that will enable machines, along with the ability to look further ahead than humans can, as we’ve already seen in Go, if they also have access to more information, they’ll be able to make better decisions in the real world than we can. So is that a good thing? Well, I hope so.Our entire civilization, everything that we value, is based on our intelligence. And if we had access to a lot more intelligence, then there’s really no limit to what the human race can do. And I think this could be, as some people have described it, the biggest event in human history. So why are people saying things like this, that AI might spell the end of the human race? Is this a new thing? Is it just Elon Musk and Bill Gates and Stephen Hawking?Actually, no. This idea has been around for a while. Here’s a quotation: “Even if we could keep the machines in a subservient position, for instance, by turning off the power at strategic moments” – and I’ll come back to that “turning off the power” idea later on – “we should, as a species, feel greatly humbled.” So who said this? This is Alan Turing in 1951. Alan Turing, as you know, is the father of computer science and in many ways, the father of AI as well. So if we think about this problem, the problem of creating something more intelligent than your own species, we might call this “the gorilla problem,” because gorillas’ ancestors did this a few million years ago, and now we can ask the gorillas: Was this a good idea?So here they are having a meeting to discuss whether it was a good idea, and after a little while, they conclude, no, this was a terrible idea. Our species is in dire straits. In fact, you can see the existential sadness in their eyes.(Laughter)So this queasy feeling that making something smarter than your own species is maybe not a good idea – what can we do about that? Well, really nothing, except stop doing AI, and because of all the benefits that I mentioned and because I’m an AI researcher, I’m not having that. I actually want to be able to keep doing AI.So we actually need to nail down the problem a bit more. What exactly is the problem? Why is better AI possibly a catastrophe?So here’s another quotation: “We had better be quite sure that the purpose put into the machine is the purpose which we really desire.” This was said by Norbert Wiener in 1960, shortly after he watched one of the very early learning systems learn to play checkers better than its creator. But this could equally have been said by King Midas. King Midas said, “I want everything I touch to turn to gold,” and he got exactly what he asked for. That was the purpose that he put into the machine, so to speak, and then his food and his drink and his relatives turned to gold and he died in misery and starvation. So we’ll call this “the King Midas problem” of stating an objective which is not, in fact, truly aligned with what we want. In modern terms, we call this “the value alignment problem.”Putting in the wrong objective is not the only part of the problem. There’s another part. If you put an objective into a machine, even something as simple as, “Fetch the coffee,” the machine says to itself, “Well, how might I fail to fetch the coffee? Someone might switch me off. OK, I have to take steps to prevent that. I will disable my ‘off’ switch. I will do anything to defend myself against interference with this objective that I have been given.” So this single-minded pursuit in a very defensive mode of an objective that is, in fact, not aligned with the true objectives of the human race – that’s the problem that we face. And in fact, that’s the high-value takeaway from this talk. If you want to remember one thing, it’s that you can’t fetch the coffee if you’re dead.(Laughter)It’s very simple. Just remember that. Repeat it to yourself three times a day.(Laughter)And in fact, this is exactly the plot of “2001: [A Space Odyssey]” HAL has an objective, a mission, which is not aligned with the objectives of the humans, and that leads to this conflict. Now fortunately, HAL is not superintelligent. He’s pretty smart, but eventually Dave outwits him and manages to switch him off. But we might not be so lucky. So what are we going to do?I’m trying to redefine AI to get away from this classical notion of machines that intelligently pursue objectives. There are three principles involved. The first one is a principle of altruism, if you like, that the robot’s only objective is to maximize the realization of human objectives, of human values. And by values here I don’t mean touchy-feely, goody-goody values. I just mean whatever it is that the human would prefer their life to be like. And so this actually violates Asimov’s law that the robot has to protect its own existence. It has no interest in preserving its existence whatsoever.The second law is a law of humility, if you like. And this turns out to be really important to make robots safe. It says that the robot does not know what those human values are, so it has to maximize them, but it doesn’t know what they are. And that avoids this problem of single-minded pursuit of an objective. This uncertainty turns out to be crucial.Now, in order to be useful to us, it has to have some idea of what we want. It obtains that information primarily by observation of human choices, so our own choices reveal information about what it is that we prefer our lives to be like. So those are the three principles. Let’s see how that applies to this question of: “Can you switch the machine off?” as Turing suggested.So here’s a PR2 robot. This is one that we have in our lab, and it has a big red “off” switch right on the back. The question is: Is it going to let you switch it off? If we do it the classical way, we give it the objective of, “Fetch the coffee, I must fetch the coffee, I can’t fetch the coffee if I’m dead,” so obviously the PR2 has been listening to my talk, and so it says, therefore, “I must disable my ‘off’ switch, and probably taser all the other people in Starbucks who might interfere with me.”(Laughter)So this seems to be inevitable, right? This kind of failure mode seems to be inevitable, and it follows from having a concrete, definite objective.So what happens if the machine is uncertain about the objective? Well, it reasons in a different way. It says, “OK, the human might switch me off, but only if I’m doing something wrong. Well, I don’t really know what wrong is, but I know that I don’t want to do it.” So that’s the first and second principles right there. “So I should let the human switch me off.” And in fact you can calculate the incentive that the robot has to allow the human to switch it off, and it’s directly tied to the degree of uncertainty about the underlying objective.And then when the machine is switched off, that third principle comes into play. It learns something about the objectives it should be pursuing, because it learns that what it did wasn’t right. In fact, we can, with suitable use of Greek symbols, as mathematicians usually do, we can actually prove a theorem that says that such a robot is provably beneficial to the human. You are provably better off with a machine that’s designed in this way than without it. So this is a very simple example, but this is the first step in what we’re trying to do with human-compatible AI.Now, this third principle, I think is the one that you’re probably scratching your head over. You’re probably thinking, “Well, you know, I behave badly. I don’t want my robot to behave like me. I sneak down in the middle of the night and take stuff from the fridge. I do this and that.” There’s all kinds of things you don’t want the robot doing. But in fact, it doesn’t quite work that way. Just because you behave badly doesn’t mean the robot is going to copy your behavior. It’s going to understand your motivations and maybe help you resist them, if appropriate. But it’s still difficult. What we’re trying to do, in fact, is to allow machines to predict for any person and for any possible life that they could live, and the lives of everybody else: Which would they prefer? And there are many, many difficulties involved in doing this; I don’t expect that this is going to get solved very quickly. The real difficulties, in fact, are us.As I have already mentioned, we behave badly. In fact, some of us are downright nasty. Now the robot, as I said, doesn’t have to copy the behavior. The robot does not have any objective of its own. It’s purely altruistic. And it’s not designed just to satisfy the desires of one person, the user, but in fact it has to respect the preferences of everybody. So it can deal with a certain amount of nastiness, and it can even understand that your nastiness, for example, you may take bribes as a passport official because you need to feed your family and send your kids to school. It can understand that; it doesn’t mean it’s going to steal. In fact, it’ll just help you send your kids to school.We are also computationally limited. Lee Sedol is a brilliant Go player, but he still lost. So if we look at his actions, he took an action that lost the game. That doesn’t mean he wanted to lose. So to understand his behavior, we actually have to invert through a model of human cognition that includes our computational limitations – a very complicated model. But it’s still something that we can work on understanding.Probably the most difficult part, from my point of view as an AI researcher, is the fact that there are lots of us, and so the machine has to somehow trade off, weigh up the preferences of many different people, and there are different ways to do that. Economists, sociologists, moral philosophers have understood that, and we are actively looking for collaboration.Let’s have a look and see what happens when you get that wrong. So you can have a conversation, for example, with your intelligent personal assistant that might be available in a few years’ time. Think of a Siri on steroids. So Siri says, “Your wife called to remind you about dinner tonight.” And of course, you’ve forgotten. “What? What dinner? What are you talking about?”“Uh, your 20th anniversary at 7pm.”“I can’t do that. I’m meeting with the secretary-general at 7:30. How could this have happened?”“Well, I did warn you, but you overrode my recommendation.”“Well, what am I going to do? I can’t just tell him I’m too busy.”“Don’t worry. I arranged for his plane to be delayed.”(Laughter)“Some kind of computer malfunction.”(Laughter)“Really? You can do that?”“He sends his profound apologies and looks forward to meeting you for lunch tomorrow.”(Laughter)So the values here – there’s a slight mistake going on. This is clearly following my wife’s values which is “Happy wife, happy life.”(Laughter)It could go the other way. You could come home after a hard day’s work, and the computer says, “Long day?”“Yes, I didn’t even have time for lunch.”“You must be very hungry.”“Starving, yeah. Could you make some dinner?”“There’s something I need to tell you.”(Laughter)“There are humans in South Sudan who are in more urgent need than you.”(Laughter)“So I’m leaving. Make your own dinner.”(Laughter)So we have to solve these problems, and I’m looking forward to working on them.There are reasons for optimism. One reason is, there is a massive amount of data. Because remember – I said they’re going to read everything the human race has ever written. Most of what we write about is human beings doing things and other people getting upset about it. So there’s a massive amount of data to learn from.There’s also a very strong economic incentive to get this right. So imagine your domestic robot’s at home. You’re late from work again and the robot has to feed the kids, and the kids are hungry and there’s nothing in the fridge. And the robot sees the cat.(Laughter)And the robot hasn’t quite learned the human value function properly, so it doesn’t understand the sentimental value of the cat outweighs the nutritional value of the cat.(Laughter)So then what happens? Well, it happens like this: “Deranged robot cooks kitty for family dinner.” That one incident would be the end of the domestic robot industry. So there’s a huge incentive to get this right long before we reach superintelligent machines.So to summarize: I’m actually trying to change the definition of AI so that we have provably beneficial machines. And the principles are: machines that are altruistic, that want to achieve only our objectives, but that are uncertain about what those objectives are, and will watch all of us to learn more about what it is that we really want. And hopefully in the process, we will learn to be better people. Thank you very much.(Applause)Chris Anderson: So interesting, Stuart. We’re going to stand here a bit because I think they’re setting up for our next speaker.A couple of questions. So the idea of programming in ignorance seems intuitively really powerful. As you get to superintelligence, what’s going to stop a robot reading literature and discovering this idea that knowledge is actually better than ignorance and still just shifting its own goals and rewriting that programming?Stuart Russell: Yes, so we want it to learn more, as I said, about our objectives. It’ll only become more certain as it becomes more correct, so the evidence is there and it’s going to be designed to interpret it correctly. It will understand, for example, that books are very biased in the evidence they contain. They only talk about kings and princes and elite white male people doing stuff. So it’s a complicated problem, but as it learns more about our objectives it will become more and more useful to us.CA: And you couldn’t just boil it down to one law, you know, hardwired in: “if any human ever tries to switch me off, I comply. I comply.”SR: Absolutely not. That would be a terrible idea. So imagine that you have a self-driving car and you want to send your five-year-old off to preschool. Do you want your five-year-old to be able to switch off the car while it’s driving along? Probably not. So it needs to understand how rational and sensible the person is. The more rational the person, the more willing you are to be switched off. If the person is completely random or even malicious, then you’re less willing to be switched off.CA: All right. Stuart, can I just say, I really, really hope you figure this out for us. Thank you so much for that talk. That was amazing.SR: Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(20)　「感情を示す」ロボット [Video]","slug":"ted-talks-programming-everyone-must-watch-20","date":"2018-01-12T22:00:01.000Z","updated":"2018-01-12T22:00:01.892Z","comments":true,"path":"2018/01/12/ted-talks-programming-everyone-must-watch-20/","link":"","permalink":"https://so-matome.net2018/01/12/ted-talks-programming-everyone-must-watch-20/","excerpt":"David Hanson：「感情を示す」ロボットMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。最後の第20段は「David Hanson：「感情を示す」ロボット」。以下のように紹介されています：\n\n超知能AIは考えるのが怖いですが、人間の感情を理解し模倣できる知的AIはまだ実現できていません。この7分間のTEDトークは、すでに実現していることを示し、今後10〜20年間に期待できることを予想してみるものです。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"David Hanson：「感情を示す」ロボットMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。最後の第20段は「David Hanson：「感情を示す」ロボット」。以下のように紹介されています： 超知能AIは考えるのが怖いですが、人間の感情を理解し模倣できる知的AIはまだ実現できていません。この7分間のTEDトークは、すでに実現していることを示し、今後10〜20年間に期待できることを予想してみるものです。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： I&#39;m Dr. David Hanson, and I build robots with character.And by that, I mean that I develop robots that are characters, but also robots that will eventually come to empathize with you.So we&#39;re starting with a variety of technologies that have converged into these conversational character robots that can see faces, make eye contact with you, make a full range of facial expressions, understand speech and begin to model how you&#39;re feeling and who you are, and build a relationship with you.I developed a series of technologies that allowed the robots to make more realistic facial expressions than previously achieved, on lower power, which enabled the walking biped robots, the first androids.So, it&#39;s a full range of facial expressions simulating all the major muscles in the human face, running on very small batteries, extremely lightweight.The materials that allowed the battery-operated facial expressions is a material that we call Frubber, and it actually has three major innovations in the material that allow this to happen.One is hierarchical pores, and the other is a macro-molecular nanoscale porosity in the material.There he&#39;s starting to walk.This is at the Korean Advanced Institute of Science and Technology.I built the head. They built the body.So the goal here is to achieve sentience in machines, and not just sentience, but empathy.We&#39;re working with the Machine Perception Laboratory at the U.C. San Diego.They have this really remarkable facial expression technology that recognizes facial expressions, what facial expressions you&#39;re making.It also recognizes where you&#39;re looking, your head orientation.We&#39;re emulating all the major facial expressions, and then controlling it with the software that we call the Character Engine.And here is a little bit of the technology that&#39;s involved in that.In fact, right now – plug it from here, and then plug it in here, and now let&#39;s see if it gets my facial expressions.Okay. So I&#39;m smiling.(Laughter) Now I&#39;m frowning.And this is really heavily backlit.Okay, here we go.Oh, it&#39;s so sad.Okay, so you smile, frowning.So his perception of your emotional states is very important for machines to effectively become empathetic.Machines are becoming devastatingly capable of things like killing. Right?Those machines have no place for empathy.And there is billions of dollars being spent on that.Character robotics could plant the seed for robots that actually have empathy.So, if they achieve human level intelligence or, quite possibly, greater than human levels of intelligence, this could be the seeds of hope for our future.So, we&#39;ve made 20 robots in the last eight years, during the course of getting my Ph.D.And then I started Hanson Robotics, which has been developing these things for mass manufacturing.This is one of our robots that we showed at Wired NextFest a couple of years ago.And it sees multiple people in a scene, remembers where individual people are, and looks from person to person, remembering people.So, we&#39;re involving two things.One, the perception of people, and two, the natural interface, the natural form of the interface, so that it&#39;s more intuitive for you to interact with the robot.You start to believe that it&#39;s alive and aware.So one of my favorite projects was bringing all this stuff together in an artistic display of an android portrait of science-fiction writer Philip K. Dick, who wrote great works like, &quot;Do Androids Dream of Electric Sheep?&quot;which was the basis of the movie &quot;Bladerunner.&quot;In these stories, robots often think that they&#39;re human, and they sort of come to life.So we put his writings, letters, his interviews, correspondences, into a huge database of thousands of pages, and then used some natural language processing to allow you to actually have a conversation with him.And it was kind of spooky, because he would say these things that just sounded like they really understood you.And this is one of the most exciting projects that we&#39;re developing, which is a little character that&#39;s a spokesbot for friendly artificial intelligence, friendly machine intelligence.And we&#39;re getting this mass-manufactured.We specked it out to actually be doable with a very, very low-cost bill of materials, so that it can become a childhood companion for kids.Interfacing with the Internet, it gets smarter over the years.As artificial intelligence evolves, so does his intelligence.Chris Anderson: Thank you so much. That&#39;s incredible.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(3)　学校は創造性を殺すのか？ [Video]","slug":"ted-talks-programming-everyone-must-watch-3","date":"2018-01-05T22:00:01.000Z","updated":"2018-01-05T22:00:01.834Z","comments":true,"path":"2018/01/05/ted-talks-programming-everyone-must-watch-3/","link":"","permalink":"https://so-matome.net2018/01/05/ted-talks-programming-everyone-must-watch-3/","excerpt":"ケン・ロビンソン：学校は創造性を殺すのか？MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第３段は「ケン・ロビンソン：学校は創造性を殺すのか？」。以下のように紹介されています：\n\n「あなたが間違っていることを恐れないなら、オリジナルなものは何も出てこないだろう。」　この20分間のTED Talkはプログラミングには一度も言及していませんが、議論されている内容のすべてがプログラマーにとって非常に重要です。プログラミングが非常に創造的であり、創造性がなければ成功することができないということを忘れるのは簡単なのだから。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ケン・ロビンソン：学校は創造性を殺すのか？MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第３段は「ケン・ロビンソン：学校は創造性を殺すのか？」。以下のように紹介されています： 「あなたが間違っていることを恐れないなら、オリジナルなものは何も出てこないだろう。」 この20分間のTED Talkはプログラミングには一度も言及していませんが、議論されている内容のすべてがプログラマーにとって非常に重要です。プログラミングが非常に創造的であり、創造性がなければ成功することができないということを忘れるのは簡単なのだから。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： Good morning. How are you?(Laughter) It&#39;s been great, hasn&#39;t it?I&#39;ve been blown away by the whole thing.In fact, I&#39;m leaving.(Laughter) There have been three themes running through the conference which are relevant to what I want to talk about.One is the extraordinary evidence of human creativity in all of the presentations that we&#39;ve had and in all of the people here.Just the variety of it and the range of it.The second is that it&#39;s put us in a place where we have no idea what&#39;s going to happen, in terms of the future.No idea how this may play out.I have an interest in education.Actually, what I find is everybody has an interest in education.Don&#39;t you?I find this very interesting.If you&#39;re at a dinner party, and you say you work in education – Actually, you&#39;re not often at dinner parties, frankly.(Laughter) If you work in education, you&#39;re not asked.(Laughter) And you&#39;re never asked back, curiously.That&#39;s strange to me.But if you are, and you say to somebody, you know, they say, &quot;What do you do?&quot;and you say you work in education, you can see the blood run from their face.They&#39;re like, &quot;Oh my God,&quot; you know, &quot;Why me?&quot;(Laughter) &quot;My one night out all week.&quot;(Laughter) But if you ask about their education, they pin you to the wall.Because it&#39;s one of those things that goes deep with people, am I right?Like religion, and money and other things.So I have a big interest in education, and I think we all do.We have a huge vested interest in it, partly because it&#39;s education that&#39;s meant to take us into this future that we can&#39;t grasp.If you think of it, children starting school this year will be retiring in 2065.Nobody has a clue, despite all the expertise that&#39;s been on parade for the past four days, what the world will look like in five years&#39; time.And yet we&#39;re meant to be educating them for it.So the unpredictability, I think, is extraordinary.And the third part of this is that we&#39;ve all agreed, nonetheless, on the really extraordinary capacities that children have – their capacities for innovation.I mean, Sirena last night was a marvel, wasn&#39;t she?Just seeing what she could do.And she&#39;s exceptional, but I think she&#39;s not, so to speak, exceptional in the whole of childhood.What you have there is a person of extraordinary dedication who found a talent.And my contention is, all kids have tremendous talents.And we squander them, pretty ruthlessly.So I want to talk about education and I want to talk about creativity.My contention is that creativity now is as important in education as literacy, and we should treat it with the same status.(Applause) Thank you.(Applause) That was it, by the way.Thank you very much.(Laughter) So, 15 minutes left.(Laughter) Well, I was born… no.(Laughter) I heard a great story recently – I love telling it – of a little girl who was in a drawing lesson.She was six, and she was at the back, drawing, and the teacher said this girl hardly ever paid attention, and in this drawing lesson, she did.The teacher was fascinated.She went over to her, and she said, &quot;What are you drawing?&quot;And the girl said, &quot;I&#39;m drawing a picture of God.&quot;And the teacher said, &quot;But nobody knows what God looks like.&quot;And the girl said, &quot;They will, in a minute.&quot;(Laughter) When my son was four in England – Actually, he was four everywhere, to be honest.(Laughter) If we&#39;re being strict about it, wherever he went, he was four that year.He was in the Nativity play.Do you remember the story?(Laughter) No, it was big, it was a big story.Mel Gibson did the sequel, you may have seen it.(Laughter) &quot;Nativity II.&quot;But James got the part of Joseph, which we were thrilled about.We considered this to be one of the lead parts.We had the place crammed full of agents in T-shirts: &quot;James Robinson IS Joseph!&quot; (Laughter) He didn&#39;t have to speak, but you know the bit where the three kings come in?They come in bearing gifts, gold, frankincense and myrrh.This really happened.We were sitting there and I think they just went out of sequence, because we talked to the little boy afterward and we said, &quot;You OK with that?&quot; And he said, &quot;Yeah, why? Was that wrong?&quot;They just switched.The three boys came in, four-year-olds with tea towels on their heads, and they put these boxes down, and the first boy said, &quot;I bring you gold.&quot;And the second boy said, &quot;I bring you myrrh.&quot;And the third boy said, &quot;Frank sent this.&quot;(Laughter) What these things have in common is that kids will take a chance.If they don&#39;t know, they&#39;ll have a go.Am I right? They&#39;re not frightened of being wrong.I don&#39;t mean to say that being wrong is the same thing as being creative.What we do know is, if you&#39;re not prepared to be wrong, you&#39;ll never come up with anything original – if you&#39;re not prepared to be wrong.And by the time they get to be adults, most kids have lost that capacity.They have become frightened of being wrong.And we run our companies like this.We stigmatize mistakes.And we&#39;re now running national education systems where mistakes are the worst thing you can make.And the result is that we are educating people out of their creative capacities.Picasso once said this, he said that all children are born artists.The problem is to remain an artist as we grow up.I believe this passionately, that we don&#39;t grow into creativity, we grow out of it.Or rather, we get educated out of it.So why is this?I lived in Stratford-on-Avon until about five years ago.In fact, we moved from Stratford to Los Angeles.So you can imagine what a seamless transition that was.(Laughter) Actually, we lived in a place called Snitterfield, just outside Stratford, which is where Shakespeare&#39;s father was born.Are you struck by a new thought? I was.You don&#39;t think of Shakespeare having a father, do you?Do you? Because you don&#39;t think of Shakespeare being a child, do you?Shakespeare being seven?I never thought of it.I mean, he was seven at some point.He was in somebody&#39;s English class, wasn&#39;t he?(Laughter) How annoying would that be?(Laughter) &quot;Must try harder.&quot;(Laughter) Being sent to bed by his dad, you know, to Shakespeare, &quot;Go to bed, now!And put the pencil down.&quot;(Laughter) &quot;And stop speaking like that.&quot;(Laughter) &quot;It&#39;s confusing everybody.&quot;(Laughter) Anyway, we moved from Stratford to Los Angeles, and I just want to say a word about the transition.My son didn&#39;t want to come.I&#39;ve got two kids; he&#39;s 21 now, my daughter&#39;s 16.He didn&#39;t want to come to Los Angeles.He loved it, but he had a girlfriend in England.This was the love of his life, Sarah.He&#39;d known her for a month.(Laughter) Mind you, they&#39;d had their fourth anniversary, because it&#39;s a long time when you&#39;re 16.He was really upset on the plane, he said, &quot;I&#39;ll never find another girl like Sarah.&quot;And we were rather pleased about that, frankly – (Laughter) Because she was the main reason we were leaving the country.(Laughter) But something strikes you when you move to America and travel around the world: Every education system on Earth has the same hierarchy of subjects.Every one. Doesn&#39;t matter where you go.You&#39;d think it would be otherwise, but it isn&#39;t.At the top are mathematics and languages, then the humanities, and at the bottom are the arts.Everywhere on Earth.And in pretty much every system too, there&#39;s a hierarchy within the arts.Art and music are normally given a higher status in schools than drama and dance.There isn&#39;t an education system on the planet that teaches dance everyday to children the way we teach them mathematics. Why?Why not? I think this is rather important.I think math is very important, but so is dance.Children dance all the time if they&#39;re allowed to, we all do.We all have bodies, don&#39;t we?Did I miss a meeting?(Laughter) Truthfully, what happens is, as children grow up, we start to educate them progressively from the waist up.And then we focus on their heads.And slightly to one side.If you were to visit education, as an alien, and say &quot;What&#39;s it for, public education?&quot;I think you&#39;d have to conclude, if you look at the output, who really succeeds by this, who does everything that they should, who gets all the brownie points, who are the winners – I think you&#39;d have to conclude the whole purpose of public education throughout the world is to produce university professors.Isn&#39;t it?They&#39;re the people who come out the top.And I used to be one, so there.(Laughter) And I like university professors, but you know, we shouldn&#39;t hold them up as the high-water mark of all human achievement.They&#39;re just a form of life, another form of life.But they&#39;re rather curious, and I say this out of affection for them.There&#39;s something curious about professors in my experience – not all of them, but typically, they live in their heads.They live up there, and slightly to one side.They&#39;re disembodied, you know, in a kind of literal way.They look upon their body as a form of transport for their heads.(Laughter) Don&#39;t they?It&#39;s a way of getting their head to meetings.(Laughter) If you want real evidence of out-of-body experiences, get yourself along to a residential conference of senior academics, and pop into the discotheque on the final night.(Laughter) And there, you will see it.Grown men and women writhing uncontrollably, off the beat.(Laughter) Waiting until it ends so they can go home and write a paper about it.(Laughter) Our education system is predicated on the idea of academic ability.And there&#39;s a reason.Around the world, there were no public systems of education, really, before the 19th century.They all came into being to meet the needs of industrialism.So the hierarchy is rooted on two ideas.Number one, that the most useful subjects for work are at the top.So you were probably steered benignly away from things at school when you were a kid, things you liked, on the grounds that you would never get a job doing that. Is that right?Don&#39;t do music, you&#39;re not going to be a musician; don&#39;t do art, you won&#39;t be an artist.Benign advice – now, profoundly mistaken.The whole world is engulfed in a revolution.And the second is academic ability, which has really come to dominate our view of intelligence, because the universities designed the system in their image.If you think of it, the whole system of public education around the world is a protracted process of university entrance.And the consequence is that many highly-talented, brilliant, creative people think they&#39;re not, because the thing they were good at at school wasn&#39;t valued, or was actually stigmatized.And I think we can&#39;t afford to go on that way.In the next 30 years, according to UNESCO, more people worldwide will be graduating through education than since the beginning of history.More people, and it&#39;s the combination of all the things we&#39;ve talked about – technology and its transformation effect on work, and demography and the huge explosion in population.Suddenly, degrees aren&#39;t worth anything.Isn&#39;t that true?When I was a student, if you had a degree, you had a job.If you didn&#39;t have a job, it&#39;s because you didn&#39;t want one.And I didn&#39;t want one, frankly. (Laughter) But now kids with degrees are often heading home to carry on playing video games, because you need an MA where the previous job required a BA, and now you need a PhD for the other.It&#39;s a process of academic inflation.And it indicates the whole structure of education is shifting beneath our feet.We need to radically rethink our view of intelligence.We know three things about intelligence.One, it&#39;s diverse.We think about the world in all the ways that we experience it.We think visually, we think in sound, we think kinesthetically.We think in abstract terms, we think in movement.Secondly, intelligence is dynamic.If you look at the interactions of a human brain, as we heard yesterday from a number of presentations, intelligence is wonderfully interactive.The brain isn&#39;t divided into compartments.In fact, creativity – which I define as the process of having original ideas that have value – more often than not comes about through the interaction of different disciplinary ways of seeing things.By the way, there&#39;s a shaft of nerves that joins the two halves of the brain called the corpus callosum.It&#39;s thicker in women.Following off from Helen yesterday, this is probably why women are better at multi-tasking.Because you are, aren&#39;t you?There&#39;s a raft of research, but I know it from my personal life.If my wife is cooking a meal at home – which is not often, thankfully.(Laughter) No, she&#39;s good at some things, but if she&#39;s cooking, she&#39;s dealing with people on the phone, she&#39;s talking to the kids, she&#39;s painting the ceiling, she&#39;s doing open-heart surgery over here.If I&#39;m cooking, the door is shut, the kids are out, the phone&#39;s on the hook, if she comes in I get annoyed.I say, &quot;Terry, please, I&#39;m trying to fry an egg in here.&quot;(Laughter) &quot;Give me a break.&quot;(Laughter) Actually, do you know that old philosophical thing, if a tree falls in a forest and nobody hears it, did it happen?Remember that old chestnut?I saw a great t-shirt recently, which said, &quot;If a man speaks his mind in a forest, and no woman hears him, is he still wrong?&quot;(Laughter) And the third thing about intelligence is, it&#39;s distinct.I&#39;m doing a new book at the moment called &quot;Epiphany,&quot; which is based on a series of interviews with people about how they discovered their talent.I&#39;m fascinated by how people got to be there.It&#39;s really prompted by a conversation I had with a wonderful woman who maybe most people have never heard of, Gillian Lynne.Have you heard of her? Some have.She&#39;s a choreographer, and everybody knows her work.She did &quot;Cats&quot; and &quot;Phantom of the Opera.&quot;She&#39;s wonderful.I used to be on the board of The Royal Ballet, as you can see.Anyway, Gillian and I had lunch one day and I said, &quot;How did you get to be a dancer?&quot;It was interesting.When she was at school, she was really hopeless.And the school, in the &#39;30s, wrote to her parents and said, &quot;We think Gillian has a learning disorder.&quot;She couldn&#39;t concentrate; she was fidgeting.I think now they&#39;d say she had ADHD.Wouldn&#39;t you?But this was the 1930s, and ADHD hadn&#39;t been invented at this point.It wasn&#39;t an available condition.(Laughter) People weren&#39;t aware they could have that.(Laughter) Anyway, she went to see this specialist.So, this oak-paneled room, and she was there with her mother, and she was led and sat on this chair at the end, and she sat on her hands for 20 minutes while this man talked to her mother about the problems Gillian was having at school.Because she was disturbing people; her homework was always late; and so on, little kid of eight.In the end, the doctor went and sat next to Gillian, and said, &quot;I&#39;ve listened to all these things your mother&#39;s told me, I need to speak to her privately.Wait here. We&#39;ll be back; we won&#39;t be very long,&quot; and they went and left her.But as they went out of the room, he turned on the radio that was sitting on his desk.And when they got out, he said to her mother, &quot;Just stand and watch her.&quot;And the minute they left the room, she was on her feet, moving to the music.And they watched for a few minutes and he turned to her mother and said, &quot;Mrs. Lynne, Gillian isn&#39;t sick; she&#39;s a dancer.Take her to a dance school.&quot;I said, &quot;What happened?&quot;She said, &quot;She did. I can&#39;t tell you how wonderful it was.We walked in this room and it was full of people like me.People who couldn&#39;t sit still.People who had to move to think.&quot;Who had to move to think.They did ballet, they did tap, jazz; they did modern; they did contemporary.She was eventually auditioned for the Royal Ballet School; she became a soloist; she had a wonderful career at the Royal Ballet.She eventually graduated from the Royal Ballet School, founded the Gillian Lynne Dance Company, met Andrew Lloyd Webber.She&#39;s been responsible for some of the most successful musical theater productions in history, she&#39;s given pleasure to millions, and she&#39;s a multi-millionaire.Somebody else might have put her on medication and told her to calm down.(Applause) What I think it comes to is this: Al Gore spoke the other night about ecology and the revolution that was triggered by Rachel Carson.I believe our only hope for the future is to adopt a new conception of human ecology, one in which we start to reconstitute our conception of the richness of human capacity.Our education system has mined our minds in the way that we strip-mine the earth: for a particular commodity.And for the future, it won&#39;t serve us.We have to rethink the fundamental principles on which we&#39;re educating our children.There was a wonderful quote by Jonas Salk, who said, &quot;If all the insects were to disappear from the Earth, within 50 years all life on Earth would end.If all human beings disappeared from the Earth, within 50 years all forms of life would flourish.&quot;And he&#39;s right.What TED celebrates is the gift of the human imagination.We have to be careful now that we use this gift wisely and that we avert some of the scenarios that we&#39;ve talked about.And the only way we&#39;ll do it is by seeing our creative capacities for the richness they are and seeing our children for the hope that they are.And our task is to educate their whole being, so they can face this future.By the way – we may not see this future, but they will.And our job is to help them make something of it.Thank you very much.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(4) 間違っているということについて [Video]","slug":"ted-talks-programming-everyone-must-watch-4","date":"2017-12-29T22:00:01.000Z","updated":"2017-12-29T22:00:01.520Z","comments":true,"path":"2017/12/29/ted-talks-programming-everyone-must-watch-4/","link":"","permalink":"https://so-matome.net2017/12/29/ted-talks-programming-everyone-must-watch-4/","excerpt":"キャサリン・シュルツ：間違っているということについてMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第４段は「キャサリン・シュルツ：間違っているということについて」。以下のように紹介されています：\n\nこの17分間のTED Talkは、Ken Robinsonが何を言っているのかを少し深めながら、別の角度から取り組んでいます。 私たちは成功を追求し、失敗を避けるように教育されていますが、真の成功は試練に失敗することを恐れないことから生まれてきます。 プログラマーは常に間違っています。私たちはそれを受け入れる必要があります。\nよかったら脳に関するこのTEDトークも見てみてください。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"キャサリン・シュルツ：間違っているということについてMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第４段は「キャサリン・シュルツ：間違っているということについて」。以下のように紹介されています： この17分間のTED Talkは、Ken Robinsonが何を言っているのかを少し深めながら、別の角度から取り組んでいます。 私たちは成功を追求し、失敗を避けるように教育されていますが、真の成功は試練に失敗することを恐れないことから生まれてきます。 プログラマーは常に間違っています。私たちはそれを受け入れる必要があります。 よかったら脳に関するこのTEDトークも見てみてください。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： So it&#39;s 1995, I&#39;m in college, and a friend and I go on a road trip from Providence, Rhode Island to Portland, Oregon.And you know, we&#39;re young and unemployed, so we do the whole thing on back roads through state parks and national forests – basically the longest route we can possibly take.And somewhere in the middle of South Dakota, I turn to my friend and I ask her a question that&#39;s been bothering me for 2,000 miles.&quot;What&#39;s up with the Chinese character I keep seeing by the side of the road?&quot;My friend looks at me totally blankly.There&#39;s actually a gentleman in the front row who&#39;s doing a perfect imitation of her look.(Laughter) And I&#39;m like, &quot;You know, all the signs we keep seeing with the Chinese character on them.&quot;She just stares at me for a few moments, and then she cracks up, because she figures out what I&#39;m talking about.And what I&#39;m talking about is this.(Laughter) Right, the famous Chinese character for picnic area.(Laughter) I&#39;ve spent the last five years of my life thinking about situations exactly like this – why we sometimes misunderstand the signs around us, and how we behave when that happens, and what all of this can tell us about human nature.In other words, as you heard Chris say, I&#39;ve spent the last five years thinking about being wrong.This might strike you as a strange career move, but it actually has one great advantage: no job competition.(Laughter) In fact, most of us do everything we can to avoid thinking about being wrong, or at least to avoid thinking about the possibility that we ourselves are wrong.We get it in the abstract.We all know everybody in this room makes mistakes.The human species, in general, is fallible – okay fine.But when it comes down to me, right now, to all the beliefs I hold, here in the present tense, suddenly all of this abstract appreciation of fallibility goes out the window – and I can&#39;t actually think of anything I&#39;m wrong about.And the thing is, the present tense is where we live.We go to meetings in the present tense; we go on family vacations in the present tense; we go to the polls and vote in the present tense.So effectively, we all kind of wind up traveling through life, trapped in this little bubble of feeling very right about everything.I think this is a problem.I think it&#39;s a problem for each of us as individuals, in our personal and professional lives, and I think it&#39;s a problem for all of us collectively as a culture.So what I want to do today is, first of all, talk about why we get stuck inside this feeling of being right.And second, why it&#39;s such a problem.And finally, I want to convince you that it is possible to step outside of that feeling and that if you can do so, it is the single greatest moral, intellectual and creative leap you can make.So why do we get stuck in this feeling of being right?One reason, actually, has to do with a feeling of being wrong.So let me ask you guys something – or actually, let me ask you guys something, because you&#39;re right here: How does it feel – emotionally – how does it feel to be wrong?Dreadful. Thumbs down.Embarrassing. Okay, wonderful, great.Dreadful, thumbs down, embarrassing – thank you, these are great answers, but they&#39;re answers to a different question.You guys are answering the question: How does it feel to realize you&#39;re wrong?(Laughter) Realizing you&#39;re wrong can feel like all of that and a lot of other things, right?I mean it can be devastating, it can be revelatory, it can actually be quite funny, like my stupid Chinese character mistake.But just being wrong doesn&#39;t feel like anything.I&#39;ll give you an analogy.Do you remember that Loony Tunes cartoon where there&#39;s this pathetic coyote who&#39;s always chasing and never catching a roadrunner?In pretty much every episode of this cartoon, there&#39;s a moment where the coyote is chasing the roadrunner and the roadrunner runs off a cliff, which is fine – he&#39;s a bird, he can fly.But the thing is, the coyote runs off the cliff right after him.And what&#39;s funny – at least if you&#39;re six years old – is that the coyote&#39;s totally fine too.He just keeps running – right up until the moment that he looks down and realizes that he&#39;s in mid-air.That&#39;s when he falls.When we&#39;re wrong about something – not when we realize it, but before that – we&#39;re like that coyote after he&#39;s gone off the cliff and before he looks down.You know, we&#39;re already wrong, we&#39;re already in trouble, but we feel like we&#39;re on solid ground.So I should actually correct something I said a moment ago.It does feel like something to be wrong; it feels like being right.(Laughter) So this is one reason, a structural reason, why we get stuck inside this feeling of rightness.I call this error blindness.Most of the time, we don&#39;t have any kind of internal cue to let us know that we&#39;re wrong about something, until it&#39;s too late.But there&#39;s a second reason that we get stuck inside this feeling as well – and this one is cultural.Think back for a moment to elementary school.You&#39;re sitting there in class, and your teacher is handing back quiz papers, and one of them looks like this.This is not mine, by the way.(Laughter) So there you are in grade school, and you know exactly what to think about the kid who got this paper.It&#39;s the dumb kid, the troublemaker, the one who never does his homework.So by the time you are nine years old, you&#39;ve already learned, first of all, that people who get stuff wrong are lazy, irresponsible dimwits – and second of all, that the way to succeed in life is to never make any mistakes.We learn these really bad lessons really well.And a lot of us – and I suspect, especially a lot of us in this room – deal with them by just becoming perfect little A students, perfectionists, over-achievers.Right, Mr. CFO, astrophysicist, ultra-marathoner?(Laughter) You&#39;re all CFO, astrophysicists, ultra-marathoners, it turns out.Okay, so fine.Except that then we freak out at the possibility that we&#39;ve gotten something wrong.Because according to this, getting something wrong means there&#39;s something wrong with us.So we just insist that we&#39;re right, because it makes us feel smart and responsible and virtuous and safe.So let me tell you a story.A couple of years ago, a woman comes into Beth Israel Deaconess Medical Center for a surgery.Beth Israel&#39;s in Boston.It&#39;s the teaching hospital for Harvard – one of the best hospitals in the country.So this woman comes in and she&#39;s taken into the operating room.She&#39;s anesthetized, the surgeon does his thing – stitches her back up, sends her out to the recovery room.Everything seems to have gone fine.And she wakes up, and she looks down at herself, and she says, &quot;Why is the wrong side of my body in bandages?&quot;Well the wrong side of her body is in bandages because the surgeon has performed a major operation on her left leg instead of her right one.When the vice president for health care quality at Beth Israel spoke about this incident, he said something very interesting.He said, &quot;For whatever reason, the surgeon simply felt that he was on the correct side of the patient.&quot;(Laughter) The point of this story is that trusting too much in the feeling of being on the correct side of anything can be very dangerous.This internal sense of rightness that we all experience so often is not a reliable guide to what is actually going on in the external world.And when we act like it is, and we stop entertaining the possibility that we could be wrong, well that&#39;s when we end up doing things like dumping 200 million gallons of oil into the Gulf of Mexico, or torpedoing the global economy.So this is a huge practical problem.But it&#39;s also a huge social problem.Think for a moment about what it means to feel right.It means that you think that your beliefs just perfectly reflect reality.And when you feel that way, you&#39;ve got a problem to solve, which is, how are you going to explain all of those people who disagree with you?It turns out, most of us explain those people the same way, by resorting to a series of unfortunate assumptions.The first thing we usually do when someone disagrees with us is we just assume they&#39;re ignorant.They don&#39;t have access to the same information that we do, and when we generously share that information with them, they&#39;re going to see the light and come on over to our team.When that doesn&#39;t work, when it turns out those people have all the same facts that we do and they still disagree with us, then we move on to a second assumption, which is that they&#39;re idiots.(Laughter) They have all the right pieces of the puzzle, and they are too moronic to put them together correctly.And when that doesn&#39;t work, when it turns out that people who disagree with us have all the same facts we do and are actually pretty smart, then we move on to a third assumption: they know the truth, and they are deliberately distorting it for their own malevolent purposes.So this is a catastrophe.This attachment to our own rightness keeps us from preventing mistakes when we absolutely need to and causes us to treat each other terribly.But to me, what&#39;s most baffling and most tragic about this is that it misses the whole point of being human.It&#39;s like we want to imagine that our minds are just these perfectly translucent windows and we just gaze out of them and describe the world as it unfolds.And we want everybody else to gaze out of the same window and see the exact same thing.That is not true, and if it were, life would be incredibly boring.The miracle of your mind isn&#39;t that you can see the world as it is.It&#39;s that you can see the world as it isn&#39;t.We can remember the past, and we can think about the future, and we can imagine what it&#39;s like to be some other person in some other place.And we all do this a little differently, which is why we can all look up at the same night sky and see this and also this and also this.And yeah, it is also why we get things wrong.1,200 years before Descartes said his famous thing about &quot;I think therefore I am,&quot; this guy, St. Augustine, sat down and wrote &quot;Fallor ergo sum&quot; – &quot;I err therefore I am.&quot;Augustine understood that our capacity to screw up, it&#39;s not some kind of embarrassing defect in the human system, something we can eradicate or overcome.It&#39;s totally fundamental to who we are.Because, unlike God, we don&#39;t really know what&#39;s going on out there.And unlike all of the other animals, we are obsessed with trying to figure it out.To me, this obsession is the source and root of all of our productivity and creativity.Last year, for various reasons, I found myself listening to a lot of episodes of the Public Radio show This American Life.And so I&#39;m listening and I&#39;m listening, and at some point, I start feeling like all the stories are about being wrong.And my first thought was, &quot;I&#39;ve lost it.I&#39;ve become the crazy wrongness lady.I just imagined it everywhere,&quot; which has happened.But a couple of months later, I actually had a chance to interview Ira Glass, who&#39;s the host of the show.And I mentioned this to him, and he was like, &quot;No actually, that&#39;s true.In fact,&quot; he says, &quot;as a staff, we joke that every single episode of our show has the same crypto-theme.And the crypto-theme is: &#39;I thought this one thing was going to happen and something else happened instead.&#39; And the thing is,&quot; says Ira Glass, &quot;we need this.We need these moments of surprise and reversal and wrongness to make these stories work.&quot;And for the rest of us, audience members, as listeners, as readers, we eat this stuff up.We love things like plot twists and red herrings and surprise endings.When it comes to our stories, we love being wrong.But, you know, our stories are like this because our lives are like this.We think this one thing is going to happen and something else happens instead.George Bush thought he was going to invade Iraq, find a bunch of weapons of mass destruction, liberate the people and bring democracy to the Middle East.And something else happened instead.And Hosni Mubarak thought he was going to be the dictator of Egypt for the rest of his life, until he got too old or too sick and could pass the reigns of power onto his son.And something else happened instead.And maybe you thought you were going to grow up and marry your high school sweetheart and move back to your hometown and raise a bunch of kids together.And something else happened instead.And I have to tell you that I thought I was writing an incredibly nerdy book about a subject everybody hates for an audience that would never materialize.And something else happened instead.(Laughter) I mean, this is life.For good and for ill, we generate these incredible stories about the world around us, and then the world turns around and astonishes us.No offense, but this entire conference is an unbelievable monument to our capacity to get stuff wrong.We just spent an entire week talking about innovations and advancements and improvements, but you know why we need all of those innovations and advancements and improvements?Because half the stuff that&#39;s the most mind-boggling and world-altering – TED 1998 – eh.(Laughter) Didn&#39;t really work out that way, did it?(Laughter) Where&#39;s my jet pack, Chris?(Laughter) (Applause) So here we are again.And that&#39;s how it goes.We come up with another idea.We tell another story.We hold another conference.The theme of this one, as you guys have now heard seven million times, is the rediscovery of wonder.And to me, if you really want to rediscover wonder, you need to step outside of that tiny, terrified space of rightness and look around at each other and look out at the vastness and complexity and mystery of the universe and be able to say, &quot;Wow, I don&#39;t know.Maybe I&#39;m wrong.&quot;Thank you.(Applause) Thank you guys.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(5)　イーロン・マスク：私たちが建築している未来 [Video]","slug":"ted-talks-programming-everyone-must-watch-5","date":"2017-12-22T22:00:01.000Z","updated":"2017-12-22T22:00:01.798Z","comments":true,"path":"2017/12/22/ted-talks-programming-everyone-must-watch-5/","link":"","permalink":"https://so-matome.net2017/12/22/ted-talks-programming-everyone-must-watch-5/","excerpt":"イーロン・マスク：私たちが建築している未来MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第5段はあの有名なイーロン・マスク、「私たちが建築している未来」。以下のように紹介されています：\n\nこの40分間のTEDトークは通常のフォーマットとはちょっと違い、プレゼンテーションの代わりに、インタビュー形式になっています。この現代の最大のイノベーターを突き動かす心とモチベーションを覗かせてくれるインタビューは、プログラミングは単なるコードではないということを教えてくれます。それは夢です。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"イーロン・マスク：私たちが建築している未来MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第5段はあの有名なイーロン・マスク、「私たちが建築している未来」。以下のように紹介されています： この40分間のTEDトークは通常のフォーマットとはちょっと違い、プレゼンテーションの代わりに、インタビュー形式になっています。この現代の最大のイノベーターを突き動かす心とモチベーションを覗かせてくれるインタビューは、プログラミングは単なるコードではないということを教えてくれます。それは夢です。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： Chris Anderson: Elon, hey, welcome back to TED. It’s great to have you here.Elon Musk: Thanks for having me.CA: So, in the next half hour or so, we’re going to spend some time exploring your vision for what an exciting future might look like, which I guess makes the first question a little ironic: Why are you boring?EM: Yeah. I ask myself that frequently. We’re trying to dig a hole under LA, and this is to create the beginning of what will hopefully be a 3D network of tunnels to alleviate congestion. So right now, one of the most soul-destroying things is traffic. It affects people in every part of the world. It takes away so much of your life. It’s horrible. It’s particularly horrible in LA.(Laughter)CA: I think you’ve brought with you the first visualization that’s been shown of this. Can I show this?EM: Yeah, absolutely. So this is the first time – Just to show what we’re talking about. So a couple of key things that are important in having a 3D tunnel network. First of all, you have to be able to integrate the entrance and exit of the tunnel seamlessly into the fabric of the city. So by having an elevator, sort of a car skate, that’s on an elevator, you can integrate the entrance and exits to the tunnel network just by using two parking spaces. And then the car gets on a skate. There’s no speed limit here, so we’re designing this to be able to operate at 200 kilometers an hour.CA: How much?EM: 200 kilometers an hour, or about 130 miles per hour. So you should be able to get from, say, Westwood to LAX in six minutes – five, six minutes.(Applause)CA: So possibly, initially done, it’s like on a sort of toll road-type basis.EM: Yeah.CA: Which, I guess, alleviates some traffic from the surface streets as well.EM: So, I don’t know if people noticed it in the video, but there’s no real limit to how many levels of tunnel you can have. You can go much further deep than you can go up. The deepest mines are much deeper than the tallest buildings are tall, so you can alleviate any arbitrary level of urban congestion with a 3D tunnel network. This is a very important point. So a key rebuttal to the tunnels is that if you add one layer of tunnels, that will simply alleviate congestion, it will get used up, and then you’ll be back where you started, back with congestion. But you can go to any arbitrary number of tunnels, any number of levels.CA: But people – seen traditionally, it’s incredibly expensive to dig, and that would block this idea.EM: Yeah. Well, they’re right. To give you an example, the LA subway extension, which is – I think it’s a two-and-a-half mile extension that was just completed for two billion dollars. So it’s roughly a billion dollars a mile to do the subway extension in LA. And this is not the highest utility subway in the world. So yeah, it’s quite difficult to dig tunnels normally. I think we need to have at least a tenfold improvement in the cost per mile of tunneling.CA: And how could you achieve that?EM: Actually, if you just do two things, you can get to approximately an order of magnitude improvement, and I think you can go beyond that. So the first thing to do is to cut the tunnel diameter by a factor of two or more. So a single road lane tunnel according to regulations has to be 26 feet, maybe 28 feet in diameter to allow for crashes and emergency vehicles and sufficient ventilation for combustion engine cars. But if you shrink that diameter to what we’re attempting, which is 12 feet, which is plenty to get an electric skate through, you drop the diameter by a factor of two and the cross-sectional area by a factor of four, and the tunneling cost scales with the cross-sectional area. So that’s roughly a half-order of magnitude improvement right there. Then tunneling machines currently tunnel for half the time, then they stop, and then the rest of the time is putting in reinforcements for the tunnel wall. So if you design the machine instead to do continuous tunneling and reinforcing, that will give you a factor of two improvement. Combine that and that’s a factor of eight. Also these machines are far from being at their power or thermal limits, so you can jack up the power to the machine substantially. I think you can get at least a factor of two, maybe a factor of four or five improvement on top of that. So I think there’s a fairly straightforward series of steps to get somewhere in excess of an order of magnitude improvement in the cost per mile, and our target actually is – we’ve got a pet snail called Gary, this is from Gary the snail from “South Park,” I mean, sorry, “SpongeBob SquarePants.”(Laughter)So Gary is capable of – currently he’s capable of going 14 times faster than a tunnel-boring machine.(Laughter)CA: You want to beat Gary.EM: We want to beat Gary.(Laughter)He’s not a patient little fellow, and that will be victory. Victory is beating the snail.CA: But a lot of people imagining, dreaming about future cities, they imagine that actually the solution is flying cars, drones, etc. You go aboveground. Why isn’t that a better solution? You save all that tunneling cost.EM: Right. I’m in favor of flying things. Obviously, I do rockets, so I like things that fly. This is not some inherent bias against flying things, but there is a challenge with flying cars in that they’ll be quite noisy, the wind force generated will be very high. Let’s just say that if something’s flying over your head, a whole bunch of flying cars going all over the place, that is not an anxiety-reducing situation.(Laughter)You don’t think to yourself, “Well, I feel better about today.” You’re thinking, “Did they service their hubcap, or is it going to come off and guillotine me?” Things like that.CA: So you’ve got this vision of future cities with these rich, 3D networks of tunnels underneath. Is there a tie-in here with Hyperloop? Could you apply these tunnels to use for this Hyperloop idea you released a few years ago.EM: Yeah, so we’ve been sort of puttering around with the Hyperloop stuff for a while. We built a Hyperloop test track adjacent to SpaceX, just for a student competition, to encourage innovative ideas in transport. And it actually ends up being the biggest vacuum chamber in the world after the Large Hadron Collider, by volume. So it was quite fun to do that, but it was kind of a hobby thing, and then we think we might – so we’ve built a little pusher car to push the student pods, but we’re going to try seeing how fast we can make the pusher go if it’s not pushing something. So we’re cautiously optimistic we’ll be able to be faster than the world’s fastest bullet train even in a .8-mile stretch.CA: Whoa. Good brakes.EM: Yeah, I mean, it’s – yeah. It’s either going to smash into tiny pieces or go quite fast.CA: But you can picture, then, a Hyperloop in a tunnel running quite long distances.EM: Exactly. And looking at tunneling technology, it turns out that in order to make a tunnel, you have to – In order to seal against the water table, you’ve got to typically design a tunnel wall to be good to about five or six atmospheres. So to go to vacuum is only one atmosphere, or near-vacuum. So actually, it sort of turns out that automatically, if you build a tunnel that is good enough to resist the water table, it is automatically capable of holding vacuum.CA: Huh.EM: So, yeah.CA: And so you could actually picture, what kind of length tunnel is in Elon’s future to running Hyperloop?EM: I think there’s no real length limit. You could dig as much as you want. I think if you were to do something like a DC-to-New York Hyperloop, I think you’d probably want to go underground the entire way because it’s a high-density area. You’re going under a lot of buildings and houses, and if you go deep enough, you cannot detect the tunnel. Sometimes people think, well, it’s going to be pretty annoying to have a tunnel dug under my house. Like, if that tunnel is dug more than about three or four tunnel diameters beneath your house, you will not be able to detect it being dug at all. In fact, if you’re able to detect the tunnel being dug, whatever device you are using, you can get a lot of money for that device from the Israeli military, who is trying to detect tunnels from Hamas, and from the US Customs and Border patrol that try and detect drug tunnels. So the reality is that earth is incredibly good at absorbing vibrations, and once the tunnel depth is below a certain level, it is undetectable. Maybe if you have a very sensitive seismic instrument, you might be able to detect it.CA: So you’ve started a new company to do this called The Boring Company. Very nice. Very funny.(Laughter)EM: What’s funny about that?(Laughter)CA: How much of your time is this?EM: It’s maybe … two or three percent.CA: You’ve bought a hobby. This is what an Elon Musk hobby looks like.(Laughter)EM: I mean, it really is, like – This is basically interns and people doing it part time. We bought some second-hand machinery. It’s kind of puttering along, but it’s making good progress, so –CA: So an even bigger part of your time is being spent on electrifying cars and transport through Tesla. Is one of the motivations for the tunneling project the realization that actually, in a world where cars are electric and where they’re self-driving, there may end up being more cars on the roads on any given hour than there are now?EM: Yeah, exactly. A lot of people think that when you make cars autonomous, they’ll be able to go faster and that will alleviate congestion. And to some degree that will be true, but once you have shared autonomy where it’s much cheaper to go by car and you can go point to point, the affordability of going in a car will be better than that of a bus. Like, it will cost less than a bus ticket. So the amount of driving that will occur will be much greater with shared autonomy, and actually traffic will get far worse.CA: You started Tesla with the goal of persuading the world that electrification was the future of cars, and a few years ago, people were laughing at you. Now, not so much.EM: OK.(Laughter)I don’t know. I don’t know.CA: But isn’t it true that pretty much every auto manufacturer has announced serious electrification plans for the short- to medium-term future?EM: Yeah. Yeah. I think almost every automaker has some electric vehicle program. They vary in seriousness. Some are very serious about transitioning entirely to electric, and some are just dabbling in it. And some, amazingly, are still pursuing fuel cells, but I think that won’t last much longer.CA: But isn’t there a sense, though, Elon, where you can now just declare victory and say, you know, “We did it.” Let the world electrify, and you go on and focus on other stuff?EM: Yeah. I intend to stay with Tesla as far into the future as I can imagine, and there are a lot of exciting things that we have coming. Obviously the Model 3 is coming soon. We’ll be unveiling the Tesla Semi truck.CA: OK, we’re going to come to this. So Model 3, it’s supposed to be coming in July-ish.EM: Yeah, it’s looking quite good for starting production in July.CA: Wow. One of the things that people are so excited about is the fact that it’s got autopilot. And you put out this video a while back showing what that technology would look like.EM: Yeah.CA: There’s obviously autopilot in Model S right now. What are we seeing here?EM: Yeah, so this is using only cameras and GPS. So there’s no LIDAR or radar being used here. This is just using passive optical, which is essentially what a person uses. The whole road system is meant to be navigated with passive optical, or cameras, and so once you solve cameras or vision, then autonomy is solved. If you don’t solve vision, it’s not solved. So that’s why our focus is so heavily on having a vision neural net that’s very effective for road conditions.CA: Right. Many other people are going the LIDAR route. You want cameras plus radar is most of it.EM: You can absolutely be superhuman with just cameras. Like, you can probably do it ten times better than humans would, just cameras.CA: So the new cars being sold right now have eight cameras in them. They can’t yet do what that showed. When will they be able to?EM: I think we’re still on track for being able to go cross-country from LA to New York by the end of the year, fully autonomous.CA: OK, so by the end of the year, you’re saying, someone’s going to sit in a Tesla without touching the steering wheel, tap in “New York,” off it goes.EM: Yeah.CA: Won’t ever have to touch the wheel – by the end of 2017.EM: Yeah. Essentially, November or December of this year, we should be able to go all the way from a parking lot in California to a parking lot in New York, no controls touched at any point during the entire journey.(Applause)CA: Amazing. But part of that is possible because you’ve already got a fleet of Teslas driving all these roads. You’re accumulating a huge amount of data of that national road system.EM: Yes, but the thing that will be interesting is that I’m actually fairly confident it will be able to do that route even if you change the route dynamically. So, it’s fairly easy – If you say I’m going to be really good at one specific route, that’s one thing, but it should be able to go, really be very good, certainly once you enter a highway, to go anywhere on the highway system in a given country. So it’s not sort of limited to LA to New York. We could change it and make it Seattle-Florida, that day, in real time. So you were going from LA to New York. Now go from LA to Toronto.CA: So leaving aside regulation for a second, in terms of the technology alone, the time when someone will be able to buy one of your cars and literally just take the hands off the wheel and go to sleep and wake up and find that they’ve arrived, how far away is that, to do that safely?EM: I think that’s about two years. So the real trick of it is not how do you make it work say 99.9 percent of the time, because, like, if a car crashes one in a thousand times, then you’re probably still not going to be comfortable falling asleep. You shouldn’t be, certainly.(Laughter)It’s never going to be perfect. No system is going to be perfect, but if you say it’s perhaps – the car is unlikely to crash in a hundred lifetimes, or a thousand lifetimes, then people are like, OK, wow, if I were to live a thousand lives, I would still most likely never experience a crash, then that’s probably OK.CA: To sleep. I guess the big concern of yours is that people may actually get seduced too early to think that this is safe, and that you’ll have some horrible incident happen that puts things back.EM: Well, I think that the autonomy system is likely to at least mitigate the crash, except in rare circumstances. The thing to appreciate about vehicle safety is this is probabilistic. I mean, there’s some chance that any time a human driver gets in a car, that they will have an accident that is their fault. It’s never zero. So really the key threshold for autonomy is how much better does autonomy need to be than a person before you can rely on it?CA: But once you get literally safe hands-off driving, the power to disrupt the whole industry seems massive, because at that point you’ve spoken of people being able to buy a car, drops you off at work, and then you let it go and provide a sort of Uber-like service to other people, earn you money, maybe even cover the cost of your lease of that car, so you can kind of get a car for free. Is that really likely?EM: Yeah. Absolutely this is what will happen. So there will be a shared autonomy fleet where you buy your car and you can choose to use that car exclusively, you could choose to have it be used only by friends and family, only by other drivers who are rated five star, you can choose to share it sometimes but not other times. That’s 100 percent what will occur. It’s just a question of when.CA: Wow. So you mentioned the Semi and I think you’re planning to announce this in September, but I’m curious whether there’s anything you could show us today?EM: I will show you a teaser shot of the truck.(Laughter)It’s alive.CA: OK.EM: That’s definitely a case where we want to be cautious about the autonomy features. Yeah.(Laughter)CA: We can’t see that much of it, but it doesn’t look like just a little friendly neighborhood truck. It looks kind of badass. What sort of semi is this?EM: So this is a heavy duty, long-range semitruck. So it’s the highest weight capability and with long range. So essentially it’s meant to alleviate the heavy-duty trucking loads. And this is something which people do not today think is possible. They think the truck doesn’t have enough power or it doesn’t have enough range, and then with the Tesla Semi we want to show that no, an electric truck actually can out-torque any diesel semi. And if you had a tug-of-war competition, the Tesla Semi will tug the diesel semi uphill.(Laughter)(Applause)CA: That’s pretty cool. And short term, these aren’t driverless. These are going to be trucks that truck drivers want to drive.EM: Yes. So what will be really fun about this is you have a flat torque RPM curve with an electric motor, whereas with a diesel motor or any kind of internal combustion engine car, you’ve got a torque RPM curve that looks like a hill. So this will be a very spry truck. You can drive this around like a sports car. There’s no gears. It’s, like, single speed.CA: There’s a great movie to be made here somewhere. I don’t know what it is and I don’t know that it ends well, but it’s a great movie.(Laughter)EM: It’s quite bizarre test-driving. When I was driving the test prototype for the first truck. It’s really weird, because you’re driving around and you’re just so nimble, and you’re in this giant truck.CA: Wait, you’ve already driven a prototype?EM: Yeah, I drove it around the parking lot, and I was like, this is crazy.CA: Wow. This is no vaporware.EM: It’s just like, driving this giant truck and making these mad maneuvers.CA: This is cool. OK, from a really badass picture to a kind of less badass picture. This is just a cute house from “Desperate Housewives” or something. What on earth is going on here?EM: Well, this illustrates the picture of the future that I think is how things will evolve. You’ve got an electric car in the driveway. If you look in between the electric car and the house, there are actually three Powerwalls stacked up against the side of the house, and then that house roof is a solar roof. So that’s an actual solar glass roof.CA: OK.EM: That’s a picture of a real – well, admittedly, it’s a real fake house. That’s a real fake house.(Laughter)CA: So these roof tiles, some of them have in them basically solar power, the ability to –EM: Yeah. Solar glass tiles where you can adjust the texture and the color to a very fine-grained level, and then there’s sort of microlouvers in the glass, such that when you’re looking at the roof from street level or close to street level, all the tiles look the same whether there is a solar cell behind it or not. So you have an even color from the ground level. If you were to look at it from a helicopter, you would be actually able to look through and see that some of the glass tiles have a solar cell behind them and some do not. You can’t tell from street level.CA: You put them in the ones that are likely to see a lot of sun, and that makes these roofs super affordable, right? They’re not that much more expensive than just tiling the roof.EM: Yeah. We’re very confident that the cost of the roof plus the cost of electricity – A solar glass roof will be less than the cost of a normal roof plus the cost of electricity. So in other words, this will be economically a no-brainer, we think it will look great, and it will last – We thought about having the warranty be infinity, but then people thought, well, that might sound like were just talking rubbish, but actually this is toughened glass. Well after the house has collapsed and there’s nothing there, the glass tiles will still be there.(Applause)CA: I mean, this is cool. So you’re rolling this out in a couple week’s time, I think, with four different roofing types.EM: Yeah, we’re starting off with two, two initially, and the second two will be introduced early next year.CA: And what’s the scale of ambition here? How many houses do you believe could end up having this type of roofing?EM: I think eventually almost all houses will have a solar roof. The thing is to consider the time scale here to be probably on the order of 40 or 50 years. So on average, a roof is replaced every 20 to 25 years. But you don’t start replacing all roofs immediately. But eventually, if you say were to fast-forward to say 15 years from now, it will be unusual to have a roof that does not have solar.CA: Is there a mental model thing that people don’t get here that because of the shift in the cost, the economics of solar power, most houses actually have enough sunlight on their roof pretty much to power all of their needs. If you could capture the power, it could pretty much power all their needs. You could go off-grid, kind of.EM: It depends on where you are and what the house size is relative to the roof area, but it’s a fair statement to say that most houses in the US have enough roof area to power all the needs of the house.CA: So the key to the economics of the cars, the Semi, of these houses is the falling price of lithium-ion batteries, which you’ve made a huge bet on as Tesla. In many ways, that’s almost the core competency. And you’ve decided that to really, like, own that competency, you just have to build the world’s largest manufacturing plant to double the world’s supply of lithium-ion batteries, with this guy. What is this?EM: Yeah, so that’s the Gigafactory, progress so far on the Gigafactory. Eventually, you can sort of roughly see that there’s sort of a diamond shape overall, and when it’s fully done, it’ll look like a giant diamond, or that’s the idea behind it, and it’s aligned on true north. It’s a small detail.CA: And capable of producing, eventually, like a hundred gigawatt hours of batteries a year.EM: A hundred gigawatt hours. We think probably more, but yeah.CA: And they’re actually being produced right now.EM: They’re in production already. CA: You guys put out this video. I mean, is that speeded up?EM: That’s the slowed down version.(Laughter)CA: How fast does it actually go?EM: Well, when it’s running at full speed, you can’t actually see the cells without a strobe light. It’s just blur.(Laughter)CA: One of your core ideas, Elon, about what makes an exciting future is a future where we no longer feel guilty about energy. Help us picture this. How many Gigafactories, if you like, does it take to get us there?EM: It’s about a hundred, roughly. It’s not 10, it’s not a thousand. Most likely a hundred.CA: See, I find this amazing. You can picture what it would take to move the world off this vast fossil fuel thing. It’s like you’re building one, it costs five billion dollars, or whatever, five to 10 billion dollars. Like, it’s kind of cool that you can picture that project. And you’re planning to do, at Tesla – announce another two this year.EM: I think we’ll announce locations for somewhere between two and four Gigafactories later this year. Yeah, probably four.CA: Whoa.(Applause) No more teasing from you for here? Like – where, continent? You can say no.EM: We need to address a global market.CA: OK.(Laughter)This is cool. I think we should talk for – Actually, double mark it. I’m going to ask you one question about politics, only one. I’m kind of sick of politics, but I do want to ask you this. You’re on a body now giving advice to a guy –EM: Who?CA: Who has said he doesn’t really believe in climate change, and there’s a lot of people out there who think you shouldn’t be doing that. They’d like you to walk away from that. What would you say to them?EM: Well, I think that first of all, I’m just on two advisory councils where the format consists of going around the room and asking people’s opinion on things, and so there’s like a meeting every month or two. That’s the sum total of my contribution. But I think to the degree that there are people in the room who are arguing in favor of doing something about climate change, or social issues, I’ve used the meetings I’ve had thus far to argue in favor of immigration and in favor of climate change.(Applause)And if I hadn’t done that, that wasn’t on the agenda before. So maybe nothing will happen, but at least the words were said.CA: OK.(Applause)So let’s talk SpaceX and Mars. Last time you were here, you spoke about what seemed like a kind of incredibly ambitious dream to develop rockets that were actually reusable. And you’ve only gone and done it.EM: Finally. It took a long time.CA: Talk us through this. What are we looking at here?EM: So this is one of our rocket boosters coming back from very high and fast in space. So just delivered the upper stage at high velocity. I think this might have been at sort of Mach 7 or so, delivery of the upper stage.(Applause)CA: So that was a sped-up –EM: That was the slowed down version.(Laughter)CA: I thought that was the sped-up version. But I mean, that’s amazing, and several of these failed before you finally figured out how to do it, but now you’ve done this, what, five or six times?EM: We’re at eight or nine.CA: And for the first time, you’ve actually reflown one of the rockets that landed.EM: Yeah, so we landed the rocket booster and then prepped it for flight again and flew it again, so it’s the first reflight of an orbital booster where that reflight is relevant. So it’s important to appreciate that reusability is only relevant if it is rapid and complete. So like an aircraft or a car, the reusability is rapid and complete. You do not send your aircraft to Boeing in-between flights.CA: Right. So this is allowing you to dream of this really ambitious idea of sending many, many, many people to Mars in, what, 10 or 20 years time, I guess.EM: Yeah.CA: And you’ve designed this outrageous rocket to do it. Help us understand the scale of this thing.EM: Well, visually you can see that’s a person. Yeah, and that’s the vehicle.(Laughter)CA: So if that was a skyscraper, that’s like, did I read that, a 40-story skyscraper?EM: Probably a little more, yeah. The thrust level of this is really – This configuration is about four times the thrust of the Saturn V moon rocket.CA: Four times the thrust of the biggest rocket humanity ever created before.EM: Yeah. Yeah.CA: As one does. EM: Yeah.(Laughter)In units of 747, a 747 is only about a quarter of a million pounds of thrust, so for every 10 million pounds of thrust, there’s 40 747s. So this would be the thrust equivalent of 120 747s, with all engines blazing.CA: And so even with a machine designed to escape Earth’s gravity, I think you told me last time this thing could actually take a fully loaded 747, people, cargo, everything, into orbit.EM: Exactly. This can take a fully loaded 747 with maximum fuel, maximum passengers, maximum cargo on the 747 – this can take it as cargo.CA: So based on this, you presented recently this Interplanetary Transport System which is visualized this way. This is a scene you picture in, what, 30 years time? 20 years time? People walking into this rocket.EM: I’m hopeful it’s sort of an eight- to 10-year time frame. Aspirationally, that’s our target. Our internal targets are more aggressive, but I think –(Laughter)CA: OK.EM: While vehicle seems quite large and is large by comparison with other rockets, I think the future spacecraft will make this look like a rowboat. The future spaceships will be truly enormous.CA: Why, Elon? Why do we need to build a city on Mars with a million people on it in your lifetime, which I think is kind of what you’ve said you’d love to do?EM: I think it’s important to have a future that is inspiring and appealing. I just think there have to be reasons that you get up in the morning and you want to live. Like, why do you want to live? What’s the point? What inspires you? What do you love about the future? And if we’re not out there, if the future does not include being out there among the stars and being a multiplanet species, I find that it’s incredibly depressing if that’s not the future that we’re going to have.(Applause)CA: People want to position this as an either or, that there are so many desperate things happening on the planet now from climate to poverty to, you know, you pick your issue. And this feels like a distraction. You shouldn’t be thinking about this. You should be solving what’s here and now. And to be fair, you’ve done a fair old bit to actually do that with your work on sustainable energy. But why not just do that?EM: I think there’s – I look at the future from the standpoint of probabilities. It’s like a branching stream of probabilities, and there are actions that we can take that affect those probabilities or that accelerate one thing or slow down another thing. I may introduce something new to the probability stream. Sustainable energy will happen no matter what. If there was no Tesla, if Tesla never existed, it would have to happen out of necessity. It’s tautological. If you don’t have sustainable energy, it means you have unsustainable energy. Eventually you will run out, and the laws of economics will drive civilization towards sustainable energy, inevitably. The fundamental value of a company like Tesla is the degree to which it accelerates the advent of sustainable energy, faster than it would otherwise occur.So when I think, like, what is the fundamental good of a company like Tesla, I would say, hopefully, if it accelerated that by a decade, potentially more than a decade, that would be quite a good thing to occur. That’s what I consider to be the fundamental aspirational good of Tesla.Then there’s becoming a multiplanet species and space-faring civilization. This is not inevitable. It’s very important to appreciate this is not inevitable. The sustainable energy future I think is largely inevitable, but being a space-faring civilization is definitely not inevitable. If you look at the progress in space, in 1969 you were able to send somebody to the moon. 1969. Then we had the Space Shuttle. The Space Shuttle could only take people to low Earth orbit. Then the Space Shuttle retired, and the United States could take no one to orbit. So that’s the trend. The trend is like down to nothing. People are mistaken when they think that technology just automatically improves. It does not automatically improve. It only improves if a lot of people work very hard to make it better, and actually it will, I think, by itself degrade, actually. You look at great civilizations like Ancient Egypt, and they were able to make the pyramids, and they forgot how to do that. And then the Romans, they built these incredible aqueducts. They forgot how to do it.CA: Elon, it almost seems, listening to you and looking at the different things you’ve done, that you’ve got this unique double motivation on everything that I find so interesting. One is this desire to work for humanity’s long-term good. The other is the desire to do something exciting. And often it feels like you feel like you need the one to drive the other. With Tesla, you want to have sustainable energy, so you made these super sexy, exciting cars to do it. Solar energy, we need to get there, so we need to make these beautiful roofs. We haven’t even spoken about your newest thing, which we don’t have time to do, but you want to save humanity from bad AI, and so you’re going to create this really cool brain-machine interface to give us all infinite memory and telepathy and so forth. And on Mars, it feels like what you’re saying is, yeah, we need to save humanity and have a backup plan, but also we need to inspire humanity, and this is a way to inspire.EM: I think the value of beauty and inspiration is very much underrated, no question. But I want to be clear. I’m not trying to be anyone’s savior. That is not the – I’m just trying to think about the future and not be sad.(Applause)CA: Beautiful statement. I think everyone here would agree that it is not – None of this is going to happen inevitably. The fact that in your mind, you dream this stuff, you dream stuff that no one else would dare dream, or no one else would be capable of dreaming at the level of complexity that you do. The fact that you do that, Elon Musk, is a really remarkable thing. Thank you for helping us all to dream a bit bigger.EM: But you’ll tell me if it ever starts getting genuinely insane, right?(Laughter)CA: Thank you, Elon Musk. That was really, really fantastic. That was really fantastic.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(6)　Linus Torvalds：Linuxの背後にある心 [Video]","slug":"ted-talks-programming-everyone-must-watch-6","date":"2017-12-15T22:00:01.000Z","updated":"2017-12-15T22:00:01.225Z","comments":true,"path":"2017/12/15/ted-talks-programming-everyone-must-watch-6/","link":"","permalink":"https://so-matome.net2017/12/15/ted-talks-programming-everyone-must-watch-6/","excerpt":"Linus Torvalds：Linuxの背後にある心MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第３段は「Linus Torvalds：Linuxの背後にある心」。以下のように紹介されています：\n\n実際にTEDトークではなく、代わりにLinuxオペレーティングシステムの背後にいる「悪名高い」人物であるLinus Torvaldsとの対話を紹介する、プログラミングに関するTED Talkです。 この21分のインタビューでは、彼がエンジニアとオープンソースの代弁者になるための彼の考え方と動機について解説しています。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"Linus Torvalds：Linuxの背後にある心MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第３段は「Linus Torvalds：Linuxの背後にある心」。以下のように紹介されています： 実際にTEDトークではなく、代わりにLinuxオペレーティングシステムの背後にいる「悪名高い」人物であるLinus Torvaldsとの対話を紹介する、プログラミングに関するTED Talkです。 この21分のインタビューでは、彼がエンジニアとオープンソースの代弁者になるための彼の考え方と動機について解説しています。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： Chris Anderson: This is such a strange thing.Your software, Linux, is in millions of computers, it probably powers much of the Internet.And I think that there are, like, a billion and a half active Android devices out there.Your software is in every single one of them.It&#39;s kind of amazing.You must have some amazing software headquarters driving all this.That&#39;s what I thought – and I was shocked when I saw a picture of it.I mean, this is – this is the Linux world headquarters.(Laughter) (Applause) Linus Torvalds: It really doesn&#39;t look like much.And I have to say, the most interesting part in this picture, that people mostly react to, is the walking desk.It is the most interesting part in my office and I&#39;m not actually using it anymore.And I think the two things are related.The way I work is …I want to not have external stimulation.You can kind of see, on the walls are this light green.I&#39;m told that at mental institutions they use that on the walls.(Laughter) It&#39;s like a calming color, it&#39;s not something that really stimulates you.What you can&#39;t see is the computer here, you only see the screen, but the main thing I worry about in my computer is – it doesn&#39;t have to be big and powerful, although I like that – it really has to be completely silent.I know people who work for Google and they have their own small data center at home, and I don&#39;t do that.My office is the most boring office you&#39;ll ever see.And I sit there alone in the quiet.If the cat comes up, it sits in my lap.And I want to hear the cat purring, not the sound of the fans in the computer.CA: So this is astonishing, because working this way, you&#39;re able to run this vast technology empire – it is an empire – so that&#39;s an amazing testament to the power of open source.Tell us how you got to understand open source and how it lead to the development of Linux.LT: I mean, I still work alone.Really – I work alone in my house, often in my bathrobe.When a photographer shows up, I dress up, so I have clothes on.(Laughter) And that&#39;s how I&#39;ve always worked.I mean, this was how I started Linux, too.I did not start Linux as a collaborative project.I started it as one in a series of many projects I had done at the time for myself, partly because I needed the end result, but even more because I just enjoyed programming.So it was about the end of the journey, which, 25 years later, we still have not reached.But it was really about the fact that I was looking for a project on my own and there was no open source, really, on my radar at all.And what happened is …the project grows and becomes something you want to show off to people.Really, this is more of a, &quot;Wow, look at what I did!&quot;And trust me – it was not that great back then.I made it publicly available, and it wasn&#39;t even open source at that point.At that point it was source that was open, but there was no intention behind using the kind of open-source methodology that we think of today to improve it.It was more like, &quot;Look, I&#39;ve been working on this for half a year, I&#39;d love to have comments.&quot;And other people approached me.At the University of Helsinki, I had a friend who was one of the open source – it was called mainly &quot;free software&quot; back then – and he actually introduced me to the notion that, hey, you can use these open-source licenses that had been around.And I thought about it for a while.I was actually worried about the whole commercial interests coming in.I mean, that&#39;s one of the worries I think most people who start out have, is that they worry about somebody taking advantage of their work, right?And I decided, &quot;What the hell?&quot;And – CA: And then at some point, someone contributed some code that you thought, &quot;Wow, that really is interesting, I would not have thought of that.This could actually improve this.&quot;LT: It didn&#39;t even start by people contributing code, it was more that people started contributing ideas.And just the fact that somebody else takes a look at your project – and I&#39;m sure it&#39;s true of other things, too, but it&#39;s definitely true in code – is that somebody else takes an interest in your code, looks at it enough to actually give you feedback and give you ideas.That was a huge thing for me.I was 21 at the time, so I was young, but I had already programmed for half my life, basically.And every project before that had been completely personal and it was a revelation when people just started commenting, started giving feedback on your code.And even before they started giving code back, that was, I think, one of the big moments where I said, &quot;I love other people!&quot;Don&#39;t get me wrong – I&#39;m actually not a people person.(Laughter) I don&#39;t really love other people – (Laughter) But I love computers, I love interacting with other people on email, because it kind of gives you that buffer.But I do love other people who comment and get involved in my project.And it made it so much more.CA: So was there a moment when you saw what was being built and it suddenly started taking off, and you thought, &quot;Wait a sec, this actually could be something huge, not just a personal project that I&#39;m getting nice feedback on, but a kind of explosive development in the whole technology world&quot;?LT: Not really.I mean, the big point for me, really, was not when it was becoming huge, it was when it was becoming little.The big point for me was not being alone and having 10, maybe 100 people being involved – that was a big point.Then everything else was very gradual.Going from 100 people to a million people is not a big deal – to me.Well, I mean, maybe it is if you&#39;re – (Laughter) If you want to sell your result then it&#39;s a huge deal – don&#39;t get me wrong.But if you&#39;re interested in the technology and you&#39;re interested in the project, the big part was getting the community.Then the community grew gradually.And there&#39;s actually not a single point where I went like, &quot;Wow, that just took off!&quot; because it – I mean – it took a long time, relatively.CA: So all the technologists that I talk to really credit you with massively changing their work.And it&#39;s not just Linux, it&#39;s this thing called Git, which is this management system for software development.Tell us briefly about that and your role in that.LT: So one of the issues we had, and this took a while to start to appear, is when you …When you grow from having 10 people or 100 people working on a project to having 10,000 people, which – I mean, right now we&#39;re in the situation where just on the kernel, we have 1,000 people involved in every single release and that&#39;s every two months, roughly two or three months.Some of those people don&#39;t do a lot.There&#39;s a lot of people who make small, small changes.But to maintain this, the scale changes how you have to maintain it.And we went through a lot of pain.And there are whole projects that do only source-code maintenance.CVS is the one that used to be the most commonly used, and I hated CVS with a passion and refused to touch it and tried something else that was radical and interesting and everybody else hated.CA: (Laughs) LT: And we were in this bad spot, where we had thousands of people who wanted to participate, but in many ways, I was the kind of break point, where I could not scale to the point where I could work with thousands of people.So Git is my second big project, which was only created for me to maintain my first big project.And this is literally how I work.I don&#39;t code for – well, I do code for fun – but I want to code for something meaningful so every single project I&#39;ve ever done has been something I needed and – CA: So really, both Linux and Git kind of arose almost as an unintended consequence of your desire not to have to work with too many people.LT: Absolutely. Yes.(Laughter) CA: That&#39;s amazing.LT: Yeah.(Applause) And yet, you&#39;re the man who&#39;s transformed technology not just once but twice, and we have to try and understand why it is.You&#39;ve given us some clues, but …Here&#39;s a picture of you as a kid, with a Rubik&#39;s Cube.You mentioned that you&#39;ve been programming since you were like 10 or 11, half your life.Were you this sort of computer genius, you know, übernerd, were you the star at school who could do everything?What were you like as a kid?LT: Yeah, I think I was the prototypical nerd.I mean, I was …I was not a people person back then.That&#39;s my younger brother.I was clearly more interested in the Rubik&#39;s Cube than my younger brother.(Laughter) My younger sister, who&#39;s not in the picture, when we had family meetings – and it&#39;s not a huge family, but I have, like, a couple of cousins – she would prep me beforehand.Like, before I stepped into the room she would say, &quot;OK. That&#39;s so-and-so …&quot;Because I was not – I was a geek.I was into computers, I was into math, I was into physics.I was good at that.I don&#39;t think I was particularly exceptional.Apparently, my sister said that my biggest exceptional quality was that I would not let go.CA: OK, so let&#39;s go there, because that&#39;s interesting.You would not let go.So that&#39;s not about being a geek and being smart, that&#39;s about being … stubborn?LT: That&#39;s about being stubborn.That&#39;s about, like, just starting something and not saying, &quot;OK, I&#39;m done, let&#39;s do something else – Look: shiny!&quot;And I notice that in many other parts in my life, too.I lived in Silicon Valley for seven years.And I worked for the same company, in Silicon Valley, for the whole time.That is unheard of.That&#39;s not how Silicon Valley works.The whole point of Silicon Valley is that people jump between jobs to kind of mix up the pot.And that&#39;s not the kind of person I am.CA: But during the actual development of Linux itself, that stubbornness sometimes brought you in conflict with other people.Talk about that a bit.Was that essential to sort of maintain the quality of what was being built?How would you describe what happened?LT: I don&#39;t know if it&#39;s essential.Going back to the &quot;I&#39;m not a people person,&quot; – sometimes I&#39;m also …shall we say, &quot;myopic&quot; when it comes to other people&#39;s feelings, and that sometimes makes you say things that hurt other people.And I&#39;m not proud of that.(Applause) But, at the same time, it&#39;s – I get people who tell me that I should be nice.And then when I try to explain to them that maybe you&#39;re nice, maybe you should be more aggressive, they see that as me being not nice.(Laughter) What I&#39;m trying to say is we are different.I&#39;m not a people person; it&#39;s not something I&#39;m particularly proud of, but it&#39;s part of me.And one of the things I really like about open source is it really allows different people to work together.We don&#39;t have to like each other – and sometimes we really don&#39;t like each other.Really – I mean, there are very, very heated arguments.But you can, actually, you can find things that – you don&#39;t even agree to disagree, it&#39;s just that you&#39;re interested in really different things.And coming back to the point where I said earlier that I was afraid of commercial people taking advantage of your work, it turned out, and very quickly turned out, that those commercial people were lovely, lovely people.And they did all the things that I was not at all interested in doing, and they had completely different goals.And they used open source in ways that I just did not want to go.But because it was open source they could do it, and it actually works really beautifully together.And I actually think it works the same way.You need to have the people-people, the communicators, the warm and friendly people who like – (Laughter) really want to hug you and get you into the community.But that&#39;s not everybody.And that&#39;s not me.I care about the technology.There are people who care about the UI.I can&#39;t do UI to save my life.I mean, if I was stranded on an island and the only way to get off that island was the make a pretty UI, I&#39;d die there.(Laughter) So there&#39;s different kinds of people, and I&#39;m not making excuses, I&#39;m trying to explain.CA: Now, when we talked last week, you talked about some other trait that you have, which I found really interesting.It&#39;s this idea called taste.And I&#39;ve just got a couple of images here.I think this is an example of not particularly good taste in code, and this one is better taste, which one can immediately see.What is the difference between these two?LT: So this is – How many people here actually have coded?CA: Oh my goodness.LT: So I guarantee you, everybody who raised their hand, they have done what&#39;s called a singly-linked list.And it&#39;s taught – This, the first not very good taste approach, is basically how it&#39;s taught to be done when you start out coding.And you don&#39;t have to understand the code.The most interesting part to me is the last if statement.Because what happens in a singly-linked list – this is trying to remove an existing entry from a list – and there&#39;s a difference between if it&#39;s the first entry or whether it&#39;s an entry in the middle.Because if it&#39;s the first entry, you have to change the pointer to the first entry.If it&#39;s in the middle, you have to change the pointer of a previous entry.So they&#39;re two completely different cases.CA: And that&#39;s better.LT: And this is better.It does not have the if statement.And it doesn&#39;t really matter – I don&#39;t want you understand why it doesn&#39;t have the if statement, but I want you to understand that sometimes you can see a problem in a different way and rewrite it so that a special case goes away and becomes the normal case.And that&#39;s good code.But this is simple code.This is CS 101.This is not important – although, details are important.To me, the sign of people I really want to work with is that they have good taste, which is how …I sent you this stupid example that is not relevant because it&#39;s too small.Good taste is much bigger than this.Good taste is about really seeing the big patterns and kind of instinctively knowing what&#39;s the right way to do things.CA: OK, so we&#39;re putting the pieces together here now.You have taste, in a way that&#39;s meaningful to software people.You&#39;re – (Laughter) LT: I think it was meaningful to some people here.CA: You&#39;re a very smart computer coder, and you&#39;re hellish stubborn.But there must be something else.I mean, you&#39;ve changed the future.You must have the ability of these grand visions of the future.You&#39;re a visionary, right?LT: I&#39;ve actually felt slightly uncomfortable at TED for the last two days, because there&#39;s a lot of vision going on, right?And I am not a visionary.I do not have a five-year plan.I&#39;m an engineer.And I think it&#39;s really – I mean – I&#39;m perfectly happy with all the people who are walking around and just staring at the clouds and looking at the stars and saying, &quot;I want to go there.&quot;But I&#39;m looking at the ground, and I want to fix the pothole that&#39;s right in front of me before I fall in.This is the kind of person I am.(Cheers) (Applause) CA: So you spoke to me last week about these two guys.Who are they and how do you relate to them?LT: Well, so this is kind of cliché in technology, the whole Tesla versus Edison, where Tesla is seen as the visionary scientist and crazy idea man.And people love Tesla.I mean, there are people who name their companies after him.(Laughter) The other person there is Edison, who is actually often vilified for being kind of pedestrian and is – I mean, his most famous quote is, &quot;Genius is one percent inspiration and 99 percent perspiration.&quot;And I&#39;m in the Edison camp, even if people don&#39;t always like him.Because if you actually compare the two, Tesla has kind of this mind grab these days, but who actually changed the world?Edison may not have been a nice person, he did a lot of things – he was maybe not so intellectual, not so visionary.But I think I&#39;m more of an Edison than a Tesla.CA: So our theme at TED this week is dreams – big, bold, audacious dreams.You&#39;re really the antidote to that.LT: I&#39;m trying to dial it down a bit, yes.CA: That&#39;s good.(Laughter) We embrace you, we embrace you.Companies like Google and many others have made, arguably, like, billions of dollars out of your software.Does that piss you off?LT: No.No, it doesn&#39;t piss me off for several reasons.And one of them is, I&#39;m doing fine.I&#39;m really doing fine.But the other reason is – I mean, without doing the whole open source and really letting go thing, Linux would never have been what it is.And it&#39;s brought experiences I don&#39;t really enjoy, public talking, but at the same time, this is an experience.Trust me.So there&#39;s a lot of things going on that make me a very happy man and thinking I did the right choices.CA: Is the open source idea – this is, I think we&#39;ll end here – is the open source idea fully realized now in the world, or is there more that it could go, are there more things that it could do?LT: So, I&#39;m of two minds there.I think one reason open source works so well in code is that at the end of the day, code tends to be somewhat black and white.There&#39;s often a fairly good way to decide, this is done correctly and this is not done well.Code either works or it doesn&#39;t, which means that there&#39;s less room for arguments.And we have arguments despite this, right?In many other areas – I mean, people have talked about open politics and things like that – and it&#39;s really hard sometimes to say that, yes, you can apply the same principles in some other areas just because the black and white turns into not just gray, but different colors.So, obviously open source in science is making a comeback.Science was there first.But then science ended up being pretty closed, with very expensive journals and some of that going on.And open source is making a comeback in science, with things like arXiv and open journals.Wikipedia changed the world, too.So there are other examples, I&#39;m sure there are more to come.CA: But you&#39;re not a visionary, and so it&#39;s not up to you to name them.LT: No.(Laughter) It&#39;s up to you guys to make them, right?CA: Exactly.Linus Torvalds, thank you for Linux, thank you for the Internet, thank you for all those Android phones.Thank you for coming here to TED and revealing so much of yourself.LT: Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(7)　Pixarムービーを生き生きとさせる魔法の成分 [Video]","slug":"ted-talks-programming-everyone-must-watch-7","date":"2017-12-08T22:00:01.000Z","updated":"2017-12-08T22:00:02.014Z","comments":true,"path":"2017/12/08/ted-talks-programming-everyone-must-watch-7/","link":"","permalink":"https://so-matome.net2017/12/08/ted-talks-programming-everyone-must-watch-7/","excerpt":"Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第7段は「Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分」。以下のように紹介されています：\n\nこの12分間のTEDトークは、科学と芸術が組み合わさった時、それらを合計したものよりも素晴らしいものを作り出すか、またどちらか一方を無視すると物事がどのように崩れ落ちてしまうかについての素晴らしい見識を示してくれる良い例です。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第7段は「Danielle Feinberg：Pixarムービーを生き生きとさせる魔法の成分」。以下のように紹介されています： この12分間のTEDトークは、科学と芸術が組み合わさった時、それらを合計したものよりも素晴らしいものを作り出すか、またどちらか一方を無視すると物事がどのように崩れ落ちてしまうかについての素晴らしい見識を示してくれる良い例です。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： When I was seven years old, some well-meaning adult asked me what I wanted to be when I grew up.Proudly, I said: &quot;An artist.&quot;&quot;No, you don&#39;t,&quot; he said, &quot;You can&#39;t make a living being an artist!&quot;My little seven-year-old Picasso dreams were crushed.But I gathered myself, went off in search of a new dream, eventually settling on being a scientist, perhaps something like the next Albert Einstein.(Laughter) I have always loved math and science, later, coding.And so I decided to study computer programming in college.In my junior year, my computer graphics professor showed us these wonderful short films.It was the first computer animation any of us had ever seen.I watched these films in wonder, transfixed, fireworks going off in my head, thinking, &quot;That is what I want to do with my life.&quot;The idea that all the math, science and code I had been learning could come together to create these worlds and characters and stories I connected with, was pure magic for me.Just two years later, I started working at the place that made those films, Pixar Animation Studios.It was here I learned how we actually execute those films.To create our movies, we create a three-dimensional world inside the computer.We start with a point that makes a line that makes a face that creates characters, or trees and rocks that eventually become a forest.And because it&#39;s a three-dimensional world, we can move a camera around inside that world.I was fascinated by all of it.But then I got my first taste of lighting.Lighting in practice is placing lights inside this three-dimensional world.I actually have icons of lights I move around in there.Here you can see I&#39;ve added a light, I&#39;m turning on the rough version of lighting in our software, turn on shadows and placing the light.As I place a light, I think about what it might look like in real life, but balance that out with what we need artistically and for the story.So it might look like this at first, but as we adjust this and move that in weeks of work, in rough form it might look like this, and in final form, like this.There&#39;s this moment in lighting that made me fall utterly in love with it.It&#39;s where we go from this to this.It&#39;s the moment where all the pieces come together, and suddenly the world comes to life as if it&#39;s an actual place that exists.This moment never gets old, especially for that little seven-year-old girl that wanted to be an artist.As I learned to light, I learned about using light to help tell story, to set the time of day, to create the mood, to guide the audience&#39;s eye, how to make a character look appealing or stand out in a busy set.Did you see WALL-E?(Laughter) There he is.As you can see, we can create any world that we want inside the computer.We can make a world with monsters, with robots that fall in love, we can even make pigs fly.(Laughter) While this is an incredible thing, this untethered artistic freedom, it can create chaos.It can create unbelievable worlds, unbelievable movement, things that are jarring to the audience.So to combat this, we tether ourselves with science.We use science and the world we know as a backbone, to ground ourselves in something relatable and recognizable.&quot;Finding Nemo&quot; is an excellent example of this.A major portion of the movie takes place underwater.But how do you make it look underwater?In early research and development, we took a clip of underwater footage and recreated it in the computer.Then we broke it back down to see which elements make up that underwater look.One of the most critical elements was how the light travels through the water.So we coded up a light that mimics this physics – first, the visibility of the water, and then what happens with the color.Objects close to the eye have their full, rich colors.As light travels deeper into the water, we lose the red wavelengths, then the green wavelengths, leaving us with blue at the far depths.In this clip you can see two other important elements.The first is the surge and swell, or the invisible underwater current that pushes the bits of particulate around in the water.The second is the caustics.These are the ribbons of light, like you might see on the bottom of a pool, that are created when the sun bends through the crests of the ripples and waves on the ocean&#39;s surface.Here we have the fog beams.These give us color depth cues, but also tells which direction is up in shots where we don&#39;t see the water surface.The other really cool thing you can see here is that we lit that particulate only with the caustics, so that as it goes in and out of those ribbons of light, it appears and disappears, lending a subtle, magical sparkle to the underwater.You can see how we&#39;re using the science – the physics of water, light and movement – to tether that artistic freedom.But we are not beholden to it.We considered each of these elements and which ones had to be scientifically accurate and which ones we could push and pull to suit the story and the mood.We realized early on that color was one we had some leeway with.So here&#39;s a traditionally colored underwater scene.But here, we can take Sydney Harbor and push it fairly green to suit the sad mood of what&#39;s happening.In this scene, it&#39;s really important we see deep into the underwater, so we understand what the East Australian Current is, that the turtles are diving into and going on this roller coaster ride.So we pushed the visibility of the water well past anything you would ever see in real life.Because in the end, we are not trying to recreate the scientifically correct real world, we&#39;re trying to create a believable world, one the audience can immerse themselves in to experience the story.We use science to create something wonderful.We use story and artistic touch to get us to a place of wonder.This guy, WALL-E, is a great example of that.He finds beauty in the simplest things.But when he came in to lighting, we knew we had a big problem.We got so geeked-out on making WALL-E this convincing robot, that we made his binoculars practically optically perfect.(Laughter) His binoculars are one of the most critical acting devices he has.He doesn&#39;t have a face or even traditional dialogue, for that matter.So the animators were heavily dependent on the binoculars to sell his acting and emotions.We started lighting and we realized the triple lenses inside his binoculars were a mess of reflections.He was starting to look glassy-eyed.(Laughter) Now, glassy-eyed is a fundamentally awful thing when you are trying to convince an audience that a robot has a personality and he&#39;s capable of falling in love.So we went to work on these optically perfect binoculars, trying to find a solution that would maintain his true robot materials but solve this reflection problem.So we started with the lenses.Here&#39;s the flat-front lens, we have a concave lens and a convex lens.And here you see all three together, showing us all these reflections.We tried turning them down, we tried blocking them, nothing was working.You can see here, sometimes we needed something specific reflected in his eyes – usually Eve.So we couldn&#39;t just use some faked abstract image on the lenses.So here we have Eve on the first lens, we put Eve on the second lens, it&#39;s not working.We turn it down, it&#39;s still not working.And then we have our eureka moment.We add a light to WALL-E that accidentally leaks into his eyes.You can see it light up these gray aperture blades.Suddenly, those aperture blades are poking through that reflection the way nothing else has.Now we recognize WALL-E as having an eye.As humans we have the white of our eye, the colored iris and the black pupil.Now WALL-E has the black of an eye, the gray aperture blades and the black pupil.Suddenly, WALL-E feels like he has a soul, like there&#39;s a character with emotion inside.Later in the movie towards the end, WALL-E loses his personality, essentially going dead.This is the perfect time to bring back that glassy-eyed look.In the next scene, WALL-E comes back to life.We bring that light back to bring the aperture blades back, and he returns to that sweet, soulful robot we&#39;ve come to love.(Video) WALL-E: Eva?Danielle Feinberg: There&#39;s a beauty in these unexpected moments – when you find the key to unlocking a robot&#39;s soul, the moment when you discover what you want to do with your life.The jellyfish in &quot;Finding Nemo&quot; was one of those moments for me.There are scenes in every movie that struggle to come together.This was one of those scenes.The director had a vision for this scene based on some wonderful footage of jellyfish in the South Pacific.As we went along, we were floundering.The reviews with the director turned from the normal look-and-feel conversation into more and more questions about numbers and percentages.Maybe because unlike normal, we were basing it on something in real life, or maybe just because we had lost our way.But it had become about using our brain without our eyes, the science without the art.That scientific tether was strangling the scene.But even through all the frustrations, I still believed it could be beautiful.So when it came in to lighting, I dug in.As I worked to balance the blues and the pinks, the caustics dancing on the jellyfish bells, the undulating fog beams, something promising began to appear.I came in one morning and checked the previous night&#39;s work.And I got excited.And then I showed it to the lighting director and she got excited.Soon, I was showing to the director in a dark room full of 50 people.In director review, you hope you might get some nice words, then you get some notes and fixes, generally.And then, hopefully, you get a final, signaling to move on to the next stage.I gave my intro, and I played the jellyfish scene.And the director was silent for an uncomfortably long amount of time.Just long enough for me to think, &quot;Oh no, this is doomed.&quot;And then he started clapping.And then the production designer started clapping.And then the whole room was clapping.This is the moment that I live for in lighting.The moment where it all comes together and we get a world that we can believe in.We use math, science and code to create these amazing worlds.We use storytelling and art to bring them to life.It&#39;s this interweaving of art and science that elevates the world to a place of wonder, a place with soul, a place we can believe in, a place where the things you imagine can become real – and a world where a girl suddenly realizes not only is she a scientist, but also an artist.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(8)　成功のための8つの秘密 [Video]","slug":"ted-talks-programming-everyone-must-watch-8","date":"2017-12-01T22:00:01.000Z","updated":"2017-12-01T22:00:01.511Z","comments":true,"path":"2017/12/01/ted-talks-programming-everyone-must-watch-8/","link":"","permalink":"https://so-matome.net2017/12/01/ted-talks-programming-everyone-must-watch-8/","excerpt":"リチャード・セント・ジョン：成功のための8つの秘密MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第8段は「リチャード・セント・ジョン：成功のための8つの秘密」。以下のように紹介されています：\nI’ll lay out the secrets for you: Passion, Work, Good, Focus, Push, Service, Ideas, and Persist. But to really understand what St. John means, you should watch the video — it’s barely 4 minutes long, so what do you have to lose? This is golden advice if you want to succeed as a career programmer.\n\n私の秘密を告白してしまいましょう：情熱、仕事、美徳、フォーカス、プッシュ、サービス、アイデア、そして永続性。 しかし、セント・ジョンが何を言おうと本当に理解するためには、ビデオを見るべきです。それはたった4分ですから、何を失うというのでしょう？ あなたがキャリアプログラマーとして成功したいなら、これは金言です。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"リチャード・セント・ジョン：成功のための8つの秘密MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第8段は「リチャード・セント・ジョン：成功のための8つの秘密」。以下のように紹介されています： I’ll lay out the secrets for you: Passion, Work, Good, Focus, Push, Service, Ideas, and Persist. But to really understand what St. John means, you should watch the video — it’s barely 4 minutes long, so what do you have to lose? This is golden advice if you want to succeed as a career programmer. 私の秘密を告白してしまいましょう：情熱、仕事、美徳、フォーカス、プッシュ、サービス、アイデア、そして永続性。 しかし、セント・ジョンが何を言おうと本当に理解するためには、ビデオを見るべきです。それはたった4分ですから、何を失うというのでしょう？ あなたがキャリアプログラマーとして成功したいなら、これは金言です。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： This is really a two-hour presentation I give to high school students, cut down to three minutes.And it all started one day on a plane, on my way to TED, seven years ago.And in the seat next to me was a high school student, a teenager, and she came from a really poor family.And she wanted to make something of her life, and she asked me a simple little question.She said, &quot;What leads to success?&quot;And I felt really badly, because I couldn&#39;t give her a good answer.So I get off the plane, and I come to TED.And I think, jeez, I&#39;m in the middle of a room of successful people!So why don&#39;t I ask them what helped them succeed, and pass it on to kids?So here we are, seven years, 500 interviews later, and I&#39;m going to tell you what really leads to success and makes TEDsters tick.And the first thing is passion.Freeman Thomas says, &quot;I&#39;m driven by my passion.&quot;TEDsters do it for love; they don&#39;t do it for money.Carol Coletta says, &quot;I would pay someone to do what I do.&quot;And the interesting thing is: if you do it for love, the money comes anyway.Work! Rupert Murdoch said to me, &quot;It&#39;s all hard work.Nothing comes easily.But I have a lot of fun.&quot;Did he say fun? Rupert? Yes!(Laughter) TEDsters do have fun working.And they work hard.I figured, they&#39;re not workaholics.They&#39;re workafrolics.(Laughter) Good!(Applause) Alex Garden says, &quot;To be successful, put your nose down in something and get damn good at it.&quot;There&#39;s no magic; it&#39;s practice, practice, practice.And it&#39;s focus.Norman Jewison said to me, &quot;I think it all has to do with focusing yourself on one thing.&quot;And push!David Gallo says, &quot;Push yourself.Physically, mentally, you&#39;ve got to push, push, push.&quot;You&#39;ve got to push through shyness and self-doubt.Goldie Hawn says, &quot;I always had self-doubts.I wasn&#39;t good enough; I wasn&#39;t smart enough.I didn&#39;t think I&#39;d make it.&quot;Now it&#39;s not always easy to push yourself, and that&#39;s why they invented mothers.(Laughter) (Applause) Frank Gehry said to me, &quot;My mother pushed me.&quot;(Laughter) Serve!Sherwin Nuland says, &quot;It was a privilege to serve as a doctor.&quot;A lot of kids want to be millionaires.The first thing I say is: &quot;OK, well you can&#39;t serve yourself; you&#39;ve got to serve others something of value.Because that&#39;s the way people really get rich.&quot;Ideas!TEDster Bill Gates says, &quot;I had an idea: founding the first micro-computer software company.&quot;I&#39;d say it was a pretty good idea.And there&#39;s no magic to creativity in coming up with ideas – it&#39;s just doing some very simple things.And I give lots of evidence.Persist!Joe Kraus says, &quot;Persistence is the number one reason for our success.&quot;You&#39;ve got to persist through failure.You&#39;ve got to persist through crap!Which of course means &quot;Criticism, Rejection, Assholes and Pressure.&quot;(Laughter) So, the answer to this question is simple: Pay 4,000 bucks and come to TED.(Laughter) Or failing that, do the eight things – and trust me, these are the big eight things that lead to success.Thank you TEDsters for all your interviews!(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(9)　コンピュータの誕生 [Video]","slug":"ted-talks-programming-everyone-must-watch-9","date":"2017-11-24T22:00:01.000Z","updated":"2017-11-24T22:00:01.759Z","comments":true,"path":"2017/11/24/ted-talks-programming-everyone-must-watch-9/","link":"","permalink":"https://so-matome.net2017/11/24/ted-talks-programming-everyone-must-watch-9/","excerpt":"ジョージ・ダイソン：コンピュータの誕生MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第9段は「ジョージ・ダイソン：コンピュータの誕生」。以下のように紹介されています：\n\nあなたがどこに行こうとしているのかを知るためには、どこから来たのか理解しなければなりません。この17分間のTED Talkでは、歴史家のDysonが1600年代からコンピュータの歴史を説明し、我々がどうして今ここいるのかを解説してくれていますす。興味深いだけでなく、理解するのも簡単です。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ジョージ・ダイソン：コンピュータの誕生MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第9段は「ジョージ・ダイソン：コンピュータの誕生」。以下のように紹介されています： あなたがどこに行こうとしているのかを知るためには、どこから来たのか理解しなければなりません。この17分間のTED Talkでは、歴史家のDysonが1600年代からコンピュータの歴史を説明し、我々がどうして今ここいるのかを解説してくれていますす。興味深いだけでなく、理解するのも簡単です。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： Last year, I told you the story, in seven minutes, of Project Orion, which was this very implausible technology that technically could have worked, but it had this one-year political window where it could have happened.So it didn&#39;t happen. It was a dream that did not happen.This year I&#39;m going to tell you the story of the birth of digital computing.This was a perfect introduction.And it&#39;s a story that did work. It did happen, and the machines are all around us.And it was a technology that was inevitable.If the people I&#39;m going to tell you the story about, if they hadn&#39;t done it, somebody else would have.So, it was sort of the right idea at the right time.This is Barricelli&#39;s universe. This is the universe we live in now.It&#39;s the universe in which these machines are now doing all these things, including changing biology.I&#39;m starting the story with the first atomic bomb at Trinity, which was the Manhattan Project. It was a little bit like TED: it brought a whole lot of very smart people together.And three of the smartest people were Stan Ulam, Richard Feynman and John von Neumann.And it was Von Neumann who said, after the bomb, he was working on something much more important than bombs: he&#39;s thinking about computers.So, he wasn&#39;t only thinking about them; he built one. This is the machine he built.(Laughter) He built this machine, and we had a beautiful demonstration of how this thing really works, with these little bits. And it&#39;s an idea that goes way back.The first person to really explain that was Thomas Hobbes, who, in 1651, explained how arithmetic and logic are the same thing, and if you want to do artificial thinking and artificial logic, you can do it all with arithmetic.He said you needed addition and subtraction.Leibniz, who came a little bit later – this is 1679 – showed that you didn&#39;t even need subtraction.You could do the whole thing with addition.Here, we have all the binary arithmetic and logic that drove the computer revolution.And Leibniz was the first person to really talk about building such a machine.He talked about doing it with marbles, having gates and what we now call shift registers, where you shift the gates, drop the marbles down the tracks.And that&#39;s what all these machines are doing, except, instead of doing it with marbles, they&#39;re doing it with electrons.And then we jump to Von Neumann, 1945, when he sort of reinvents the whole same thing.And 1945, after the war, the electronics existed to actually try and build such a machine.So June 1945 – actually, the bomb hasn&#39;t even been dropped yet – and Von Neumann is putting together all the theory to actually build this thing, which also goes back to Turing, who, before that, gave the idea that you could do all this with a very brainless, little, finite state machine, just reading a tape in and reading a tape out.The other sort of genesis of what Von Neumann did was the difficulty of how you would predict the weather.Lewis Richardson saw how you could do this with a cellular array of people, giving them each a little chunk, and putting it together.Here, we have an electrical model illustrating a mind having a will, but capable of only two ideas.(Laughter) And that&#39;s really the simplest computer.It&#39;s basically why you need the qubit, because it only has two ideas.And you put lots of those together, you get the essentials of the modern computer: the arithmetic unit, the central control, the memory, the recording medium, the input and the output.But, there&#39;s one catch. This is the fatal – you know, we saw it in starting these programs up.The instructions which govern this operation must be given in absolutely exhaustive detail.So, the programming has to be perfect, or it won&#39;t work.If you look at the origins of this, the classic history sort of takes it all back to the ENIAC here.But actually, the machine I&#39;m going to tell you about, the Institute for Advanced Study machine, which is way up there, really should be down there. So, I&#39;m trying to revise history, and give some of these guys more credit than they&#39;ve had.Such a computer would open up universes, which are, at the present, outside the range of any instruments.So it opens up a whole new world, and these people saw it.The guy who was supposed to build this machine was the guy in the middle, Vladimir Zworykin, from RCA.RCA, in probably one of the lousiest business decisions of all time, decided not to go into computers.But the first meetings, November 1945, were at RCA&#39;s offices.RCA started this whole thing off, and said, you know, televisions are the future, not computers.The essentials were all there – all the things that make these machines run.Von Neumann, and a logician, and a mathematician from the army put this together. Then, they needed a place to build it.When RCA said no, that&#39;s when they decided to build it in Princeton, where Freeman works at the Institute.That&#39;s where I grew up as a kid.That&#39;s me, that&#39;s my sister Esther, who&#39;s talked to you before, so we both go back to the birth of this thing.That&#39;s Freeman, a long time ago, and that was me.And this is Von Neumann and Morgenstern, who wrote the &quot;Theory of Games.&quot;All these forces came together there, in Princeton.Oppenheimer, who had built the bomb.The machine was actually used mainly for doing bomb calculations.And Julian Bigelow, who took Zworkykin&#39;s place as the engineer, to actually figure out, using electronics, how you would build this thing. The whole gang of people who came to work on this, and women in front, who actually did most of the coding, were the first programmers.These were the prototype geeks, the nerds.They didn&#39;t fit in at the Institute.This is a letter from the director, concerned about – &quot;especially unfair on the matter of sugar.&quot;(Laughter) You can read the text.(Laughter) This is hackers getting in trouble for the first time.(Laughter).These were not theoretical physicists.They were real soldering-gun type guys, and they actually built this thing.And we take it for granted now, that each of these machines has billions of transistors, doing billions of cycles per second without failing.They were using vacuum tubes, very narrow, sloppy techniques to get actually binary behavior out of these radio vacuum tubes.They actually used 6J6, the common radio tube, because they found they were more reliable than the more expensive tubes.And what they did at the Institute was publish every step of the way.Reports were issued, so that this machine was cloned at 15 other places around the world.And it really was. It was the original microprocessor.All the computers now are copies of that machine.The memory was in cathode ray tubes – a whole bunch of spots on the face of the tube – very, very sensitive to electromagnetic disturbances.So, there&#39;s 40 of these tubes, like a V-40 engine running the memory.(Laughter) The input and the output was by teletype tape at first.This is a wire drive, using bicycle wheels.This is the archetype of the hard disk that&#39;s in your machine now.Then they switched to a magnetic drum.This is modifying IBM equipment, which is the origins of the whole data-processing industry, later at IBM.And this is the beginning of computer graphics.The &quot;Graph&#39;g-Beam Turn On.&quot; This next slide, that&#39;s the – as far as I know – the first digital bitmap display, 1954.So, Von Neumann was already off in a theoretical cloud, doing abstract sorts of studies of how you could build reliable machines out of unreliable components.Those guys drinking all the tea with sugar in it were writing in their logbooks, trying to get this thing to work, with all these 2,600 vacuum tubes that failed half the time.And that&#39;s what I&#39;ve been doing, this last six months, is going through the logs.&quot;Running time: two minutes. Input, output: 90 minutes.&quot;This includes a large amount of human error.So they are always trying to figure out, what&#39;s machine error? What&#39;s human error?What&#39;s code, what&#39;s hardware?That&#39;s an engineer gazing at tube number 36, trying to figure out why the memory&#39;s not in focus.He had to focus the memory – seems OK.So, he had to focus each tube just to get the memory up and running, let alone having, you know, software problems.&quot;No use, went home.&quot; (Laughter) &quot;Impossible to follow the damn thing, where&#39;s a directory?&quot;So, already, they&#39;re complaining about the manuals: &quot;before closing down in disgust … &quot; &quot;The General Arithmetic: Operating Logs.&quot;Burning lots of midnight oil.&quot;MANIAC,&quot; which became the acronym for the machine, Mathematical and Numerical Integrator and Calculator, &quot;lost its memory.&quot;&quot;MANIAC regained its memory, when the power went off.&quot; &quot;Machine or human?&quot;&quot;Aha!&quot; So, they figured out it&#39;s a code problem.&quot;Found trouble in code, I hope.&quot;&quot;Code error, machine not guilty.&quot;&quot;Damn it, I can be just as stubborn as this thing.&quot;(Laughter) &quot;And the dawn came.&quot; So they ran all night.Twenty-four hours a day, this thing was running, mainly running bomb calculations.&quot;Everything up to this point is wasted time.&quot; &quot;What&#39;s the use? Good night.&quot;&quot;Master control off. The hell with it. Way off.&quot; (Laughter) &quot;Something&#39;s wrong with the air conditioner – smell of burning V-belts in the air.&quot;&quot;A short – do not turn the machine on.&quot;&quot;IBM machine putting a tar-like substance on the cards. The tar is from the roof.&quot;So they really were working under tough conditions.(Laughter) Here, &quot;A mouse has climbed into the blower behind the regulator rack, set blower to vibrating. Result: no more mouse.&quot;(Laughter) &quot;Here lies mouse. Born: ?. Died: 4:50 a.m., May 1953.&quot;(Laughter) There&#39;s an inside joke someone has penciled in: &quot;Here lies Marston Mouse.&quot;If you&#39;re a mathematician, you get that, because Marston was a mathematician who objected to the computer being there.&quot;Picked a lightning bug off the drum.&quot; &quot;Running at two kilocycles.&quot;That&#39;s two thousand cycles per second – &quot;yes, I&#39;m chicken&quot; – so two kilocycles was slow speed.The high speed was 16 kilocycles.I don&#39;t know if you remember a Mac that was 16 Megahertz, that&#39;s slow speed.&quot;I have now duplicated both results.How will I know which is right, assuming one result is correct?This now is the third different output.I know when I&#39;m licked.&quot;(Laughter) &quot;We&#39;ve duplicated errors before.&quot;&quot;Machine run, fine. Code isn&#39;t.&quot;&quot;Only happens when the machine is running.&quot;And sometimes things are okay.&quot;Machine a thing of beauty, and a joy forever.&quot; &quot;Perfect running.&quot;&quot;Parting thought: when there&#39;s bigger and better errors, we&#39;ll have them.&quot;So, nobody was supposed to know they were actually designing bombs.They&#39;re designing hydrogen bombs. But someone in the logbook, late one night, finally drew a bomb.So, that was the result. It was Mike, the first thermonuclear bomb, in 1952.That was designed on that machine, in the woods behind the Institute.So Von Neumann invited a whole gang of weirdos from all over the world to work on all these problems.Barricelli, he came to do what we now call, really, artificial life, trying to see if, in this artificial universe – he was a viral-geneticist, way, way, way ahead of his time.He&#39;s still ahead of some of the stuff that&#39;s being done now.Trying to start an artificial genetic system running in the computer.Began – his universe started March 3, &#39;53.So it&#39;s almost exactly – it&#39;s 50 years ago next Tuesday, I guess.And he saw everything in terms of – he could read the binary code straight off the machine.He had a wonderful rapport.Other people couldn&#39;t get the machine running. It always worked for him.Even errors were duplicated.(Laughter) &quot;Dr. Barricelli claims machine is wrong, code is right.&quot;So he designed this universe, and ran it.When the bomb people went home, he was allowed in there.He would run that thing all night long, running these things, if anybody remembers Stephen Wolfram, who reinvented this stuff.And he published it. It wasn&#39;t locked up and disappeared.It was published in the literature.&quot;If it&#39;s that easy to create living organisms, why not create a few yourself?&quot;So, he decided to give it a try, to start this artificial biology going in the machines.And he found all these, sort of – it was like a naturalist coming in and looking at this tiny, 5,000-byte universe, and seeing all these things happening that we see in the outside world, in biology.This is some of the generations of his universe.But they&#39;re just going to stay numbers; they&#39;re not going to become organisms.They have to have something.You have a genotype and you have to have a phenotype.They have to go out and do something. And he started doing that, started giving these little numerical organisms things they could play with – playing chess with other machines and so on.And they did start to evolve.And he went around the country after that.Every time there was a new, fast machine, he started using it, and saw exactly what&#39;s happening now.That the programs, instead of being turned off – when you quit the program, you&#39;d keep running and, basically, all the sorts of things like Windows is doing, running as a multi-cellular organism on many machines, he envisioned all that happening.And he saw that evolution itself was an intelligent process.It wasn&#39;t any sort of creator intelligence, but the thing itself was a giant parallel computation that would have some intelligence.And he went out of his way to say that he was not saying this was lifelike, or a new kind of life.It just was another version of the same thing happening.And there&#39;s really no difference between what he was doing in the computer and what nature did billions of years ago.And could you do it again now?So, when I went into these archives looking at this stuff, lo and behold, the archivist came up one day, saying, &quot;I think we found another box that had been thrown out.&quot;And it was his universe on punch cards.So there it is, 50 years later, sitting there – sort of suspended animation.That&#39;s the instructions for running – this is actually the source code for one of those universes, with a note from the engineers saying they&#39;re having some problems.&quot;There must be something about this code that you haven&#39;t explained yet.&quot;And I think that&#39;s really the truth. We still don&#39;t understand how these very simple instructions can lead to increasing complexity.What&#39;s the dividing line between when that is lifelike and when it really is alive?These cards, now, thanks to me showing up, are being saved.And the question is, should we run them or not?You know, could we get them running?Do you want to let it loose on the Internet?These machines would think they – these organisms, if they came back to life now – whether they&#39;ve died and gone to heaven, there&#39;s a universe.My laptop is 10 thousand million times the size of the universe that they lived in when Barricelli quit the project.He was thinking far ahead, to how this would really grow into a new kind of life.And that&#39;s what&#39;s happening!When Juan Enriquez told us about these 12 trillion bits being transferred back and forth, of all this genomics data going to the proteomics lab, that&#39;s what Barricelli imagined: that this digital code in these machines is actually starting to code – it already is coding from nucleic acids.We&#39;ve been doing that since, you know, since we started PCR and synthesizing small strings of DNA.And real soon, we&#39;re actually going to be synthesizing the proteins, and, like Steve showed us, that just opens an entirely new world.It&#39;s a world that Von Neumann himself envisioned.This was published after he died: his sort of unfinished notes on self-reproducing machines, what it takes to get the machines sort of jump-started to where they begin to reproduce.It took really three people: Barricelli had the concept of the code as a living thing; Von Neumann saw how you could build the machines – that now, last count, four million of these Von Neumann machines is built every 24 hours; and Julian Bigelow, who died 10 days ago – this is John Markoff&#39;s obituary for him – he was the important missing link, the engineer who came in and knew how to put those vacuum tubes together and make it work.And all our computers have, inside them, the copies of the architecture that he had to just design one day, sort of on pencil and paper.And we owe a tremendous credit to that.And he explained, in a very generous way, the spirit that brought all these different people to the Institute for Advanced Study in the &#39;40s to do this project, and make it freely available with no patents, no restrictions, no intellectual property disputes to the rest of the world.That&#39;s the last entry in the logbook when the machine was shut down, July 1958.And it&#39;s Julian Bigelow who was running it until midnight when the machine was officially turned off.And that&#39;s the end.Thank you very much.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(10)　アルゴリズムがどう我々の世界を形作っているか [Video]","slug":"ted-talks-programming-everyone-must-watch-10","date":"2017-11-17T22:00:01.000Z","updated":"2017-11-17T22:00:01.486Z","comments":true,"path":"2017/11/17/ted-talks-programming-everyone-must-watch-10/","link":"","permalink":"https://so-matome.net2017/11/17/ted-talks-programming-everyone-must-watch-10/","excerpt":"ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているかMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第10段は「ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか」。以下のように紹介されています：\n\nこの15分のプログラミングに関するTED Talkでは、Slavinはプログラミングが現代の我々にとって非常に重要である理由を示してくれています。現代のアルゴリズムはあまりにも無謀に書かれています。プログラマとしては、これも考慮しておく必要があるのではないでしょうか。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているかMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第10段は「ケビン・スラヴィン：アルゴリズムがどう我々の世界を形作っているか」。以下のように紹介されています： この15分のプログラミングに関するTED Talkでは、Slavinはプログラミングが現代の我々にとって非常に重要である理由を示してくれています。現代のアルゴリズムはあまりにも無謀に書かれています。プログラマとしては、これも考慮しておく必要があるのではないでしょうか。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： This is a photograph by the artist Michael Najjar, and it’s real, in the sense that he went there to Argentina to take the photo. But it’s also a fiction. There’s a lot of work that went into it after that. And what he’s done is he’s actually reshaped, digitally, all of the contours of the mountains to follow the vicissitudes of the Dow Jones index. So what you see, that precipice, that high precipice with the valley, is the 2008 financial crisis. The photo was made when we were deep in the valley over there. I don’t know where we are now. This is the Hang Seng index for Hong Kong. And similar topography. I wonder why.And this is art. This is metaphor. But I think the point is that this is metaphor with teeth, and it’s with those teeth that I want to propose today that we rethink a little bit about the role of contemporary math – not just financial math, but math in general. That its transition from being something that we extract and derive from the world to something that actually starts to shape it – the world around us and the world inside us. And it’s specifically algorithms, which are basically the math that computers use to decide stuff. They acquire the sensibility of truth because they repeat over and over again, and they ossify and calcify, and they become real.And I was thinking about this, of all places, on a transatlantic flight a couple of years ago, because I happened to be seated next to a Hungarian physicist about my age and we were talking about what life was like during the Cold War for physicists in Hungary. And I said, “So what were you doing?”And he said, “Well we were mostly breaking stealth.”And I said, “That’s a good job. That’s interesting. How does that work?” And to understand that, you have to understand a little bit about how stealth works. And so – this is an over-simplification – but basically, it’s not like you can just pass a radar signal right through 156 tons of steel in the sky. It’s not just going to disappear. But if you can take this big, massive thing, and you could turn it into a million little things – something like a flock of birds – well then the radar that’s looking for that has to be able to see every flock of birds in the sky. And if you’re a radar, that’s a really bad job.And he said, “Yeah.” He said, “But that’s if you’re a radar. So we didn’t use a radar; we built a black box that was looking for electrical signals, electronic communication. And whenever we saw a flock of birds that had electronic communication, we thought, ‘Probably has something to do with the Americans.’”And I said, “Yeah. That’s good. So you’ve effectively negated 60 years of aeronautic research. What’s your act two? What do you do when you grow up?” And he said, “Well, financial services.” And I said, “Oh.” Because those had been in the news lately. And I said, “How does that work?” And he said, “Well there’s 2,000 physicists on Wall Street now, and I’m one of them.” And I said, “What’s the black box for Wall Street?”And he said, “It’s funny you ask that, because it’s actually called black box trading. And it’s also sometimes called algo trading, algorithmic trading.” And algorithmic trading evolved in part because institutional traders have the same problems that the United States Air Force had, which is that they’re moving these positions – whether it’s Proctor &amp; Gamble or Accenture, whatever – they’re moving a million shares of something through the market. And if they do that all at once, it’s like playing poker and going all in right away. You just tip your hand. And so they have to find a way – and they use algorithms to do this – to break up that big thing into a million little transactions. And the magic and the horror of that is that the same math that you use to break up the big thing into a million little things can be used to find a million little things and sew them back together and figure out what’s actually happening in the market.So if you need to have some image of what’s happening in the stock market right now, what you can picture is a bunch of algorithms that are basically programmed to hide, and a bunch of algorithms that are programmed to go find them and act. And all of that’s great, and it’s fine. And that’s 70 percent of the United States stock market, 70 percent of the operating system formerly known as your pension, your mortgage.And what could go wrong? What could go wrong is that a year ago, nine percent of the entire market just disappears in five minutes, and they called it the Flash Crash of 2:45. All of a sudden, nine percent just goes away, and nobody to this day can even agree on what happened because nobody ordered it, nobody asked for it. Nobody had any control over what was actually happening. All they had was just a monitor in front of them that had the numbers on it and just a red button that said, “Stop.”And that’s the thing, is that we’re writing things, we’re writing these things that we can no longer read. And we’ve rendered something illegible, and we’ve lost the sense of what’s actually happening in this world that we’ve made. And we’re starting to make our way. There’s a company in Boston called Nanex, and they use math and magic and I don’t know what, and they reach into all the market data and they find, actually sometimes, some of these algorithms. And when they find them they pull them out and they pin them to the wall like butterflies. And they do what we’ve always done when confronted with huge amounts of data that we don’t understand – which is that they give them a name and a story. So this is one that they found, they called the Knife, the Carnival, the Boston Shuffler, Twilight.And the gag is that, of course, these aren’t just running through the market. You can find these kinds of things wherever you look, once you learn how to look for them. You can find it here: this book about flies that you may have been looking at on Amazon. You may have noticed it when its price started at 1.7 million dollars. It’s out of print – still … (Laughter) If you had bought it at 1.7, it would have been a bargain. A few hours later, it had gone up to 23.6 million dollars, plus shipping and handling. And the question is: Nobody was buying or selling anything; what was happening? And you see this behavior on Amazon as surely as you see it on Wall Street. And when you see this kind of behavior, what you see is the evidence of algorithms in conflict, algorithms locked in loops with each other, without any human oversight, without any adult supervision to say, “Actually, 1.7 million is plenty.”(Laughter)And as with Amazon, so it is with Netflix. And so Netflix has gone through several different algorithms over the years. They started with Cinematch, and they’ve tried a bunch of others – there’s Dinosaur Planet; there’s Gravity. They’re using Pragmatic Chaos now. Pragmatic Chaos is, like all of Netflix algorithms, trying to do the same thing. It’s trying to get a grasp on you, on the firmware inside the human skull, so that it can recommend what movie you might want to watch next – which is a very, very difficult problem. But the difficulty of the problem and the fact that we don’t really quite have it down, it doesn’t take away from the effects Pragmatic Chaos has. Pragmatic Chaos, like all Netflix algorithms, determines, in the end, 60 percent of what movies end up being rented. So one piece of code with one idea about you is responsible for 60 percent of those movies.But what if you could rate those movies before they get made? Wouldn’t that be handy? Well, a few data scientists from the U.K. are in Hollywood, and they have “story algorithms” – a company called Epagogix. And you can run your script through there, and they can tell you, quantifiably, that that’s a 30 million dollar movie or a 200 million dollar movie. And the thing is, is that this isn’t Google. This isn’t information. These aren’t financial stats; this is culture. And what you see here, or what you don’t really see normally, is that these are the physics of culture. And if these algorithms, like the algorithms on Wall Street, just crashed one day and went awry, how would we know? What would it look like?And they’re in your house. They’re in your house. These are two algorithms competing for your living room. These are two different cleaning robots that have very different ideas about what clean means. And you can see it if you slow it down and attach lights to them, and they’re sort of like secret architects in your bedroom. And the idea that architecture itself is somehow subject to algorithmic optimization is not far-fetched. It’s super-real and it’s happening around you.You feel it most when you’re in a sealed metal box, a new-style elevator; they’re called destination-control elevators. These are the ones where you have to press what floor you’re going to go to before you get in the elevator. And it uses what’s called a bin-packing algorithm. So none of this mishegas of letting everybody go into whatever car they want. Everybody who wants to go to the 10th floor goes into car two, and everybody who wants to go to the third floor goes into car five. And the problem with that is that people freak out. People panic. And you see why. You see why. It’s because the elevator is missing some important instrumentation, like the buttons. (Laughter) Like the things that people use. All it has is just the number that moves up or down and that red button that says, “Stop.” And this is what we’re designing for. We’re designing for this machine dialect. And how far can you take that? How far can you take it? You can take it really, really far.So let me take it back to Wall Street. Because the algorithms of Wall Street are dependent on one quality above all else, which is speed. And they operate on milliseconds and microseconds. And just to give you a sense of what microseconds are, it takes you 500,000 microseconds just to click a mouse. But if you’re a Wall Street algorithm and you’re five microseconds behind, you’re a loser. So if you were an algorithm, you’d look for an architect like the one that I met in Frankfurt who was hollowing out a skyscraper – throwing out all the furniture, all the infrastructure for human use, and just running steel on the floors to get ready for the stacks of servers to go in – all so an algorithm could get close to the Internet.And you think of the Internet as this kind of distributed system. And of course, it is, but it’s distributed from places. In New York, this is where it’s distributed from: the Carrier Hotel located on Hudson Street. And this is really where the wires come right up into the city. And the reality is that the further away you are from that, you’re a few microseconds behind every time. These guys down on Wall Street, Marco Polo and Cherokee Nation, they’re eight microseconds behind all these guys going into the empty buildings being hollowed out up around the Carrier Hotel. And that’s going to keep happening. We’re going to keep hollowing them out, because you, inch for inch and pound for pound and dollar for dollar, none of you could squeeze revenue out of that space like the Boston Shuffler could.But if you zoom out, if you zoom out, you would see an 825-mile trench between New York City and Chicago that’s been built over the last few years by a company called Spread Networks. This is a fiber optic cable that was laid between those two cities to just be able to traffic one signal 37 times faster than you can click a mouse – just for these algorithms, just for the Carnival and the Knife. And when you think about this, that we’re running through the United States with dynamite and rock saws so that an algorithm can close the deal three microseconds faster, all for a communications framework that no human will ever know, that’s a kind of manifest destiny; and we’ll always look for a new frontier.Unfortunately, we have our work cut out for us. This is just theoretical. This is some mathematicians at MIT. And the truth is I don’t really understand a lot of what they’re talking about. It involves light cones and quantum entanglement, and I don’t really understand any of that. But I can read this map, and what this map says is that, if you’re trying to make money on the markets where the red dots are, that’s where people are, where the cities are, you’re going to have to put the servers where the blue dots are to do that most effectively. And the thing that you might have noticed about those blue dots is that a lot of them are in the middle of the ocean. So that’s what we’ll do: we’ll build bubbles or something, or platforms. We’ll actually part the water to pull money out of the air, because it’s a bright future if you’re an algorithm.(Laughter)And it’s not the money that’s so interesting actually. It’s what the money motivates, that we’re actually terraforming the Earth itself with this kind of algorithmic efficiency. And in that light, you go back and you look at Michael Najjar’s photographs, and you realize that they’re not metaphor, they’re prophecy. They’re prophecy for the kind of seismic, terrestrial effects of the math that we’re making. And the landscape was always made by this sort of weird, uneasy collaboration between nature and man. But now there’s this third co-evolutionary force: algorithms – the Boston Shuffler, the Carnival. And we will have to understand those as nature, and in a way, they are.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(11)　脳科学がどうコンピューティングを変えるか [Video]","slug":"ted-talks-programming-everyone-must-watch-11","date":"2017-11-10T22:00:01.000Z","updated":"2017-11-10T22:00:01.944Z","comments":true,"path":"2017/11/10/ted-talks-programming-everyone-must-watch-11/","link":"","permalink":"https://so-matome.net2017/11/10/ted-talks-programming-everyone-must-watch-11/","excerpt":"ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるかMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第11段は「ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか」。以下のように紹介されています：\n\n私たちはしばしばコンピュータと頭脳は基本的に同じだと考えますが、でもたぶんそれよりもっと深い話です。 コンピュータは脳について多くのことを教えてくれすが、我々が脳について学ぶことはまだまだたくさんあります。脳科学の知識の進歩によって、我々のコンピューティングの理解も進化するでしょう。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるかMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第11段は「ジェフ・ホーキンス：脳科学がどうコンピューティングを変えるか」。以下のように紹介されています： 私たちはしばしばコンピュータと頭脳は基本的に同じだと考えますが、でもたぶんそれよりもっと深い話です。 コンピュータは脳について多くのことを教えてくれすが、我々が脳について学ぶことはまだまだたくさんあります。脳科学の知識の進歩によって、我々のコンピューティングの理解も進化するでしょう。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： I do two things: I design mobile computers and I study brains.Today&#39;s talk is about brains and – (Audience member cheers) Yay! I have a brain fan out there.(Laughter) If I could have my first slide, you&#39;ll see the title of my talk and my two affiliations.So what I&#39;m going to talk about is why we don&#39;t have a good brain theory, why it is important that we should develop one and what we can do about it.I&#39;ll try to do all that in 20 minutes.I have two affiliations.Most of you know me from my Palm and Handspring days, but I also run a nonprofit scientific research institute called the Redwood Neuroscience Institute in Menlo Park.We study theoretical neuroscience and how the neocortex works.I&#39;m going to talk all about that.I have one slide on my other life, the computer life, and that&#39;s this slide here.These are some of the products I&#39;ve worked on over the last 20 years, starting from the very original laptop to some of the first tablet computers and so on, ending up most recently with the Treo, and we&#39;re continuing to do this.I&#39;ve done this because I believe mobile computing is the future of personal computing, and I&#39;m trying to make the world a little bit better by working on these things.But this was, I admit, all an accident.I really didn&#39;t want to do any of these products.Very early in my career I decided I was not going to be in the computer industry.Before that, I just have to tell you about this picture of Graffiti I picked off the web the other day.I was looking for a picture for Graffiti that&#39;ll text input language.I found a website dedicated to teachers who want to make script-writing things across the top of their blackboard, and they had added Graffiti to it, and I&#39;m sorry about that.(Laughter) So what happened was, when I was young and got out of engineering school at Cornell in &#39;79, I went to work for Intel and was in the computer industry, and three months into that, I fell in love with something else.I said, &quot;I made the wrong career choice here,&quot; and I fell in love with brains.This is not a real brain.This is a picture of one, a line drawing.And I don&#39;t remember exactly how it happened, but I have one recollection, which was pretty strong in my mind.In September of 1979, Scientific American came out with a single-topic issue about the brain.It was one of their best issues ever.They talked about the neuron, development, disease, vision and all the things you might want to know about brains.It was really quite impressive.One might&#39;ve had the impression we knew a lot about brains.But the last article in that issue was written by Francis Crick of DNA fame.Today is, I think, the 50th anniversary of the discovery of DNA.And he wrote a story basically saying, this is all well and good, but you know, we don&#39;t know diddly squat about brains, and no one has a clue how they work, so don&#39;t believe what anyone tells you.This is a quote from that article, he says: &quot;What is conspicuously lacking&quot; – he&#39;s a very proper British gentleman – &quot;What is conspicuously lacking is a broad framework of ideas in which to interpret these different approaches.&quot;I thought the word &quot;framework&quot; was great.He didn&#39;t say we didn&#39;t have a theory.He says we don&#39;t even know how to begin to think about it.We don&#39;t even have a framework.We are in the pre-paradigm days, if you want to use Thomas Kuhn.So I fell in love with this.I said, look: We have all this knowledge about brains – how hard can it be?It&#39;s something we can work on in my lifetime; I could make a difference.So I tried to get out of the computer business, into the brain business.First, I went to MIT, the AI lab was there.I said, I want to build intelligent machines too, but I want to study how brains work first.And they said, &quot;Oh, you don&#39;t need to do that.You&#39;re just going to program computers, that&#39;s all.I said, you really ought to study brains.They said, &quot;No, you&#39;re wrong.&quot;I said, &quot;No, you&#39;re wrong,&quot; and I didn&#39;t get in.(Laughter) I was a little disappointed – pretty young – but I went back again a few years later, this time in California, and I went to Berkeley.And I said, I&#39;ll go in from the biological side.So I got in the PhD program in biophysics.I was like, I&#39;m studying brains now.Well, I want to study theory.They said, &quot;You can&#39;t study theory about brains.You can&#39;t get funded for that.And as a graduate student, you can&#39;t do that.&quot;So I said, oh my gosh.I was depressed; I said, but I can make a difference in this field.I went back in the computer industry and said, I&#39;ll have to work here for a while.That&#39;s when I designed all those computer products.(Laughter) I said, I want to do this for four years, make some money, I was having a family, and I would mature a bit, and maybe the business of neuroscience would mature a bit.Well, it took longer than four years.It&#39;s been about 16 years.But I&#39;m doing it now, and I&#39;m going to tell you about it.So why should we have a good brain theory?Well, there&#39;s lots of reasons people do science.The most basic one is, people like to know things.We&#39;re curious, and we go out and get knowledge.Why do we study ants? It&#39;s interesting.Maybe we&#39;ll learn something useful, but it&#39;s interesting and fascinating.But sometimes a science has other attributes which makes it really interesting.Sometimes a science will tell something about ourselves; it&#39;ll tell us who we are.Evolution did this and Copernicus did this, where we have a new understanding of who we are.And after all, we are our brains.My brain is talking to your brain.Our bodies are hanging along for the ride, but my brain is talking to your brain.And if we want to understand who we are and how we feel and perceive, we need to understand brains.Another thing is sometimes science leads to big societal benefits, technologies, or businesses or whatever.This is one, too, because when we understand how brains work, we&#39;ll be able to build intelligent machines.That&#39;s a good thing on the whole, with tremendous benefits to society, just like a fundamental technology.So why don&#39;t we have a good theory of brains?People have been working on it for 100 years.Let&#39;s first take a look at what normal science looks like.This is normal science.Normal science is a nice balance between theory and experimentalists.The theorist guy says, &quot;I think this is what&#39;s going on,&quot; the experimentalist says, &quot;You&#39;re wrong.&quot;It goes back and forth, this works in physics, this in geology.But if this is normal science, what does neuroscience look like?This is what neuroscience looks like.We have this mountain of data, which is anatomy, physiology and behavior.You can&#39;t imagine how much detail we know about brains.There were 28,000 people who went to the neuroscience conference this year, and every one of them is doing research in brains.A lot of data, but no theory.There&#39;s a little wimpy box on top there.And theory has not played a role in any sort of grand way in the neurosciences.And it&#39;s a real shame.Now, why has this come about?If you ask neuroscientists why is this the state of affairs, first, they&#39;ll admit it.But if you ask them, they say, there&#39;s various reasons we don&#39;t have a good brain theory.Some say we still don&#39;t have enough data, we need more information, there&#39;s all these things we don&#39;t know.Well, I just told you there&#39;s data coming out of your ears.We have so much information, we don&#39;t even know how to organize it.What good is more going to do?Maybe we&#39;ll be lucky and discover some magic thing, but I don&#39;t think so.This is a symptom of the fact that we just don&#39;t have a theory.We don&#39;t need more data, we need a good theory.Another one is sometimes people say, &quot;Brains are so complex, it&#39;ll take another 50 years.&quot;I even think Chris said something like this yesterday, something like, it&#39;s one of the most complicated things in the universe.That&#39;s not true – you&#39;re more complicated than your brain.You&#39;ve got a brain.And although the brain looks very complicated, things look complicated until you understand them.That&#39;s always been the case.So we can say, my neocortex, the part of the brain I&#39;m interested in, has 30 billion cells.But, you know what?It&#39;s very, very regular.In fact, it looks like it&#39;s the same thing repeated over and over again.It&#39;s not as complex as it looks.That&#39;s not the issue.Some people say, brains can&#39;t understand brains.Very Zen-like. Woo.(Laughter) You know, it sounds good, but why?I mean, what&#39;s the point?It&#39;s just a bunch of cells.You understand your liver.It&#39;s got a lot of cells in it too, right?So, you know, I don&#39;t think there&#39;s anything to that.And finally, some people say, &quot;I don&#39;t feel like a bunch of cells – I&#39;m conscious.I&#39;ve got this experience, I&#39;m in the world.I can&#39;t be just a bunch of cells.&quot;Well, people used to believe there was a life force to be living, and we now know that&#39;s really not true at all.And there&#39;s really no evidence, other than that people just disbelieve that cells can do what they do.So some people have fallen into the pit of metaphysical dualism, some really smart people, too, but we can reject all that.(Laughter) No, there&#39;s something else, something really fundamental, and it is: another reason why we don&#39;t have a good brain theory is because we have an intuitive, strongly held but incorrect assumption that has prevented us from seeing the answer.There&#39;s something we believe that just, it&#39;s obvious, but it&#39;s wrong.Now, there&#39;s a history of this in science and before I tell you what it is, I&#39;ll tell you about the history of it in science.Look at other scientific revolutions – the solar system, that&#39;s Copernicus, Darwin&#39;s evolution, and tectonic plates, that&#39;s Wegener.They all have a lot in common with brain science.First, they had a lot of unexplained data. A lot of it.But it got more manageable once they had a theory.The best minds were stumped – really smart people.We&#39;re not smarter now than they were then; it just turns out it&#39;s really hard to think of things, but once you&#39;ve thought of them, it&#39;s easy to understand.My daughters understood these three theories, in their basic framework, in kindergarten.It&#39;s not that hard – here&#39;s the apple, here&#39;s the orange, the Earth goes around, that kind of stuff.Another thing is the answer was there all along, but we kind of ignored it because of this obvious thing.It was an intuitive, strongly held belief that was wrong.In the case of the solar system, the idea that the Earth is spinning, the surface is going a thousand miles an hour, and it&#39;s going through the solar system at a million miles an hour – this is lunacy; we all know the Earth isn&#39;t moving.Do you feel like you&#39;re moving a thousand miles an hour?If you said Earth was spinning around in space and was huge – they would lock you up, that&#39;s what they did back then.So it was intuitive and obvious.Now, what about evolution?Evolution, same thing.We taught our kids the Bible says God created all these species, cats are cats; dogs are dogs; people are people; plants are plants; they don&#39;t change.Noah put them on the ark in that order, blah, blah.The fact is, if you believe in evolution, we all have a common ancestor.We all have a common ancestor with the plant in the lobby!This is what evolution tells us.And it&#39;s true. It&#39;s kind of unbelievable.And the same thing about tectonic plates.All the mountains and the continents are kind of floating around on top of the Earth.It doesn&#39;t make any sense.So what is the intuitive, but incorrect assumption, that&#39;s kept us from understanding brains?I&#39;ll tell you. It&#39;ll seem obvious that it&#39;s correct. That&#39;s the point.Then I&#39;ll make an argument why you&#39;re incorrect on the other assumption.The intuitive but obvious thing is: somehow, intelligence is defined by behavior; we&#39;re intelligent because of how we do things and how we behave intelligently.And I&#39;m going to tell you that&#39;s wrong.Intelligence is defined by prediction.I&#39;m going to work you through this in a few slides, and give you an example of what this means.Here&#39;s a system.Engineers and scientists like to look at systems like this.They say, we have a thing in a box.We have its inputs and outputs.The AI people said, the thing in the box is a programmable computer, because it&#39;s equivalent to a brain.We&#39;ll feed it some inputs and get it to do something, have some behavior.Alan Turing defined the Turing test, which essentially says, we&#39;ll know if something&#39;s intelligent if it behaves identical to a human – a behavioral metric of what intelligence is that has stuck in our minds for a long time.Reality, though – I call it real intelligence.Real intelligence is built on something else.We experience the world through a sequence of patterns, and we store them, and we recall them.When we recall them, we match them up against reality, and we&#39;re making predictions all the time.It&#39;s an internal metric; there&#39;s an internal metric about us, saying, do we understand the world, am I making predictions, and so on.You&#39;re all being intelligent now, but you&#39;re not doing anything.Maybe you&#39;re scratching yourself, but you&#39;re not doing anything.But you&#39;re being intelligent; you&#39;re understanding what I&#39;m saying.Because you&#39;re intelligent and you speak English, you know the word at the end of this sentence.The word came to you; you make these predictions all the time.What I&#39;m saying is, the internal prediction is the output in the neocortex, and somehow, prediction leads to intelligent behavior.Here&#39;s how that happens: Let&#39;s start with a non-intelligent brain.I&#39;ll argue a non-intelligent brain, we&#39;ll call it an old brain.And we&#39;ll say it&#39;s a non-mammal, like a reptile, say, an alligator; we have an alligator.And the alligator has some very sophisticated senses.It&#39;s got good eyes and ears and touch senses and so on, a mouth and a nose.It has very complex behavior.It can run and hide. It has fears and emotions. It can eat you.It can attack.It can do all kinds of stuff.But we don&#39;t consider the alligator very intelligent, not in a human sort of way.But it has all this complex behavior already.Now in evolution, what happened?First thing that happened in evolution with mammals is we started to develop a thing called the neocortex.I&#39;m going to represent the neocortex by this box on top of the old brain.Neocortex means &quot;new layer.&quot;It&#39;s a new layer on top of your brain.It&#39;s the wrinkly thing on the top of your head that got wrinkly because it got shoved in there and doesn&#39;t fit.(Laughter) Literally, it&#39;s about the size of a table napkin and doesn&#39;t fit, so it&#39;s wrinkly.Now, look at how I&#39;ve drawn this.The old brain is still there.You still have that alligator brain.You do. It&#39;s your emotional brain.It&#39;s all those gut reactions you have.On top of it, we have this memory system called the neocortex.And the memory system is sitting over the sensory part of the brain.So as the sensory input comes in and feeds from the old brain, it also goes up into the neocortex.And the neocortex is just memorizing.It&#39;s sitting there saying, I&#39;m going to memorize all the things going on: where I&#39;ve been, people I&#39;ve seen, things I&#39;ve heard, and so on.And in the future, when it sees something similar to that again, in a similar environment, or the exact same environment, it&#39;ll start playing it back: &quot;Oh, I&#39;ve been here before,&quot; and when you were here before, this happened next.It allows you to predict the future.It literally feeds back the signals into your brain; they&#39;ll let you see what&#39;s going to happen next, will let you hear the word &quot;sentence&quot; before I said it.And it&#39;s this feeding back into the old brain that will allow you to make more intelligent decisions.This is the most important slide of my talk, so I&#39;ll dwell on it a little.And all the time you say, &quot;Oh, I can predict things,&quot; so if you&#39;re a rat and you go through a maze, and you learn the maze, next time you&#39;re in one, you have the same behavior.But suddenly, you&#39;re smarter; you say, &quot;I recognize this maze, I know which way to go; I&#39;ve been here before; I can envision the future.&quot;That&#39;s what it&#39;s doing.This is true for all mammals – in humans, it got a lot worse.Humans actually developed the front of the neocortex, called the anterior part of the neocortex.And nature did a little trick.It copied the posterior, the back part, which is sensory, and put it in the front.Humans uniquely have the same mechanism on the front, but we use it for motor control.So we&#39;re now able to do very sophisticated motor planning, things like that.I don&#39;t have time to explain, but to understand how a brain works, you have to understand how the first part of the mammalian neocortex works, how it is we store patterns and make predictions.Let me give you a few examples of predictions.I already said the word &quot;sentence.&quot;In music, if you&#39;ve heard a song before, when you hear it, the next note pops into your head already – you anticipate it.With an album, at the end of a song, the next song pops into your head.It happens all the time, you make predictions.I have this thing called the &quot;altered door&quot; thought experiment.It says, you have a door at home; when you&#39;re here, I&#39;m changing it – I&#39;ve got a guy back at your house right now, moving the door around, moving your doorknob over two inches.When you go home tonight, you&#39;ll put your hand out, reach for the doorknob, notice it&#39;s in the wrong spot and go, &quot;Whoa, something happened.&quot;It may take a second, but something happened.I can change your doorknob in other ways – make it larger, smaller, change its brass to silver, make it a lever, I can change the door; put colors on, put windows in.I can change a thousand things about your door and in the two seconds you take to open it, you&#39;ll notice something has changed.Now, the engineering approach, the AI approach to this, is to build a door database with all the door attributes.And as you go up to the door, we check them off one at time: door, door, color …We don&#39;t do that.Your brain doesn&#39;t do that.Your brain is making constant predictions all the time about what will happen in your environment.As I put my hand on this table, I expect to feel it stop.When I walk, every step, if I missed it by an eighth of an inch, I&#39;ll know something has changed.You&#39;re constantly making predictions about your environment.I&#39;ll talk about vision, briefly.This is a picture of a woman.When we look at people, our eyes saccade over two to three times a second.We&#39;re not aware of it, but our eyes are always moving.When we look at a face, we typically go from eye to eye to nose to mouth.When your eye moves from eye to eye, if there was something else there like a nose, you&#39;d see a nose where an eye is supposed to be and go, &quot;Oh, shit!&quot;(Laughter) &quot;There&#39;s something wrong about this person.&quot;That&#39;s because you&#39;re making a prediction.It&#39;s not like you just look over and say, &quot;What am I seeing? A nose? OK.&quot;No, you have an expectation of what you&#39;re going to see.Every single moment.And finally, let&#39;s think about how we test intelligence.We test it by prediction: What is the next word in this …?This is to this as this is to this.What is the next number in this sentence?Here&#39;s three visions of an object.What&#39;s the fourth one?That&#39;s how we test it.It&#39;s all about prediction.So what is the recipe for brain theory?First of all, we have to have the right framework.And the framework is a memory framework, not a computational or behavior framework, it&#39;s a memory framework.How do you store and recall these sequences of patterns?It&#39;s spatiotemporal patterns.Then, if in that framework, you take a bunch of theoreticians – biologists generally are not good theoreticians.Not always, but generally, there&#39;s not a good history of theory in biology.I&#39;ve found the best people to work with are physicists, engineers and mathematicians, who tend to think algorithmically.Then they have to learn the anatomy and the physiology.You have to make these theories very realistic in anatomical terms.Anyone who tells you their theory about how the brain works and doesn&#39;t tell you exactly how it&#39;s working and how the wiring works – it&#39;s not a theory.And that&#39;s what we do at the Redwood Neuroscience Institute.I&#39;d love to tell you we&#39;re making fantastic progress in this thing, and I expect to be back on this stage sometime in the not too distant future, to tell you about it.I&#39;m really excited; this is not going to take 50 years.What will brain theory look like?First of all, it&#39;s going to be about memory.Not like computer memory – not at all like computer memory.It&#39;s very different.It&#39;s a memory of very high-dimensional patterns, like the things that come from your eyes.It&#39;s also memory of sequences: you cannot learn or recall anything outside of a sequence.A song must be heard in sequence over time, and you must play it back in sequence over time.And these sequences are auto-associatively recalled, so if I see something, I hear something, it reminds me of it, and it plays back automatically.It&#39;s an automatic playback.And prediction of future inputs is the desired output.And as I said, the theory must be biologically accurate, it must be testable and you must be able to build it.If you don&#39;t build it, you don&#39;t understand it.One more slide.What is this going to result in?Are we going to really build intelligent machines?Absolutely. And it&#39;s going to be different than people think.No doubt that it&#39;s going to happen, in my mind.First of all, we&#39;re going to build this stuff out of silicon.The same techniques we use to build silicon computer memories, we can use here.But they&#39;re very different types of memories.And we&#39;ll attach these memories to sensors, and the sensors will experience real-live, real-world data, and learn about their environment.Now, it&#39;s very unlikely the first things you&#39;ll see are like robots.Not that robots aren&#39;t useful; people can build robots.But the robotics part is the hardest part.That&#39;s old brain. That&#39;s really hard.The new brain is easier than the old brain.So first we&#39;ll do things that don&#39;t require a lot of robotics.So you&#39;re not going to see C-3PO.You&#39;re going to see things more like intelligent cars that really understand what traffic is, what driving is and have learned that cars with the blinkers on for half a minute probably aren&#39;t going to turn.(Laughter) We can also do intelligent security systems.Anytime we&#39;re basically using our brain but not doing a lot of mechanics – those are the things that will happen first.But ultimately, the world&#39;s the limit.I don&#39;t know how this will turn out.I know a lot of people who invented the microprocessor.And if you talk to them, they knew what they were doing was really significant, but they didn&#39;t really know what was going to happen.They couldn&#39;t anticipate cell phones and the Internet and all this kind of stuff.They just knew like, &quot;We&#39;re going to build calculators and traffic-light controllers.But it&#39;s going to be big!&quot;In the same way, brain science and these memories are going to be a very fundamental technology, and it will lead to unbelievable changes in the next 100 years.And I&#39;m most excited about how we&#39;re going to use them in science.So I think that&#39;s all my time – I&#39;m over, and I&#39;m going to end my talk right there.","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"プログラマーが見るべき20のTEDトーク(12)　ベスト・コンピュータ・インタフェースはたぶん...あなたの手 [Video]","slug":"ted-talks-programming-everyone-must-watch-12","date":"2017-11-03T22:00:01.000Z","updated":"2017-11-03T22:00:01.843Z","comments":true,"path":"2017/11/03/ted-talks-programming-everyone-must-watch-12/","link":"","permalink":"https://so-matome.net2017/11/03/ted-talks-programming-everyone-must-watch-12/","excerpt":"James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第12段は「James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手」。以下のように紹介されています：\n\nこのTEDトークはちょうど6分で短いものですが、あなたにいろいろ考えさせる内容を含んでいます。 コンピュータの歴史の中で、我々は主にキーボードやマウスでコンピュータとやり取りを行ってきました。 最近では、タッチスクリーンと音声コントロールがあります。でも、将来は？Pattenは、制御はハンドヘルドになると示唆しています。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第12段は「James Patten：ベスト・コンピュータ・インタフェースはたぶん…あなたの手」。以下のように紹介されています： このTEDトークはちょうど6分で短いものですが、あなたにいろいろ考えさせる内容を含んでいます。 コンピュータの歴史の中で、我々は主にキーボードやマウスでコンピュータとやり取りを行ってきました。 最近では、タッチスクリーンと音声コントロールがあります。でも、将来は？Pattenは、制御はハンドヘルドになると示唆しています。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： A computer is an incredibly powerful means of creative expression, but for the most part, that expression is confined to the screens of our laptops and mobile phones.And I&#39;d like to tell you a story about bringing this power of the computer to move things around and interact with us off of the screen and into the physical world in which we live.A few years ago, I got a call from a luxury fashion store called Barneys New York, and the next thing I knew, I was designing storefront kinetic sculptures for their window displays.This one&#39;s called &quot;The Chase.&quot;There are two pairs of shoes, a man&#39;s pair and a woman&#39;s pair, and they play out this slow, tense chase around the window in which the man scoots up behind the woman and gets in her personal space, and then she moves away.Each of the shoes has magnets in it, and there are magnets underneath the table that move the shoes around.My friend Andy Cavatorta was building a robotic harp for Bjork&#39;s Biophilia tour and I wound up building the electronics and motion control software to make the harps move and play music.The harp has four separate pendulums, and each pendulum has 11 strings, so the harp swings on its axis and also rotates in order to play different musical notes, and the harps are all networked together so that they can play the right notes at the right time in the music.I built an interactive chemistry exhibit at the Museum of Science and Industry in Chicago, and this exhibit lets people use physical objects to grab chemical elements off of the periodic table and bring them together to cause chemical reactions to happen.And the museum noticed that people were spending a lot of time with this exhibit, and a researcher from a science education center in Australia decided to study this exhibit and try to figure out what was going on.And she found that the physical objects that people were using were helping people understand how to use the exhibit, and were helping people learn in a social way.And when you think about it, this makes a lot of sense, that using specialized physical objects would help people use an interface more easily.I mean, our hands and our minds are optimized to think about and interact with tangible objects.Think about which you find easier to use, a physical keyboard or an onscreen keyboard like on a phone?But the thing that struck me about all of these different projects is that they really had to be built from scratch, down to the level of the electronics and the printed circuit boards and all the mechanisms all the way up to the software.I wanted to create something where we could move objects under computer control and create interactions around that idea without having to go through this process of building something from scratch every single time.So my first attempt at this was at the MIT Media Lab with Professor Hiroshi Ishii, and we built this array of 512 different electromagnets, and together they were able to move objects around on top of their surface.But the problem with this was that these magnets cost over 10,000 dollars.Although each one was pretty small, altogether they weighed so much that the table that they were on started to sag.So I wanted to build something where you could have this kind of interaction on any tabletop surface.So to explore this idea, I built an army of small robots, and each of these robots has what are called omni wheels.They&#39;re these special wheels that can move equally easily in all directions, and when you couple these robots with a video projector, you have these physical tools for interacting with digital information.So here&#39;s an example of what I mean.This is a video editing application where all of the controls for manipulating the video are physical.So if we want to tweak the color, we just enter the color mode, and then we get three different dials for tweaking the color, or if we want to adjust the audio, then we get two different dials for that, these physical objects.So here the left and right channel stay in sync, but if we want to, we can override that by grabbing both of them at the same time.So the idea is that we get the speed and efficiency benefits of using these physical dials together with the flexibility and versatility of a system that&#39;s designed in software.And this is a mapping application for disaster response.So you have these physical objects that represent police, fire and rescue, and a dispatcher can grab them and place them on the map to tell those units where to go, and then the position of the units on the map gets synced up with the position of those units in the real world.This is a video chat application.It&#39;s amazing how much emotion you can convey with just a few simple movements of a physical object.With this interface, we open up a huge array of possibilities in between traditional board games and arcade games, where the physical possibilities of interaction make so many different styles of play possible.But one of the areas that I&#39;m most excited about using this platform for is applying it to problems that are difficult for computers or people to solve alone.One example of those is protein folding.So here we have an interface where we have physical handles onto a protein, and we can grab those handles and try to move the protein and try to fold it in different ways.And if we move it in a way that doesn&#39;t really make sense with the underlying molecular simulation, we get this physical feedback where we can actually feel these physical handles pulling back against us.So feeling what&#39;s going on inside a molecular simulation is a whole different level of interaction.So we&#39;re just beginning to explore what&#39;s possible when we use software to control the movement of objects in our environment.Maybe this is the computer of the future.There&#39;s no touchscreen.There&#39;s no technology visible at all.But when we want to have a video chat or play a game or lay out the slides to our next TED Talk, the objects on the table come alive.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"新しいファイルを作成せずに複数のファイルを1つのファイルオブジェクトに連結する [Python]","slug":"concatenate-multiple-files-into-a-single-file-object-without-creating-a-new-file","date":"2017-10-31T22:00:01.875Z","updated":"2017-10-31T22:00:01.875Z","comments":true,"path":"2017/10/31/concatenate-multiple-files-into-a-single-file-object-without-creating-a-new-file/","link":"","permalink":"https://so-matome.net2017/10/31/concatenate-multiple-files-into-a-single-file-object-without-creating-a-new-file/","excerpt":"質問：この質問はPythonでテキスト・ファイルを連結するに関連してるかも。\n今、[‘file1.txt’, ‘file2.txt’,…]のようなfile_namesのリストがある。\n僕は全部のファイルを行ごとに読んで、単一のファイルオブジェクトにしたいんだけど、でもその過程で新しいファイルを作らずにやることって可能？？\nwith open(file_names, 'r') as file_obj:   line = file_obj.readline()   while line:       ...\n By  bluprince13 | 質問日時： 2017年9月15日 10:15 ","text":"質問：この質問はPythonでテキスト・ファイルを連結するに関連してるかも。 今、[‘file1.txt’, ‘file2.txt’,…]のようなfile_namesのリストがある。 僕は全部のファイルを行ごとに読んで、単一のファイルオブジェクトにしたいんだけど、でもその過程で新しいファイルを作らずにやることって可能？？ with open(file_names, 'r') as file_obj: line = file_obj.readline() while line: ... By bluprince13 | 質問日時： 2017年9月15日 10:15 回答1:fileinputモジュールのinputを使えばいいよ。これは複数のファイルから読み込むんだけど、文字列があたかも単一のファイルから来てるように見せるんだ (レイジーライン反復)。 import fileinputfiles= ['F:/files/a.txt','F:/files/c.txt','F:/files/c.txt']allfiles = fileinput.input(files)for line in allfiles: # これはすべてのファイルの行をループする print(line)# またはallfiles.readline()でもいい 1つの場所にすべてのテキストが必要な場合は StringIOを使えばいいよ import iofiles= ['F:/files/a.txt','F:/files/c.txt','F:/files/c.txt']lines = io.StringIO() #すべての行を格納するオブジェクトのようなファイルfor file_dir in files: with open(file_dir, 'r') as file: lines.write(file.read()) lines.write('\\n')lines.seek(0) # これでオブジェクトのようなファイルのように扱えるようになったprint(lines.read()) By Anonta | 回答日時： 2017年9月15日 10:36 回答2:こんなのはどう？ def read_files(*filenames): for filename in filenames: with open(filename,'r') as file_obj: for line in file_obj: yield line こんな風に呼び出せる： for line in read_files(\"f1.txt\", \"f2.txt\", \"f3.txt\"): #... lineを使って何かする それか filenames = [\"f1.txt\", \"f2.txt\", \"f3.txt\"]for line in read_files(*filenames): #... lineを使って何かする By Lohmar ASHAR | 回答日時： 2017年9月15日 10:26 回答3:multiple_filesがすべてのファイル名を含むリストであるとしよう multiple_files = [\"file1.txt\", \"file2.txt\", \"file3.txt\", ...] # などなど、、、 すべてを放り込む出力ファイルを開く f = open(\"multiple_files.txt\", \"w\")for _file in multiple_files: f.write(_file.read()) この方法だと、ファイルの各行をいちいち読む必要はないよ。 上記の方法は簡単だけど、fileinput モジュールでも代替できる： fileinput docs fileinputを使用すると、複数のファイルにアクセスして処理することができるよ。 例：with fileinput.input(files=('file1.txt', 'file2.txt')) as f: for line in f: process(line) By bhansa | 回答日時： 2017年9月18日 17:19 Source: Concatenate multiple files into a single file object without creating a new file","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"file","slug":"file","permalink":"https://so-matome.net/tags/file/"}]},{"title":"JavaScriptを使用して現在のURLを取得する方法？ [Javascript]","slug":"get-the-current-url-with-javascript","date":"2017-10-31T22:00:01.000Z","updated":"2017-10-31T22:00:01.919Z","comments":true,"path":"2017/10/31/get-the-current-url-with-javascript/","link":"","permalink":"https://so-matome.net2017/10/31/get-the-current-url-with-javascript/","excerpt":"質問：私がやりたいのは、ウェブサイトのURLを取得することだけ。リンクから取得したURLではなくて。ページをローディングしている際に、僕はウェブサイトの完全な現在のURLを取得して設定する必要があるんだ。\n By          dougoftheabaci | 質問日時： 2009年6月23日 19:26 ","text":"質問：私がやりたいのは、ウェブサイトのURLを取得することだけ。リンクから取得したURLではなくて。ページをローディングしている際に、僕はウェブサイトの完全な現在のURLを取得して設定する必要があるんだ。 By dougoftheabaci | 質問日時： 2009年6月23日 19:26 回答1:これを使うのがいいかな： window.location.href 以下の方法でも動作するけど、Firefoxではバグってる。 document.URL; DOMString型のURL、readonlyを参照。 Source: Get the current URL with JavaScript?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"url","slug":"url","permalink":"https://so-matome.net/tags/url/"}]},{"title":"","slug":"hoge","date":"2017-10-30T22:00:01.910Z","updated":"2017-10-30T22:00:01.638Z","comments":true,"path":"2017/10/30/hoge/","link":"","permalink":"https://so-matome.net2017/10/30/hoge/","excerpt":"\ndate: 2017-10-30 22:00:01tags:\n\ndatasci\npython\npandas\ndataframetitle: Python pandasで既存のDataFrameに新しい列を追加する [Python]質問：名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある：          a         b         c         d2  0.671399  0.101208 -0.181532  0.2412733  0.446172 -0.243316  0.051767  1.5773185  0.614758  0.075793 -0.451460 -0.012493\n\n\n既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。\n0   -0.3354851   -1.1666582   -0.385571dtype: float64\njoin、append、 mergeのいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？\n By  tomasz74 | 質問日時： 2012年9月23日 19:00 ","text":"date: 2017-10-30 22:00:01tags: datasci python pandas dataframetitle: Python pandasで既存のDataFrameに新しい列を追加する [Python]質問：名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある： a b c d2 0.671399 0.101208 -0.181532 0.2412733 0.446172 -0.243316 0.051767 1.5773185 0.614758 0.075793 -0.451460 -0.012493 既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。 0 -0.3354851 -1.1666582 -0.385571dtype: float64 join、append、 mergeのいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？ By tomasz74 | 質問日時： 2012年9月23日 19:00 回答1:元のdf1のインデックスを使用してSeriesを作ればいいよ。 df1['e'] = Series(np.random.randn(sLength), index=df1.index) 2015年 編集ある人は、上のコードで SettingWithCopyWarningが出るっていってるけど、このコードは現在のパンダバージョン0.16.1でも完璧に動作してるよ。 &gt;&gt;&gt; sLength = len(df1['a'])&gt;&gt;&gt; df1 a b c d6 -0.269221 -0.026476 0.997517 1.2943858 0.917438 0.847941 0.034235 -0.448948&gt;&gt;&gt; df1['e'] = p.Series(np.random.randn(sLength), index=df1.index)&gt;&gt;&gt; df1 a b c d e6 -0.269221 -0.026476 0.997517 1.294385 1.7571678 0.917438 0.847941 0.034235 -0.448948 2.228131&gt;&gt;&gt; p.version.short_version'0.16.1' SettingWithCopyWarningは、Dataframeのコピーへのおそらく無効な割り当てを通知することを目的としてる。必ずしもそれは君が間違ったやり方をしてるとは限らないよ(それはfalse positive、偽陽性かもしれないので）。でも、0.13.0以降のものではもっと良い方法がいっぱいある、って注意しようとしてるだけ。。なので、警告が表示された場合は、そのアドバイスに従って： .loc[row_index、col_indexer] = valueを代わりに使ってみて &gt;&gt;&gt; df1.loc[:,'f'] = p.Series(np.random.randn(sLength), index=df1.index)&gt;&gt;&gt; df1 a b c d e f6 -0.269221 -0.026476 0.997517 1.294385 1.757167 -0.0509278 0.917438 0.847941 0.034235 -0.448948 2.228131 0.006109&gt;&gt;&gt; 2017年 編集他の人も行ってるけど、現時点でベストな方法はassignを使うことみたい: df1 = df1.assign(e=p.Series(np.random.randn(sLength)).values) 実際、これは今のところより効率的な方法だよ。 By joaquin | 回答日時： 2012年9月23日 19:24 回答2:これが、新しい列を追加する簡単な方法だよ！： df [&#39;e&#39;] = e By Kathirmani Sukumar | 回答日時： 2012年12月12日 16:04 Source: Adding new column to existing DataFrame in Python pandas","raw":null,"content":null,"categories":[],"tags":[]},{"title":"どのようにJavaScriptの文字列のすべての出現を置き換えるには？ [Javascript]","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript","date":"2017-10-30T22:00:01.000Z","updated":"2017-10-30T22:00:01.710Z","comments":true,"path":"2017/10/30/how-to-replace-all-occurrences-of-a-string-in-javascript/","link":"","permalink":"https://so-matome.net2017/10/30/how-to-replace-all-occurrences-of-a-string-in-javascript/","excerpt":"質問：この文字列があるとして：\"Test abc test test abc test test test abc test test abc\"\n以下をすると：str = str.replace('abc', '');\n上の文字列で最初のabcだけを取り除いているみたいだけど、どうやったらすべてのabsを置き換えることができる？\n By  Click Upvote | 質問日時： 2009年7月17日 17:53 ","text":"質問：この文字列があるとして：\"Test abc test test abc test test test abc test test abc\" 以下をすると：str = str.replace('abc', ''); 上の文字列で最初のabcだけを取り除いているみたいだけど、どうやったらすべてのabsを置き換えることができる？ By Click Upvote | 質問日時： 2009年7月17日 17:53 回答1:それをするには基本的に2つの方法があるよ。 注意： 一般的に、built-inのプロトタイプをJavaScriptで拡張することは一般的に推奨されてないよ。僕はString built-inプロトタイプに対する仮想的な標準メソッドの実装例を見せるために、Stringプロトタイプの拡張例としてこれを書いてる。 正規表現ベースの実装String.prototype.replaceAll = function(search, replacement) &#123; var target = this; return target.replace(new RegExp(search, 'g'), replacement);&#125;; Splitおよびjoinを用いた実装String.prototype.replaceAll = function(search, replacement) &#123; var target = this; return target.split(search).join(replacement);&#125;; 効率の面で正規表現がどのように裏で何をやってるか昔はあまり知らなかったから、僕はsplitとjoinを使った実装を（パフォーマンスを考慮せずに）よく使ってきた。今はどっちがどのぐらい効率がいいかを調べるたいと思った時だけ使うようにしてる。 僕のChromeのWindows 8マシンでは、正規表現ベースの実装が一番速かった。splitとjoinの実装ではそれより53％遅くなった。この2つを実行しているベンチマークを見てみて。 注意すべきは、searchが通常の特殊文字として予約されている特定の文字式を含む場合、正規表現ベースの実装にはちょっと問題がある。この実装は、呼び出し側がそういう文字列をあらかじめエスケープするか、正規表現(MDN)テーブル内の文字を含まない文字列だけを渡しますことを前提としてる。 MDNは、文字列をエスケープするための実装も提供してる。これも RegExp.escape(str)として標準化されてたらよかったけど、まあ、それは実現してない： function escapeRegExp(str) &#123; return str.replace(/[.*+?^$&#123;&#125;()|[\\]\\\\]/g, \"\\\\$&amp;\"); // $&amp;はマッチした文字列全体を意味します&#125; String.prototype.replaceAllの実装の中でescapeRegExpを呼び出すこともできる。でも僕はこれがどのくらいパフォーマンスに影響するか分からない(英数字の文字列のようにエスケープが必要でない文字列に対してすらも）。 By Cory Gross | 回答日時： 2013年7月12日 1:46 回答2:str = str.replace(/abc/g, ''); それか var find = 'abc';var re = new RegExp(find, 'g');str = str.replace(re, ''); さらに単純化すれば、 function replaceAll(str, find, replace) &#123; return str.replace(new RegExp(find, 'g'), replace);&#125; 注意： 正規表現には特別な(メタ)文字が含まれてる。だから、それらの文字をエスケープすること無しにfind関数の引数を盲目的に渡してしまうのは危険だ。これはMozilla Developer Networkの正規表現に関するJavaScriptガイドでカバーされてる。 そこでは次のユーティリティ関数が例示されてる： function escapeRegExp(str) &#123; return str.replace(/([.*+?^=!:$&#123;&#125;()|\\[\\]\\/\\\\])/g, \"\\\\$1\");&#125; だから、replaceAll()関数を上記より安全にするためにescapeRegExpもインクルードすると、以下のようになる： function replaceAll(str, find, replace) &#123; return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);&#125; By Sean Bright | 回答日時： 2009年7月17日 17:54 Source: How to replace all occurrences of a string in JavaScript?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"replace","slug":"replace","permalink":"https://so-matome.net/tags/replace/"}]},{"title":"Python pandasで既存のDataFrameに新しい列を追加する [Python]","slug":"adding-new-column-to-existing-dataframe-in-python-pandas","date":"2017-10-29T22:00:01.000Z","updated":"2017-10-29T22:00:01.467Z","comments":true,"path":"2017/10/29/adding-new-column-to-existing-dataframe-in-python-pandas/","link":"","permalink":"https://so-matome.net2017/10/29/adding-new-column-to-existing-dataframe-in-python-pandas/","excerpt":"質問：名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある：\n          a         b         c         d2  0.671399  0.101208 -0.181532  0.2412733  0.446172 -0.243316  0.051767  1.5773185  0.614758  0.075793 -0.451460 -0.012493\n既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。\n0   -0.3354851   -1.1666582   -0.385571dtype: float64\njoin、append、 mergeのいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？\n By  tomasz74 | 質問日時： 2012年9月23日 19:00 ","text":"質問：名前付きの列と、連続数じゃないような列を持つ次のようなインデックス付きDataFrameがある： a b c d2 0.671399 0.101208 -0.181532 0.2412733 0.446172 -0.243316 0.051767 1.5773185 0.614758 0.075793 -0.451460 -0.012493 既存のデータフレームに新しい列「e」を追加したいんだけど、でもデータフレームは何も変更したくないんだ(つまり、新しい列には常にDataFrameと同じ長さ)。 0 -0.3354851 -1.1666582 -0.385571dtype: float64 join、append、 mergeのいろんなバージョンを試したけど、望んでいた結果は得られず、せいぜいエラーになるだけ。上記の例で「e」列を追加するにはどうしたらいいかな？ By tomasz74 | 質問日時： 2012年9月23日 19:00 回答1:元のdf1のインデックスを使用してSeriesを作ればいいよ。 df1['e'] = Series(np.random.randn(sLength), index=df1.index) 2015年 編集ある人は、上のコードで SettingWithCopyWarningが出るっていってるけど、このコードは現在のパンダバージョン0.16.1でも完璧に動作してるよ。 &gt;&gt;&gt; sLength = len(df1['a'])&gt;&gt;&gt; df1 a b c d6 -0.269221 -0.026476 0.997517 1.2943858 0.917438 0.847941 0.034235 -0.448948&gt;&gt;&gt; df1['e'] = p.Series(np.random.randn(sLength), index=df1.index)&gt;&gt;&gt; df1 a b c d e6 -0.269221 -0.026476 0.997517 1.294385 1.7571678 0.917438 0.847941 0.034235 -0.448948 2.228131&gt;&gt;&gt; p.version.short_version'0.16.1' SettingWithCopyWarningは、Dataframeのコピーへのおそらく無効な割り当てを通知することを目的としてる。必ずしもそれは君が間違ったやり方をしてるとは限らないよ(それはfalse positive、偽陽性かもしれないので）。でも、0.13.0以降のものではもっと良い方法がいっぱいある、って注意しようとしてるだけ。。なので、警告が表示された場合は、そのアドバイスに従って： .loc[row_index、col_indexer] = valueを代わりに使ってみて &gt;&gt;&gt; df1.loc[:,'f'] = p.Series(np.random.randn(sLength), index=df1.index)&gt;&gt;&gt; df1 a b c d e f6 -0.269221 -0.026476 0.997517 1.294385 1.757167 -0.0509278 0.917438 0.847941 0.034235 -0.448948 2.228131 0.006109&gt;&gt;&gt; 2017年 編集他の人も行ってるけど、現時点でベストな方法はassignを使うことみたい: df1 = df1.assign(e=p.Series(np.random.randn(sLength)).values) 実際、これは今のところより効率的な方法だよ。 By joaquin | 回答日時： 2012年9月23日 19:24 回答2:これが、新しい列を追加する簡単な方法だよ！： df [&#39;e&#39;] = e By Kathirmani Sukumar | 回答日時： 2012年12月12日 16:04 Source: Adding new column to existing DataFrame in Python pandas","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"dataframe","slug":"dataframe","permalink":"https://so-matome.net/tags/dataframe/"},{"name":"pandas","slug":"pandas","permalink":"https://so-matome.net/tags/pandas/"}]},{"title":"JavaScriptオブジェクトを正しくクローンするにはどうしたらいい？ [Javascript]","slug":"how-do-i-correctly-clone-a-javascript-object","date":"2017-10-29T22:00:01.000Z","updated":"2017-10-29T22:00:01.503Z","comments":true,"path":"2017/10/29/how-do-i-correctly-clone-a-javascript-object/","link":"","permalink":"https://so-matome.net2017/10/29/how-do-i-correctly-clone-a-javascript-object/","excerpt":"質問：オブジェクトxがあってそれをオブジェクトyとしてコピーしたいんだけど（yへの変更がxを変更しないように）。built-inJavaScriptオブジェクトからコピーしたオブジェクトは不要なプロパティが余分に追加されてるのは知ってるんだけど。これは問題じゃないんだ。なぜって僕はリテラルとして構築されたオブジェクトの1つをコピーしているからです。\nJavaScriptオブジェクトを正しくクローンするにはどうすればいいかな？","text":"質問：オブジェクトxがあってそれをオブジェクトyとしてコピーしたいんだけど（yへの変更がxを変更しないように）。built-inJavaScriptオブジェクトからコピーしたオブジェクトは不要なプロパティが余分に追加されてるのは知ってるんだけど。これは問題じゃないんだ。なぜって僕はリテラルとして構築されたオブジェクトの1つをコピーしているからです。 JavaScriptオブジェクトを正しくクローンするにはどうすればいいかな？ 回答1:jQueryを使用すると、extendで浅い(shallo)コピーができる： var copiedObject = jQuery.extend(&#123;&#125;, originalObject) copyObjectへのその後の変更はoriginalObjectに影響しない。逆もしかり。 それかディープコピーを作成するには： var copiedObject = jQuery.extend(true, &#123;&#125;, originalObject) 回答2:オブジェクト内で関数を使用しない場合は、非常に簡単なワンライナーが使える： var cloneOfA = JSON.parse(JSON.stringify(a)); これは、オブジェクト、配列、文​​字列、ブーリアンと数字を含むどんな種類のオブジェクトに対しても動作する。 また、ブラウザの構造化クローンアルゴリズムについてのこの記事を参照。これはワーカーに、またはワーカーからメッセージを投稿するときに使われる。ディープクローニングの関数も含んでる。 回答3:ECMAScript 6には、Object.assignメソッドが使える。これは、列挙可能なすべてのプロパティの値をあるオブジェクトから別のオブジェクトにコピーする。例えば： var x = &#123;myProp: \"value\"&#125;;var y = Object.assign(&#123;&#125;, x); ただし、ネストされたオブジェクトは引き続き参照としてコピーされることに注意。 Source: How do I correctly clone a JavaScript object?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"}]},{"title":"プログラマーが見るべき20のTEDトーク(13)　子供たちにコードを教えよう [Video]","slug":"ted-talks-programming-everyone-must-watch-13","date":"2017-10-27T21:00:01.000Z","updated":"2017-10-27T21:00:01.627Z","comments":true,"path":"2017/10/27/ted-talks-programming-everyone-must-watch-13/","link":"","permalink":"https://so-matome.net2017/10/27/ted-talks-programming-everyone-must-watch-13/","excerpt":"ミッチ・レズニック：子供たちにコードを教えようMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第13段は「ミッチ・レズニック：子供たちにコードを教えよう」。以下のように紹介されています：\n\nTEDx Talksは、TED Talksと同じレベルの品質管理をされていないため、しばしば軽視されますが、この動画はそうではありません。 Resnickは16分で、なぜ子供たちにコードを教えるべきか説明します。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"ミッチ・レズニック：子供たちにコードを教えようMakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第13段は「ミッチ・レズニック：子供たちにコードを教えよう」。以下のように紹介されています： TEDx Talksは、TED Talksと同じレベルの品質管理をされていないため、しばしば軽視されますが、この動画はそうではありません。 Resnickは16分で、なぜ子供たちにコードを教えるべきか説明します。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： It was a Saturday afternoon in May, and I suddenly realized that the next day was Mother&#39;s Day, and I hadn&#39;t gotten anything for my mom, so I started thinking about what should I get my mom for Mother&#39;s Day?I thought, why don&#39;t I make her an interactive Mother&#39;s Day card using the Scratch software that I&#39;d been developing with my research group at the MIT Media Lab?We developed it so that people could easily create their own interactive stories and games and animations, and then share their creations with one another.So I thought, this would be an opportunity to use Scratch to make an interactive card for my mom.Before making my own Mother&#39;s Day card, I thought I would take a look at the Scratch website.So over the last several years, kids around the world ages 8 and up, have shared their projects, and I thought, I wonder if, of those three million projects, whether anyone else has thought to put up Mother&#39;s Day cards.So in the search box I typed in &quot;Mother&#39;s Day,&quot; and I was surprised and delighted to see a list of dozens and dozens of Mother&#39;s Day cards that showed up on the Scratch website, many of them just in the past 24 hours by procrastinators just like myself.So I started taking a look at them. (Music) I saw one of them that featured a kitten and her mom and wishing her mom a happy Mother&#39;s Day.And the creator very considerately offered a replay for her mom.Another one was an interactive project where, when you moved the mouse over the letters of &quot;Happy Mom Day,&quot; it reveals a special happy Mother&#39;s Day slogan.(Music) In this one, the creator told a narrative about how she had Googled to find out when Mother&#39;s Day was happening.(Typing) And then once she found out when Mother&#39;s Day was happening, she delivered a special Mother&#39;s Day greeting of how much she loved her mom.So I really enjoyed looking at these projects and interacting with these projects.In fact, I liked it so much that, instead of making my own project, I sent my mom links to about a dozen of these projects. (Laughter) And actually, she reacted exactly the way that I hoped that she would.She wrote back to me and she said, &quot;I&#39;m so proud to have a son that created the software that allowed these kids to make Mother&#39;s Day cards for their mothers.&quot;So my mom was happy, and that made me happy, but actually I was even happier for another reason.I was happy because these kids were using Scratch just in the way that we had hoped that they would.As they created their interactive Mother&#39;s Day cards, you could see that they were really becoming fluent with new technologies.What do I mean by fluent?I mean that they were able to start expressing themselves and to start expressing their ideas.When you become fluent with language, it means you can write an entry in your journal or tell a joke to someone or write a letter to a friend.And it&#39;s similar with new technologies.By writing, be creating these interactive Mother&#39;s Day cards, these kids were showing that they were really fluent with new technologies.Now maybe you won&#39;t be so surprised by this, because a lot of times people feel that young people today can do all sorts of things with technology.I mean, all of us have heard young people referred to as &quot;digital natives.&quot;But actually I&#39;m sort of skeptical about this term.I&#39;m not so sure we should be thinking of young people as digital natives.When you really look at it, how is it that young people spend most of their time using new technologies?You often see them in situations like this, or like this, and there&#39;s no doubt that young people are very comfortable and familiar browsing and chatting and texting and gaming.But that doesn&#39;t really make you fluent.So young people today have lots of experience and lots of familiarity with interacting with new technologies, but a lot less so of creating with new technologies and expressing themselves with new technologies.It&#39;s almost as if they can read but not write with new technologies.And I&#39;m really interested in seeing, how can we help young people become fluent so they can write with new technologies?And that really means that they need to be able to write their own computer programs, or code.So, increasingly, people are starting to recognize the importance of learning to code.You know, in recent years, there have been hundreds of new organizations and websites that are helping young people learn to code.You look online, you&#39;ll see places like Codecademy and events like CoderDojo and sites like Girls Who Code, or Black Girls Code.It seems that everybody is getting into the act.You know, just at the beginning of this year, at the turn of the new year, New York City Mayor Michael Bloomberg made a New Year&#39;s resolution that he was going to learn to code in 2012.A few months later, the country of Estonia decided that all of its first graders should learn to code.And that triggered a debate in the U.K.about whether all the children there should learn to code.Now, for some of you, when you hear about this, it might seem sort of strange about everybody learning to code.When many people think of coding, they think of it as something that only a very narrow sub-community of people are going to be doing, and they think of coding looking like this.And in fact, if this is what coding is like, it will only be a narrow sub-community of people with special mathematical skills and technological background that can code.But coding doesn&#39;t have to be like this.Let me show you about what it&#39;s like to code in Scratch.So in Scratch, to code, you just snap blocks together.In this case, you take a move block, snap it into a stack, and the stacks of blocks control the behaviors of the different characters in your game or your story, in this case controlling the big fish.After you&#39;ve created your program, you can click on &quot;share,&quot; and then share your project with other people, so that they can use the project and start working on the project as well.So, of course, making a fish game isn&#39;t the only thing you can do with Scratch.Of the millions of projects on the Scratch website, there&#39;s everything from animated stories to school science projects to anime soap operas to virtual construction kits to recreations of classic video games to political opinion polls to trigonometry tutorials to interactive artwork, and, yes, interactive Mother&#39;s Day cards.So I think there&#39;s so many different ways that people can express themselves using this, to be able to take their ideas and share their ideas with the world.And it doesn&#39;t just stay on the screen.You can also code to interact with the physical world around you.Here&#39;s an example from Hong Kong, where some kids made a game and then built their own physical interface device and had a light sensor, so the light sensor detects the hole in the board, so as they move the physical saw, the light sensor detects the hole and controls the virtual saw on the screen and saws down the tree.We&#39;re going to continue to look at new ways of bringing together the physical world and the virtual world and connecting to the world around us.This is an example from a new version of Scratch that we&#39;ll be releasing in the next few months, and we&#39;re looking again to be able to push you in new directions.Here&#39;s an example.It uses the webcam.And as I move my hand, I can pop the balloons or I can move the bug.So it&#39;s a little bit like Microsoft Kinect, where you interact with gestures in the world.But instead of just playing someone else&#39;s game, you get to create the games, and if you see someone else&#39;s game, you can just say &quot;see inside,&quot; and you can look at the stacks of blocks that control it.So there&#39;s a new block that says how much video motion there is, and then, if there&#39;s so much video motion, it will then tell the balloon to pop.The same way that this uses the camera to get information into Scratch, you can also use the microphone.Here&#39;s an example of a project using the microphone.So I&#39;m going to let all of you control this game using your voices.(Crickets chirping) (Shouts) (Chomping) (Laughter) (Applause) As kids are creating projects like this, they&#39;re learning to code, but even more importantly, they&#39;re coding to learn.Because as they learn to code, it enables them to learn many other things, opens up many new opportunities for learning.Again, it&#39;s useful to make an analogy to reading and writing.When you learn to read and write, it opens up opportunities for you to learn so many other things.When you learn to read, you can then read to learn.And it&#39;s the same thing with coding.If you learn to code, you can code to learn.Now some of the things you can learn are sort of obvious.You learn more about how computers work.But that&#39;s just where it starts.When you learn to code, it opens up for you to learn many other things.Let me show you an example.Here&#39;s another project, and I saw this when I was visiting one of the computer clubhouses.These are after-school learning centers that we helped start that help young people from low-income communities learn to express themselves creatively with new technologies.And when I went to one of the clubhouses a couple years ago, I saw a 13-year-old boy who was using our Scratch software to create a game somewhat like this one, and he was very happy with his game and proud of his game, but also he wanted to do more.He wanted to keep score.So this was a game where the big fish eats the little fish, but he wanted to keep score, so that each time the big fish eats the little fish, the score would go up and it would keep track, and he didn&#39;t know how to do that.So I showed him.In Scratch, you can create something called a variable.I&#39;ll call it score.And that creates some new blocks for you, and also creates a little scoreboard that keeps track of the score, so each time I click on &quot;change score,&quot; it increments the score.So I showed this to the clubhouse member – let&#39;s call him Victor – and Victor, when he saw that this block would let him increment the score, he knew exactly what to do.He took the block and he put it into the program exactly where the big fish eats the little fish.So then, each time the big fish eats the little fish, he will increment the score, and the score will go up by one.And it&#39;s in fact working.And he saw this, and he was so excited, he reached his hand out to me, and he said, &quot;Thank you, thank you, thank you.&quot;And what went through my mind was, how often is it that teachers are thanked by their students for teaching them variables? (Laughter) It doesn&#39;t happen in most classrooms, but that&#39;s because in most classrooms, when kids learn about variables, they don&#39;t know why they&#39;re learning it.It&#39;s nothing that, really, they can make use of.When you learn ideas like this in Scratch, you can learn it in a way that&#39;s really meaningful and motivating for you, that you can understand the reason for learning variables, and we see that kids learn it more deeply and learn it better.Victor had, I&#39;m sure, been taught about variables in schools, but he really didn&#39;t – he wasn&#39;t paying attention.Now he had a reason for learning variables.So when you learn through coding, and coding to learn, you&#39;re learning it in a meaningful context, and that&#39;s the best way of learning things.So as kids like Victor are creating projects like this, they&#39;re learning important concepts like variables, but that&#39;s just the start.As Victor worked on this project and created the scripts, he was also learning about the process of design, how to start with the glimmer of an idea and turn it into a fully-fledged, functioning project like you see here.So he was learning many different core principles of design, about how to experiment with new ideas, how to take complex ideas and break them down into simpler parts, how to collaborate with other people on your projects, about how to find and fix bugs when things go wrong, how to keep persistent and to persevere in the face of frustrations when things aren&#39;t working well.Now those are important skills that aren&#39;t just relevant for coding.They&#39;re relevant for all sorts of different activities.Now, who knows if Victor is going to grow up and become a programmer or a professional computer scientist?It&#39;s probably not so likely, but regardless of what he does, he&#39;ll be able to make use of these design skills that he learned.Regardless of whether he grows up to be a marketing manager or a mechanic or a community organizer, that these ideas are useful for everybody.Again, it&#39;s useful to think about this analogy with language.When you become fluent with reading and writing, it&#39;s not something that you&#39;re doing just to become a professional writer.Very few people become professional writers.But it&#39;s useful for everybody to learn how to read and write.Again, the same thing with coding.Most people won&#39;t grow up to become professional computer scientists or programmers, but those skills of thinking creatively, reasoning systematically, working collaboratively – skills you develop when you code in Scratch – are things that people can use no matter what they&#39;re doing in their work lives.And it&#39;s not just about your work life.Coding can also enable you to express your ideas and feelings in your personal life.Let me end with just one more example.So this is an example that came from after I had sent the Mother&#39;s Day cards to my mom, she decided that she wanted to learn Scratch.So she made this project for my birthday and sent me a happy birthday Scratch card.Now this project is not going to win any prizes for design, and you can rest assured that my 83-year-old mom is not training to become a professional programmer or computer scientist.But working on this project enabled her to make a connection to someone that she cares about and enabled her to keep on learning new things and continuing to practice her creativity and developing new ways of expressing herself.So as we take a look and we see that Michael Bloomberg is learning to code, all of the children of Estonia learn to code, even my mom has learned to code, don&#39;t you think it&#39;s about time that you might be thinking about learning to code?If you&#39;re interested in giving it a try, I&#39;d encourage you to go to the Scratch website.It&#39;s scratch.mit.edu, and give a try at coding.Thanks very much. (Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"Javascriptの悪名高いループの問題？ [Javascript] [Closures]","slug":"javascript-infamous-loop-issue","date":"2017-10-26T22:36:40.000Z","updated":"2017-10-28T02:51:44.394Z","comments":true,"path":"2017/10/26/javascript-infamous-loop-issue/","link":"","permalink":"https://so-matome.net2017/10/26/javascript-infamous-loop-issue/","excerpt":"質問：次のコードスニペットがあるんだけど、\nfunction addLinks () &#123;    for (var i=0, link; i&lt;5; i++) &#123;        link = document.createElement(\"a\");        link.innerHTML = \"Link \" + i;        link.onclick = function () &#123;            alert(i);        &#125;;        document.body.appendChild(link);    &#125;&#125;\n上記のコードは、5つのリンクを生成して、現在のリンクIDを表示するために各リンクをアラートイベントでバインドするためのコード。でも、動作しないんだ。クリックすると生成されたリンクはすべて「リンク5」になる。\nでも、次のコードスニペットは僕の期待通りに機能する。\nfunction addLinks () &#123;    for (var i=0, link; i&lt;5; i++) &#123;        link = document.createElement(\"a\");        link.innerHTML = \"Link \" + i;        link.onclick = function (num) &#123;            return function () &#123;                alert(num);            &#125;;        &#125;(i);        document.body.appendChild(link);    &#125;&#125;\n上記の2つのスニペットはここから拝借した。著者の解説にあるように、closureは魔法のように見える。\nでも、どのように動作し、どのようにクロージャが動作するかは、僕には理解不能。なぜ最初のものは動作しないの？誰かこの魔法の詳細な説明ってできる？\nよろしくお願いします。。\n By  Zhu Tao | 質問日時： 2009年9月20日 13:21 ","text":"質問：次のコードスニペットがあるんだけど、 function addLinks () &#123; for (var i=0, link; i&lt;5; i++) &#123; link = document.createElement(\"a\"); link.innerHTML = \"Link \" + i; link.onclick = function () &#123; alert(i); &#125;; document.body.appendChild(link); &#125;&#125; 上記のコードは、5つのリンクを生成して、現在のリンクIDを表示するために各リンクをアラートイベントでバインドするためのコード。でも、動作しないんだ。クリックすると生成されたリンクはすべて「リンク5」になる。 でも、次のコードスニペットは僕の期待通りに機能する。 function addLinks () &#123; for (var i=0, link; i&lt;5; i++) &#123; link = document.createElement(\"a\"); link.innerHTML = \"Link \" + i; link.onclick = function (num) &#123; return function () &#123; alert(num); &#125;; &#125;(i); document.body.appendChild(link); &#125;&#125; 上記の2つのスニペットはここから拝借した。著者の解説にあるように、closureは魔法のように見える。 でも、どのように動作し、どのようにクロージャが動作するかは、僕には理解不能。なぜ最初のものは動作しないの？誰かこの魔法の詳細な説明ってできる？ よろしくお願いします。。 By Zhu Tao | 質問日時： 2009年9月20日 13:21 回答1:最初の例の説明として、僕の以前の回答を引用してみる： JavaScriptのスコープはブロックレベルではなく、関数レベル。closureを作ることは、囲むスコープが、囲まれる関数のレキシカルな環境に追加されることを意味する。ループが終了すると、関数レベル変数iの値は5になり、それは内部の関数が「見ている」ものだ。 2番目の例では、反復ステップごとに、外部関数リテラルがそれ自身の有効範囲とローカル変数numを持つ新しい関数オブジェクトを評価して、その値は現在の値「i」に設定される。numは決して変更されないので、クロージャの生存期間にわたって定数として保たれる：関数オブジェクトが独立しているので、次の反復ステップでは古い値を上書きしない。 このアプローチは、リンクごとに2つの新しい関数オブジェクトを作成する必要があるので非効率だってことに注意。これは基本的に不要、なぜかというと情報ストレージとしてDOMノードを使用するとそれらは簡単に共有できるから。 function linkListener() &#123; alert(this.i);&#125;function addLinks () &#123; for(var i = 0; i &lt; 5; ++i) &#123; var link = document.createElement('a'); link.appendChild(document.createTextNode('Link ' + i)); link.i = i; link.onclick = linkListener; document.body.appendChild(link); &#125;&#125; By Christoph | 回答日時： 2009年9月20日 13:43 回答2:ここで簡単な説明を書いてみる： ページにはそれぞれID野着いたdiv1、div2、div3、div4、div5の5つのdivがある。jQueryではこうできる… for (var i=1; i&lt;=5; i++) &#123; $(\"#div\" + i).click ( function() &#123; alert ($(this).index()) &#125; )&#125; で、問題に対処していこう(ゆっくりと構築していく)… ステップ1for (var i=1; i&lt;=5; i++) &#123; $(\"#div\" + i).click ( // TODO: クリックイベントを処理するための書き込み関数 )&#125; ステップ2for (var i=1; i&lt;=5; i++) &#123; $(\"#div\" + i).click ( function(num) &#123; //関数の値は、関数が呼び出されたときに設定されてる！ //これを理解すればもう安心(僕は2年かかった)！ // clickイベントはハンドラとしての関数を期待しているので、それを返すｒ return function() &#123; alert (num) &#125; &#125;(i) // ここで関数を呼び出し、iの中の値を渡す )&#125; 簡単に理解できる別の方法もしこれがわかりにくければ、これなら簡単にわかるかも。やってることは同じ… for (var i=1; i&lt;=5; i++) &#123; function clickHandler(num) &#123; $(\"#div\" + i).click ( function() &#123; alert (num) &#125; ) &#125; clickHandler(i);&#125; これは、関数変数の値は関数が呼び出されたときに設定される、ってことを覚えていれば分かりやすいはず(でも、これは上とまったく同じ思考プロセスを使ってる)。 By Daniel Lewis | 回答日時： 2012年1月29日 16:27 回答3:他の人は何が起こっているのかを説明したけど、ここでは別の解決法を提供してみる。 function addLinks () &#123; for (var i = 0, link; i &lt; 5; i++) &#123; link = document.createElement(\"a\"); link.innerHTML = \"Link \" + i; with (&#123; n: i &#125;) &#123; link.onclick = function() &#123; alert(n); &#125;; &#125; document.body.appendChild(link); &#125;&#125; 基本的には、貧乏人のためのletバインディング。 By nlogax | 回答日時： 2009年9月26日 21:38 Source: Javascript infamous Loop issue? [duplicate]","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"closures","slug":"closures","permalink":"https://so-matome.net/tags/closures/"}]},{"title":"データフレームを（inner, outer, left, rightで）結合（マージ）する方法は？ [R]","slug":"how-to-join-merge-data-frames-inner-outer-left-right","date":"2017-10-26T22:36:39.000Z","updated":"2017-10-28T02:50:56.533Z","comments":true,"path":"2017/10/26/how-to-join-merge-data-frames-inner-outer-left-right/","link":"","permalink":"https://so-matome.net2017/10/26/how-to-join-merge-data-frames-inner-outer-left-right/","excerpt":"質問：2つのデータフレームがあるとする：df1 = data.frame(CustomerId = c(1:6), Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3)))df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(\"Alabama\", 2), rep(\"Ohio\", 1)))df1#  CustomerId Product#           1 Toaster#           2 Toaster#           3 Toaster#           4   Radio#           5   Radio#           6   Radiodf2#  CustomerId   State#           2 Alabama#           4 Alabama#           6    Ohio\nどうやったらデータベース的、すなわち、SQLみたいなjoinができる？つまり、\n\ndf1とdf2のinner join：左側のテーブルが右側のテーブルに一致するキーがある行のみを返す。\n\ndf1とdf2の外部結合：両方のテーブルのすべての行を返し、右側のテーブルの一致するキーがある左側のテーブルからレコードは結合する。\n\ndf1とdf2のleft outer join(または単にleft join)左のテーブルからすべての行と、右側からマッチするキーが有るすべての行を返す\n\ndf1とdf2のright outer join右側のテーブルからすべての行を返し、さらに左側から一致するキーを持つ行の全てを返す左のテーブル。\n\n\nおまけ：\nどのやったらSQLっぽいのselect文を実行できる？\n By  Dan Goldstein | 質問日時： 2009年8月19日 13:18 ","text":"質問：2つのデータフレームがあるとする：df1 = data.frame(CustomerId = c(1:6), Product = c(rep(\"Toaster\", 3), rep(\"Radio\", 3)))df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(\"Alabama\", 2), rep(\"Ohio\", 1)))df1# CustomerId Product# 1 Toaster# 2 Toaster# 3 Toaster# 4 Radio# 5 Radio# 6 Radiodf2# CustomerId State# 2 Alabama# 4 Alabama# 6 Ohio どうやったらデータベース的、すなわち、SQLみたいなjoinができる？つまり、 df1とdf2のinner join：左側のテーブルが右側のテーブルに一致するキーがある行のみを返す。 df1とdf2の外部結合：両方のテーブルのすべての行を返し、右側のテーブルの一致するキーがある左側のテーブルからレコードは結合する。 df1とdf2のleft outer join(または単にleft join)左のテーブルからすべての行と、右側からマッチするキーが有るすべての行を返す df1とdf2のright outer join右側のテーブルからすべての行を返し、さらに左側から一致するキーを持つ行の全てを返す左のテーブル。 おまけ： どのやったらSQLっぽいのselect文を実行できる？ By Dan Goldstein | 質問日時： 2009年8月19日 13:18 回答1:merge関数とそのパラメータを使うことでできるよ： Inner join: merge(df1、df2)で出来る。Rは自動的に共通の変数名でフレームに結合するから。でも、必要とするfieldをマッチしてるのを確認するために、merge(df1、df2、by = CustomerId &quot;)を使用したほうがいいかな。一致する変数が異なるデータフレームで異なる名前を持つ場合は、 by.xとby.yパラメータを使うこともできるよ。 Outer join: merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all = TRUE) Left outer: merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.x = TRUE) Right outer: merge(x = df1, y = df2, by = &quot;CustomerId&quot;, all.y = TRUE) Cross join: merge(x = df1, y = df2, by = NULL) でもほとんどの場合、マージしたい識別子を明示的に記述するほうが安全だろうね。 By Matt Parker | 回答日時： 2009年8月19日 15:15 回答2:Gabor Grothendieckの sqldfパッケージをおすすめするよ。SQLでの操作みたいにできるから. library(sqldf)## inner joindf3 &lt;- sqldf(\"SELECT CustomerId, Product, State FROM df1 JOIN df2 USING(CustomerID)\")## left join (substitute 'right' for right join)df4 &lt;- sqldf(\"SELECT CustomerId, Product, State FROM df1 LEFT JOIN df2 USING(CustomerID)\") SQLの構文の方が、Rの同じ構文よりも簡単で自然だと思うから(でもこれは僕のRDBMSバイアスを反映してるだけかも)。 結合に関してはGaborのsqldfGitHubを参照 By medriscoll | 回答日時： 2009年8月20日 17:54 Source: How to join (merge) data frames (inner, outer, left, right)?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"r","slug":"r","permalink":"https://so-matome.net/tags/r/"},{"name":"dataframe","slug":"dataframe","permalink":"https://so-matome.net/tags/dataframe/"},{"name":"r-faq","slug":"r-faq","permalink":"https://so-matome.net/tags/r-faq/"},{"name":"join","slug":"join","permalink":"https://so-matome.net/tags/join/"},{"name":"merge","slug":"merge","permalink":"https://so-matome.net/tags/merge/"}]},{"title":"バージョニングは重要だ [Webコミック]","slug":"commic-2017-09-12-versioning-is-important","date":"2017-10-24T21:00:01.000Z","updated":"2017-10-24T21:00:01.408Z","comments":true,"path":"2017/10/24/commic-2017-09-12-versioning-is-important/","link":"","permalink":"https://so-matome.net2017/10/24/commic-2017-09-12-versioning-is-important/","excerpt":"毎週水曜日はIT企業で働く人達をネタにしたWebコミック、Commit Stripを翻訳したものを紹介しています。Webデベロッパーなら笑えるネタがたくさん（？）\n今回のお題は「Versioning is important（バージョニングは重要だ）」です。","text":"毎週水曜日はIT企業で働く人達をネタにしたWebコミック、Commit Stripを翻訳したものを紹介しています。Webデベロッパーなら笑えるネタがたくさん（？） 今回のお題は「Versioning is important（バージョニングは重要だ）」です。 １コマ目：「（ニヤニヤしながら）デザイナーバーション管理の方法って俺好きなんだよな～」「ホント、俺もそうだよ」 ２コマ目：「そう、poster.psd、poster最終.psd、poster最終＿最後.psd、、、」「それからposter最終＿最終最後.psd、poster最終＿最終最後＿サイゴ.psd」 ３コマ目：「ってことはバージョン管理システムなんて使ってないってことじゃないの？」「いつになったら誰がPSDファイルのためのバージョン管理システムとか発明するのかな～」「うぅ、、、」 ４コマ目：「ちゃんとしたバージョン番号とちゃんとしたバージョンメッセージ、、、」「そうしたらもうちょっとプロっぽくなるんじゃね？」（手前のパソコンのコミット・ログ）バグフィックス終了！バグフィックス修正済み！バグフィックス！バグフィックス Source: Versioning is important","raw":null,"content":null,"categories":[],"tags":[{"name":"comic","slug":"comic","permalink":"https://so-matome.net/tags/comic/"}]},{"title":"Pythonの@staticmethodと@classmethodの違いって何？ [Python]","slug":"what-is-the-difference-between-staticmethod-and-classmethod-in-python","date":"2017-10-24T04:06:51.000Z","updated":"2017-10-24T04:06:51.663Z","comments":true,"path":"2017/10/24/what-is-the-difference-between-staticmethod-and-classmethod-in-python/","link":"","permalink":"https://so-matome.net2017/10/24/what-is-the-difference-between-staticmethod-and-classmethod-in-python/","excerpt":"質問：@staticmethodが付いてる関数と、@classmethodが付いてる関数の違いって何？\n By  Daryl Spitzer | 質問日時： Sep 25 ‘08 at 21:01 ","text":"質問：@staticmethodが付いてる関数と、@classmethodが付いてる関数の違いって何？ By Daryl Spitzer | 質問日時： Sep 25 ‘08 at 21:01 回答1:たぶんコード例で見たほうがいいと思う：foo、class_fooと static_fooのコールのsignature(訳注：メソッド名、パラメータ、戻り値の型をあわせたもの)の違いに注意： class A(object): def foo(self,x): print \"を実行する foo(%s,%s)\"%(self,x) @classmethod def class_foo(cls,x): print \"を実行する class_foo(%s,%s)\"%(cls,x) @staticmethod def static_foo(x): print \"を実行する static_foo(%s)\"%xa=A() 以下は、オブジェクトインスタンスがメソッドを呼び出す一般的な方法。オブジェクトインスタンスaは最初の引数として暗黙的に渡される。 a.foo(1)# foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)を実行する classmethodsでは、オブジェクトインスタンスのクラスは、selfじゃなく最初の引数として暗黙的に渡される。 a.class_foo(1)# class_foo(&lt;class '__main__.A'&gt;,1)を実行する クラスを使って class_fooを呼び出すこともできるよ。実際、何かをクラスメソッドとが定義した場合、たぶんそれはクラスインスタンスからじゃなくクラスから呼び出されると仮定して定義しているはずなので。A.foo(1)はTypeErrorだけど、 A.class_foo(1)はうまくいくよ： A.class_foo(1)# class_foo(&lt;class '__main__.A'&gt;,1)を実行する クラスメソッドとしてよく使われるのは、継承可能な代替コンストラクタを作ること。 staticmethodsでは、 self(オブジェクトインスタンス)もcls(クラス)も暗黙のうちに第1引数として渡されない。インスタンスやクラスから呼び出すことができる点を除いて、通常の関数のように動作するよ。 a.static_foo(1)# static_foo(1)を実行するA.static_foo('hi')# static_foo(hi)を実行する staticmethodsはあるクラスとそのクラスへの論理接続を持つ関数をグループ化するために使用される。 fooは単なる関数だけど、a.fooを呼び出すと、関数自身は得ることができなくて、最初の引数としてバインドされたオブジェクトインスタンス aへ”部分的に適用された”関数が与えられる。fooは２つの引数があることを期待してるけど、a.fooは1つの引数しか期待していない。 ここでaはfooにバインドされてる。これは、以下のように「束縛」(bound)が意味してるものでもある： print(a.foo)# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt; a.class_fooでは、aは class_fooに束縛されず、むしろクラスAはclass_fooに束縛されてる。 print(a.class_foo)# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt; staticメソッドでは、例えそれがメソッドであっても a.static_fooは何も引数がバインドされていない「古き良き」関数を返してくれる。static_fooは1つ引数があるのをを期待してて、a.static_fooも1つの引数があるのを期待してる。 print(a.static_foo)# &lt;function static_foo at 0xb7d479cc&gt; そしてもちろん、代わりにクラスAでstatic_fooを呼び出すと同じことが起こる。 print(A.static_foo)# &lt;function static_foo at 0xb7d479cc&gt; By unutbu | 回答日時： Nov 3 ‘09 at 19:13 Source: What is the difference between @staticmethod and @classmethod in Python?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"oop","slug":"oop","permalink":"https://so-matome.net/tags/oop/"}]},{"title":"昔話 [Webコミック]","slug":"commic-2017-05-02-telling-our-story","date":"2017-10-24T04:06:51.000Z","updated":"2017-10-24T04:06:51.711Z","comments":true,"path":"2017/10/24/commic-2017-05-02-telling-our-story/","link":"","permalink":"https://so-matome.net2017/10/24/commic-2017-05-02-telling-our-story/","excerpt":"","text":"１コマ目：「ねえ、叔父さん、僕ちょっと分からないことがあるんだけど、、、」「何が分からないんだい？」 ２コマ目：「どうしてハードディスクはA:からじゃなくて、C:から始まるの？」「ああ！」 ３コマ目：「お前がそんな事を聞くなんて思っても見なかったなー！」「よし、それじゃ初めから話をしてやろう」 ４コマ目：「むかぁ～し昔、あるところに、、、」 Source: Telling our story","raw":null,"content":null,"categories":[],"tags":[{"name":"comic","slug":"comic","permalink":"https://so-matome.net/tags/comic/"}]},{"title":"ループ内のJavaScriptクロージャ - 簡単な実用的な例 [Javascript]","slug":"javascript-closure-inside-loops-simple-practical-example","date":"2017-10-24T04:06:51.000Z","updated":"2017-10-24T04:06:51.695Z","comments":true,"path":"2017/10/24/javascript-closure-inside-loops-simple-practical-example/","link":"","permalink":"https://so-matome.net2017/10/24/javascript-closure-inside-loops-simple-practical-example/","excerpt":"質問：var funcs = [];for (var i = 0; i &lt; 3; i++) &#123;      // 関数を３つ作る  funcs[i] = function() &#123;          // それらをfuncsに入れる    console.log(\"My value: \" + i); // 各関数はその値を記録する  &#125;;&#125;for (var j = 0; j &lt; 3; j++) &#123;  funcs[j]();                      // 走らせる&#125;\nでもこれは以下を出力してしまう：\n\nMy value: 3My value: 3My value: 3\n\nでも僕が欲しいのは\n\nMy value: 0My value: 1My value: 2\n\n\n同じ問題は、関数の実行がイベントリスナーを使用することによって遅延してしまう時にも起こる：\nvar buttons = document.getElementsByTagName(\"button\");for (var i = 0; i &lt; buttons.length; i++) &#123;          // let's create 3 functions  buttons[i].addEventListener(\"click\", function() &#123; // as event listeners    console.log(\"My value: \" + i);                  // each should log its value.  &#125;);&#125;\n&lt;button&gt;0&lt;/button&gt;&lt;br&gt;&lt;button&gt;1&lt;/button&gt;&lt;br&gt;&lt;button&gt;2&lt;/button&gt;\nこの基本的な問題の解決策ってある？？\n By  nickf | 質問日時： 2009年4月15日 6:06 ","text":"質問：var funcs = [];for (var i = 0; i &lt; 3; i++) &#123; // 関数を３つ作る funcs[i] = function() &#123; // それらをfuncsに入れる console.log(\"My value: \" + i); // 各関数はその値を記録する &#125;;&#125;for (var j = 0; j &lt; 3; j++) &#123; funcs[j](); // 走らせる&#125; でもこれは以下を出力してしまう： My value: 3My value: 3My value: 3 でも僕が欲しいのは My value: 0My value: 1My value: 2 同じ問題は、関数の実行がイベントリスナーを使用することによって遅延してしまう時にも起こる： var buttons = document.getElementsByTagName(\"button\");for (var i = 0; i &lt; buttons.length; i++) &#123; // let's create 3 functions buttons[i].addEventListener(\"click\", function() &#123; // as event listeners console.log(\"My value: \" + i); // each should log its value. &#125;);&#125; &lt;button&gt;0&lt;/button&gt;&lt;br&gt;&lt;button&gt;1&lt;/button&gt;&lt;br&gt;&lt;button&gt;2&lt;/button&gt; この基本的な問題の解決策ってある？？ By nickf | 質問日時： 2009年4月15日 6:06 回答1:えっと、問題は、それぞれの匿名の関数の中にある変数iが関数の外部にある同じ変数にバインドされてるってことだよ。 君がしたいのは、各関数内の変数を独立した変数にバインドすることだと思う。そうすれば関数の外で値が変わらない： var funcs = [];function createfunc(i) &#123; return function() &#123; console.log(\"My value: \" + i); &#125;;&#125;for (var i = 0; i &lt; 3; i++) &#123; funcs[i] = createfunc(i);&#125;for (var j = 0; j &lt; 3; j++) &#123; funcs[j](); // 表示させてみる&#125; JavaScriptにはブロックスコープがないので（関数スコープのみ）、新しい関数の中で関数の作成をラップすると、&quot;i&quot;は君が意図した通りになるように気をつけないといけない。 Update：var someArray = [ /* なんでもいい */ ];// ...someArray.forEach(function(arrayElement) &#123; // ...この要素のコードコードコード someAsynchronousFunction(arrayElement, function() &#123; arrayElement.doSomething(); &#125;);&#125;); つまり、.forEachループと一緒に使われたコールバック関数の各呼び出しが独自のクロージャになる。そのハンドラに渡されたパラメータは、その特定の反復ステップに固有の配列要素になってる。非同期コールバックで使用されている場合、それはその反復の他のステップで確立された他のコールバックどれとも衝突しない。 もしjQueryで作業している場合なら、$ .each()関数で同じようなことができるよ。 Update 2： JavaScriptの最新バージョンであるECMAScript 6(ES6)は、多くのブラウザとバックエンドシステムで実装され始めてる。古いシステムで新しい機能を使用できるようにES6からES5に変換するBabelのようなトランスパイライザーとかももあります。 ES6では、varベースの変数とは違うスコープを持つ新しい letとconstキーワードが導入されてる。たとえば、 letベースのインデックスを持つループでは、それぞれループを通る反復は新しい値「i」を持ち、各値はループの内側にスコープがあるので、君のコードは期待どおりに動作するはず。いろんなリソースがあると思うけど、僕は2alityのブロックスコープに関する記事の素晴らしいソースとしておすすめするよ。 for (let i = 0; i &lt; 3; i++) &#123; funcs[i] = function() &#123; console.log(\"My value: \" + i); &#125;;&#125; でも注意すべきはIE9-IE11とEdge14以前のEdgeは、letをサポートしてるけど、上記の間違いをしてしまう(毎回新しい iを作成しないので、上で書いたどの関数もvarを使用した場合と同様に「3」を出力する)。Edge 14では最終的にそれは解決してる。 By harto | 回答日時： 2009年4月15日 6:18 回答2:最初にループの外側で関数を作り、その結果をループ内でバインドさせる方がパフォーマンスがいいと思うよ。 function log(x) &#123; console.log('My value: ' + x);&#125;var funcs = [];for (var i = 0; i &lt; 3; i++) &#123; funcs[i] = log.bind(this, i);&#125;for (var j = 0; j &lt; 3; j++) &#123; funcs[j]();&#125; By Aust | 回答日時： 2013年10月11日 16:41 Source: JavaScript closure inside loops – simple practical example","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"loops","slug":"loops","permalink":"https://so-matome.net/tags/loops/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"closures","slug":"closures","permalink":"https://so-matome.net/tags/closures/"}]},{"title":"プログラマーが見るべき20のTEDトーク(２)　 怠け者の達人の頭の中 [Video]","slug":"ted-talks-programming-everyone-must-watch-2","date":"2017-10-21T08:00:00.000Z","updated":"2017-10-21T09:16:20.000Z","comments":true,"path":"2017/10/21/ted-talks-programming-everyone-must-watch-2/","link":"","permalink":"https://so-matome.net2017/10/21/ted-talks-programming-everyone-must-watch-2/","excerpt":"Tim Urban: 怠け者の達人の頭の中MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第２段は「Tim Urban: 怠け者の達人の頭の中」。以下のように紹介されています：\n\nプログラマとして、あなたはいろんな事を先延ばししたいと思うでしょう。それもたくさん。この14分間のTEDトークは、これと最悪の状況で苦労し、それを克服することができた人による話です。 彼は、彼の先延ばしにつながったパターンとその解決策を提示します。\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"Tim Urban: 怠け者の達人の頭の中MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。第２段は「Tim Urban: 怠け者の達人の頭の中」。以下のように紹介されています： プログラマとして、あなたはいろんな事を先延ばししたいと思うでしょう。それもたくさん。この14分間のTEDトークは、これと最悪の状況で苦労し、それを克服することができた人による話です。 彼は、彼の先延ばしにつながったパターンとその解決策を提示します。 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： So in college, I was a government major, which means I had to write a lot of papers. Now, when a normal student writes a paper, they might spread the work out a little like this. So, you know –(Laughter)you get started maybe a little slowly, but you get enough done in the first week that, with some heavier days later on, everything gets done, things stay civil.(Laughter)And I would want to do that like that. That would be the plan. I would have it all ready to go, but then, actually, the paper would come along, and then I would kind of do this.(Laughter)And that would happen every single paper.But then came my 90-page senior thesis, a paper you’re supposed to spend a year on. And I knew for a paper like that, my normal work flow was not an option. It was way too big a project. So I planned things out, and I decided I kind of had to go something like this. This is how the year would go. So I’d start off light, and I’d bump it up in the middle months, and then at the end, I would kick it up into high gear just like a little staircase. How hard could it be to walk up the stairs? No big deal, right?But then, the funniest thing happened. Those first few months? They came and went, and I couldn’t quite do stuff. So we had an awesome new revised plan.(Laughter)And then –(Laughter)But then those middle months actually went by, and I didn’t really write words, and so we were here. And then two months turned into one month, which turned into two weeks. And one day I woke up with three days until the deadline, still not having written a word, and so I did the only thing I could: I wrote 90 pages over 72 hours, pulling not one but two all-nighters – humans are not supposed to pull two all-nighters – sprinted across campus, dove in slow motion, and got it in just at the deadline.I thought that was the end of everything. But a week later I get a call, and it’s the school. And they say, “Is this Tim Urban?” And I say, “Yeah.” And they say, “We need to talk about your thesis.” And I say, “OK.” And they say, “It’s the best one we’ve ever seen.”(Laughter)(Applause)That did not happen.(Laughter)It was a very, very bad thesis.(Laughter)I just wanted to enjoy that one moment when all of you thought, “This guy is amazing!”(Laughter)No, no, it was very, very bad. Anyway, today I’m a writer-blogger guy. I write the blog Wait But Why. And a couple of years ago, I decided to write about procrastination. My behavior has always perplexed the non-procrastinators around me, and I wanted to explain to the non-procrastinators of the world what goes on in the heads of procrastinators, and why we are the way we are. Now, I had a hypothesis that the brains of procrastinators were actually different than the brains of other people. And to test this, I found an MRI lab that actually let me scan both my brain and the brain of a proven non-procrastinator, so I could compare them. I actually brought them here to show you today. I want you to take a look carefully to see if you can notice a difference. I know that if you’re not a trained brain expert, it’s not that obvious, but just take a look, OK? So here’s the brain of a non-procrastinator.(Laughter)Now … here’s my brain.(Laughter)There is a difference. Both brains have a Rational Decision-Maker in them, but the procrastinator’s brain also has an Instant Gratification Monkey. Now, what does this mean for the procrastinator? Well, it means everything’s fine until this happens.[This is a perfect time to get some work done.] [Nope!]So the Rational Decision-Maker will make the rational decision to do something productive, but the Monkey doesn’t like that plan, so he actually takes the wheel, and he says, “Actually, let’s read the entire Wikipedia page of the Nancy Kerrigan/ Tonya Harding scandal, because I just remembered that that happened.(Laughter)Then –(Laughter)Then we’re going to go over to the fridge, to see if there’s anything new in there since 10 minutes ago. After that, we’re going to go on a YouTube spiral that starts with videos of Richard Feynman talking about magnets and ends much, much later with us watching interviews with Justin Bieber’s mom.(Laughter)“All of that’s going to take a while, so we’re not going to really have room on the schedule for any work today. Sorry!”(Sigh)Now, what is going on here? The Instant Gratification Monkey does not seem like a guy you want behind the wheel. He lives entirely in the present moment. He has no memory of the past, no knowledge of the future, and he only cares about two things: easy and fun.Now, in the animal world, that works fine. If you’re a dog and you spend your whole life doing nothing other than easy and fun things, you’re a huge success!(Laughter)And to the Monkey, humans are just another animal species. You have to keep well-slept, well-fed and propagating into the next generation, which in tribal times might have worked OK. But, if you haven’t noticed, now we’re not in tribal times. We’re in an advanced civilization, and the Monkey does not know what that is. Which is why we have another guy in our brain, the Rational Decision-Maker, who gives us the ability to do things no other animal can do. We can visualize the future. We can see the big picture. We can make long-term plans. And he wants to take all of that into account. And he wants to just have us do whatever makes sense to be doing right now. Now, sometimes it makes sense to be doing things that are easy and fun, like when you’re having dinner or going to bed or enjoying well-earned leisure time. That’s why there’s an overlap. Sometimes they agree. But other times, it makes much more sense to be doing things that are harder and less pleasant, for the sake of the big picture. And that’s when we have a conflict. And for the procrastinator, that conflict tends to end a certain way every time, leaving him spending a lot of time in this orange zone, an easy and fun place that’s entirely out of the Makes Sense circle. I call it the Dark Playground.(Laughter)Now, the Dark Playground is a place that all of you procrastinators out there know very well. It’s where leisure activities happen at times when leisure activities are not supposed to be happening. The fun you have in the Dark Playground isn’t actually fun, because it’s completely unearned, and the air is filled with guilt, dread, anxiety, self-hatred – all of those good procrastinator feelings. And the question is, in this situation, with the Monkey behind the wheel, how does the procrastinator ever get himself over here to this blue zone, a less pleasant place, but where really important things happen?Well, turns out the procrastinator has a guardian angel, someone who’s always looking down on him and watching over him in his darkest moments – someone called the Panic Monster.(Laughter)Now, the Panic Monster is dormant most of the time, but he suddenly wakes up anytime a deadline gets too close or there’s danger of public embarrassment, a career disaster or some other scary consequence. And importantly, he’s the only thing the Monkey is terrified of. Now, he became very relevant in my life pretty recently, because the people of TED reached out to me about six months ago and invited me to do a TED Talk.(Laughter)Now, of course, I said yes. It’s always been a dream of mine to have done a TED Talk in the past.(Laughter)(Applause) But in the middle of all this excitement, the Rational Decision-Maker seemed to have something else on his mind. He was saying, “Are we clear on what we just accepted? Do we get what’s going to be now happening one day in the future? We need to sit down and work on this right now.” And the Monkey said, “Totally agree, but let’s just open Google Earth and zoom in to the bottom of India, like 200 feet above the ground, and scroll up for two and a half hours til we get to the top of the country, so we can get a better feel for India.”(Laughter)So that’s what we did that day.(Laughter)As six months turned into four and then two and then one, the people of TED decided to release the speakers. And I opened up the website, and there was my face staring right back at me. And guess who woke up?(Laughter)So the Panic Monster starts losing his mind, and a few seconds later, the whole system’s in mayhem.(Laughter)And the Monkey – remember, he’s terrified of the Panic Monster – boom, he’s up the tree! And finally, finally, the Rational Decision-Maker can take the wheel and I can start working on the talk.Now, the Panic Monster explains all kinds of pretty insane procrastinator behavior, like how someone like me could spend two weeks unable to start the opening sentence of a paper, and then miraculously find the unbelievable work ethic to stay up all night and write eight pages. And this entire situation, with the three characters – this is the procrastinator’s system. It’s not pretty, but in the end, it works. This is what I decided to write about on the blog a couple of years ago.When I did, I was amazed by the response. Literally thousands of emails came in, from all different kinds of people from all over the world, doing all different kinds of things. These are people who were nurses, bankers, painters, engineers and lots and lots of PhD students.(Laughter)And they were all writing, saying the same thing: “I have this problem too.” But what struck me was the contrast between the light tone of the post and the heaviness of these emails. These people were writing with intense frustration about what procrastination had done to their lives, about what this Monkey had done to them. And I thought about this, and I said, well, if the procrastinator’s system works, then what’s going on? Why are all of these people in such a dark place?Well, it turns out that there’s two kinds of procrastination. Everything I’ve talked about today, the examples I’ve given, they all have deadlines. And when there’s deadlines, the effects of procrastination are contained to the short term because the Panic Monster gets involved. But there’s a second kind of procrastination that happens in situations when there is no deadline. So if you wanted a career where you’re a self-starter – something in the arts, something entrepreneurial – there’s no deadlines on those things at first, because nothing’s happening, not until you’ve gone out and done the hard work to get momentum, get things going. There’s also all kinds of important things outside of your career that don’t involve any deadlines, like seeing your family or exercising and taking care of your health, working on your relationship or getting out of a relationship that isn’t working.Now if the procrastinator’s only mechanism of doing these hard things is the Panic Monster, that’s a problem, because in all of these non-deadline situations, the Panic Monster doesn’t show up. He has nothing to wake up for, so the effects of procrastination, they’re not contained; they just extend outward forever. And it’s this long-term kind of procrastination that’s much less visible and much less talked about than the funnier, short-term deadline-based kind. It’s usually suffered quietly and privately. And it can be the source of a huge amount of long-term unhappiness, and regrets. And I thought, that’s why those people are emailing, and that’s why they’re in such a bad place. It’s not that they’re cramming for some project. It’s that long-term procrastination has made them feel like a spectator, at times, in their own lives. The frustration is not that they couldn’t achieve their dreams; it’s that they weren’t even able to start chasing them.So I read these emails and I had a little bit of an epiphany – that I don’t think non-procrastinators exist. That’s right – I think all of you are procrastinators. Now, you might not all be a mess, like some of us,(Laughter)and some of you may have a healthy relationship with deadlines, but remember: the Monkey’s sneakiest trick is when the deadlines aren’t there.Now, I want to show you one last thing. I call this a Life Calendar. That’s one box for every week of a 90-year life. That’s not that many boxes, especially since we’ve already used a bunch of those. So I think we need to all take a long, hard look at that calendar. We need to think about what we’re really procrastinating on, because everyone is procrastinating on something in life. We need to stay aware of the Instant Gratification Monkey. That’s a job for all of us. And because there’s not that many boxes on there, it’s a job that should probably start today.Well, maybe not today, but …(Laughter)You know. Sometime soon.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"どうしてdocument.writeは「Bad practice（悪い習慣）」って考えられてるの？ [Javascript]","slug":"why-is-document-write-considered-a-bad-practice","date":"2017-10-20T08:00:01.000Z","updated":"2017-10-21T09:48:50.000Z","comments":true,"path":"2017/10/20/why-is-document-write-considered-a-bad-practice/","link":"","permalink":"https://so-matome.net2017/10/20/why-is-document-write-considered-a-bad-practice/","excerpt":"質問：document.writeがbad practice(悪い習慣)とみなされてるのは知ってる。で、僕が望んでいるのはその理由を集めて、なぜ解析コードの実装に document.writeを使用すべきじゃないのか第三者のベンダーに提出したいんだ。\ndocument.writeを悪い習慣として主張するあなたの理由を教えて？\n By  FlySwat | 質問日時： 2009年4月29日 15:18 ","text":"質問：document.writeがbad practice(悪い習慣)とみなされてるのは知ってる。で、僕が望んでいるのはその理由を集めて、なぜ解析コードの実装に document.writeを使用すべきじゃないのか第三者のベンダーに提出したいんだ。 document.writeを悪い習慣として主張するあなたの理由を教えて？ By FlySwat | 質問日時： 2009年4月29日 15:18 回答1:深刻な問題をまず初めにいくつか： document.write(以後DW)はXHTMLでは動作しない ページの読み込みが終了した後に実行されるDWは、ページを上書きしたり、新しいページを書き出したり、また動作しないこともある DWはエンカウンターした場所で実行されます：つまり、あるノードポイントにインジェクトしたりはできない DWは実質的にシリアル化されたテキストを書き出すので、コンセプト的にDOMが動作する方法じゃない。そしてバグを作成するのも簡単だ(.innerHTMLにも同じ問題がある) 安全でDOMフレンドリーな操作は、DOM操作メソッドを参照。 By annakata | 回答日時： 2009年4月29日 15:36 回答2:実際に document.write自体は何も問題は無いよ。問題はそれを誤用するのは本当に簡単だって事。 Googleアナリティクスとかの分析コードを提供するベンダーに関して言えば、彼らは実際にそんな誤用を招くスニペット（コードの断片）を配布する元になってる。なぜなら： 1.スクリプトを小さく保てる 2.彼らは、すでに確立されているオンロードイベントをオーバーライドすることや、オンロードイベントを安全に追加するために必要な抽象化を心配する必要がない 3.(document.writeは)非常に互換性があります ドキュメントがロードされた後でそれを使用しようとしない限り、僕は個人的にはdocument.writeは本質的に悪だとは思わないなあ。 By Peter Bailey | 回答日時： 2009年4月29日 15:26 回答3:document.writeのもう一つの正当な使用は、HTML5 Boilerplateindex.html例。 &lt;!-- GoogleのCDNのjQueryをプロトコル相対URLで取得。オフラインの場合はローカルにフォールバックする --&gt;&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js\"&gt;&lt;/script&gt;&lt;script&gt;window.jQuery || document.write('&lt;script src=\"js/libs/jquery-1.6.3.min.js\"&gt;&lt;\\/script&gt;')&lt;/script&gt; 僕は、json2.jsJSON parse/stringifypolyfill(IE7以下で必要)でも同じようなテクニックを使ってるのを見たよ。 &lt;script&gt;window.JSON || document.write('&lt;script src=\"json2.js\"&gt;&lt;\\/script&gt;')&lt;/script&gt; By Kevin Hakanson | 回答日時： 2011年9月8日 20:49 回答4:利点： 外部(ホスト/ドメイン)のスクリプトからインラインコンテンツを埋め込む最も簡単な方法。 frameまたはiframe内のコンテンツ全体を上書きすることができる。最近のAjax技術が広く普及する前に(1998年〜2002年)、僕はこの技術をメニュー/ナビゲーション用に多用してたよ。 欠点： これは、外部スクリプトがロードされるまでレンダリングエンジンをシリアライズするようにシリアル化します。内部スクリプトよりもはるかに時間がかかる。 通常、スクリプトがコンテンツ内に配置されるように使用されるけど、これはあんまり良い使い方じゃない。 By Tracker1 | 回答日時： 2009年4月29日 16:19 Source: Why is document.write considered a “bad practice”?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"}]},{"title":"なぜ\"for ... in\"を使って配列の反復をするはダメなの？ [Javascript]","slug":"why-is-using-for-in-with-array-iteration-a-bad-idea","date":"2017-10-19T08:00:02.000Z","updated":"2017-10-21T09:47:44.000Z","comments":true,"path":"2017/10/19/why-is-using-for-in-with-array-iteration-a-bad-idea/","link":"","permalink":"https://so-matome.net2017/10/19/why-is-using-for-in-with-array-iteration-a-bad-idea/","excerpt":"質問：JavaScriptの配列で for ... inを使わないように言われたんだけど、何故なの？\n By  lYriCAlsSH | 質問日時： 2009年2月1日 9:46 ","text":"質問：JavaScriptの配列で for ... inを使わないように言われたんだけど、何故なの？ By lYriCAlsSH | 質問日時： 2009年2月1日 9:46 回答1:その理由はこう。まずこんなコンストラクトを考えてみる： var a = []; //新しい空の配列を作成a[5] = 5; //配列のサイズを変更する完全に合法なJavaScriptfor (var i = 0; i &lt; a.length; i++) &#123; //誰もがわかってると思うけど、0から5までの数値インデックスをループする。 console.log(a[i]);&#125;/* これは以下を出力するはず undefined undefined undefined undefined undefined 5*/ これはときどき他とは全く異なる場合がある： var a = [];a[5] = 5;for (var x in a) &#123; //明示的に設定されたインデックス \"5\"のみを表示し、0〜4を無視 console.log(x);&#125;/* 以下が出力するはず 5*/ JavaScriptライブラリは時々こんなことをして、作成する配列に影響を与えるのに注意： // JavaScriptライブラリのどこかに...Array.prototype.foo = 1;//今、下のコードが何をするのか分からないと思う。var a = [1, 2, 3, 4, 5];for (var x in a)&#123; // fooはすべての配列の一部で、 //ここに 'x'の値として表示される。 console.log(x);&#125;/* 以下が出力するはず: 0 1 2 3 4 foo*/ By Triptych | 回答日時： 2009年2月1日 10:08 Source: Why is using “for…in” with array iteration a bad idea?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"arrays","slug":"arrays","permalink":"https://so-matome.net/tags/arrays/"},{"name":"for-loop","slug":"for-loop","permalink":"https://so-matome.net/tags/for-loop/"}]},{"title":"Pandasのデータを標準化する方法 [Python]","slug":"normalize-data-in-pandas","date":"2017-10-18T08:00:02.000Z","updated":"2017-10-21T09:47:13.000Z","comments":true,"path":"2017/10/18/normalize-data-in-pandas/","link":"","permalink":"https://so-matome.net2017/10/18/normalize-data-in-pandas/","excerpt":"質問：Pandasのデータフレームがあるとする。このデータフレームの列ごとの平均を計算するのは簡単：\ndf.apply(average)\nで、この列ごとのmax(col) - min (col)を計算するのも簡単：df.apply(max) - df.apply(min)\nで、この列ごとの差を平均で割りたいんだけどどうやったらいいの？\n By  jason | 質問日時： 2012年9月21日 7:04 ","text":"質問：Pandasのデータフレームがあるとする。このデータフレームの列ごとの平均を計算するのは簡単： df.apply(average) で、この列ごとのmax(col) - min (col)を計算するのも簡単：df.apply(max) - df.apply(min) で、この列ごとの差を平均で割りたいんだけどどうやったらいいの？ By jason | 質問日時： 2012年9月21日 7:04 回答1:In [92]: dfOut[92]: a b c dA -0.488816 0.863769 4.325608 -4.721202B -11.937097 2.993993 -12.916784 -1.086236C -5.569493 4.672679 -2.168464 -9.315900D 8.892368 0.932785 4.535396 0.598124In [93]: df_norm = (df - df.mean()) / (df.max() - df.min())In [94]: df_normOut[94]: a b c dA 0.085789 -0.394348 0.337016 -0.109935B -0.463830 0.164926 -0.650963 0.256714C -0.158129 0.605652 -0.035090 -0.573389D 0.536170 -0.376229 0.349037 0.426611In [95]: df_norm.mean()Out[95]:a -2.081668e-17b 4.857226e-17c 1.734723e-17d -1.040834e-17In [96]: df_norm.max() - df_norm.min()Out[96]:a 1b 1c 1d 1 By Wouter Overmeire | 回答日時： 2012年9月21日 7:14 回答2:sklearnライブラリ使ってもいいのであれば、このブログの方法がいいと思う： import pandas as pdfrom sklearn import preprocessingdata = &#123;'score': [234,24,14,27,-74,46,73,-18,59,160]&#125;df = pd.DataFrame(data)dfmin_max_scaler = preprocessing.MinMaxScaler()np_scaled = min_max_scaler.fit_transform(df)df_normalized = pd.DataFrame(np_scaled)df_normalized By davidshen84 | 回答日時： 2016年5月13日 0:48 回答3:applyを使えばいいよ。よりキレイだと思う： import numpy as npimport pandas as pdnp.random.seed(1)df = pd.DataFrame(np.random.randn(4,4)* 4 + 3) 0 1 2 30 9.497381 0.552974 0.887313 -1.2918741 6.461631 -6.206155 9.979247 -0.0448282 4.276156 2.002518 8.848432 -5.2405633 1.710331 1.463783 7.535078 -1.399565df.apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x))) 0 1 2 30 0.515087 0.133967 -0.651699 0.1351751 0.125241 -0.689446 0.348301 0.3751882 -0.155414 0.310554 0.223925 -0.6248123 -0.484913 0.244924 0.079473 0.114448 それか、適切な列を選択すると、groupbyで上手くいくと思う： df[&apos;grp&apos;] = [&apos;A&apos;, &apos;A&apos;, &apos;B&apos;, &apos;B&apos;] 0 1 2 3 grp0 9.497381 0.552974 0.887313 -1.291874 A1 6.461631 -6.206155 9.979247 -0.044828 A2 4.276156 2.002518 8.848432 -5.240563 B3 1.710331 1.463783 7.535078 -1.399565 Bdf.groupby([&apos;grp&apos;])[[0,1,2,3]].apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x))) 0 1 2 30 0.5 0.5 -0.5 -0.51 -0.5 -0.5 0.5 0.52 0.5 0.5 0.5 -0.53 -0.5 -0.5 -0.5 0.5 By naught101 | 回答日時： 2015年10月21日 3:10 Source: Normalize data in pandas","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://so-matome.net/tags/pandas/"},{"name":"numpy","slug":"numpy","permalink":"https://so-matome.net/tags/numpy/"}]},{"title":"値を指定してリストから要素を削除する簡単な方法ってある？ [Python]","slug":"is-there-a-simple-way-to-delete-a-list-element-by-value","date":"2017-10-18T08:00:01.000Z","updated":"2017-10-21T09:46:59.000Z","comments":true,"path":"2017/10/18/is-there-a-simple-way-to-delete-a-list-element-by-value/","link":"","permalink":"https://so-matome.net2017/10/18/is-there-a-simple-way-to-delete-a-list-element-by-value/","excerpt":"質問：a=[1,2,3,4]b=a.index(6)del a[b]print a\nこれは次みたいなエラーを吐く：\nTraceback (most recent call last):  File \"D:\\zjm_code\\a.py\", line 6, in &lt;module&gt;    b=a.index(6)ValueError: list.index(x): x not in list\nだからこうしたんだけど：\na=[1,2,3,4]try:    b=a.index(6)    del a[b]except:    passprint a\nでも、これをするもっと簡単な方法って無い？\n By  zjm1126 | 質問日時： 2010年5月8日 7:48 ","text":"質問：a=[1,2,3,4]b=a.index(6)del a[b]print a これは次みたいなエラーを吐く： Traceback (most recent call last): File \"D:\\zjm_code\\a.py\", line 6, in &lt;module&gt; b=a.index(6)ValueError: list.index(x): x not in list だからこうしたんだけど： a=[1,2,3,4]try: b=a.index(6) del a[b]except: passprint a でも、これをするもっと簡単な方法って無い？ By zjm1126 | 質問日時： 2010年5月8日 7:48 —–回答1:リスト内の最初に出てきた要素を削除するには、単に list.removeでいける：&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']&gt;&gt;&gt; a.remove('b')&gt;&gt;&gt; print a['a', 'c', 'd'] マッチする要素全部を削除しないことに注意。リストの内包表記を使う必要がある。&gt;&gt;&gt; a = [1, 2, 3, 4, 2, 3, 4, 2, 7, 2]&gt;&gt;&gt; a = [x for x in a if x != 2]&gt;&gt;&gt; print a[1, 3, 4, 3, 4, 7] By Johannes Charra | 回答日時： 2010年5月8日 7:56 —–回答2:普通Pythonは実行できない何かをするように指示すると、Exceptionを投げる。だから、下記のうちどっちかをやらないといけないよ： if c in a: a.remove(c) または try: a.remove(c)except ValueError: pass An Exception isn’t necessarily a bad thing as long as it’s one you’re expecting and handle properly.例外は、それが君がしたいしているもので、かつ適切に処理されるなら必ずしも悪いことじゃないよ。 By Dave Webb | 回答日時： 2010年5月8日 8:02 —–回答3:a=[1,2,3,4]if 6 in a: a.remove(6) でもこれだと、リストを6回検索する必要があるから、try-exceptだともっと早くなると思う try: a.remove(6)except: pass By YOU | 回答日時： 2010年5月8日 7:57 —–回答4:こういうリストがあるとする： a = [1,2,2,3,4,5] マッチする全ての要素を取り出すには、pythonだとfilter関数を使用できるよ。例えばこんな感じ、 a = list(filter(lambda x: x!= 2, a)) だから、a!=2であるような要素は全てキープされる。 １つだけ取り除くような場合は a.remove(2) By mathwizurd | 回答日時： 2014年8月11日 19:55 —–回答5:新しいリストとかを使わずにインプレースでやる方法(内包表記無し)： def remove_all(seq, value): pos = 0 for item in seq: if item != value: seq[pos] = item pos += 1 del seq[pos:] By jfs | 回答日時： 2010年5月8日 14:57 —–Source: Is there a simple way to delete a list element by value?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"list","slug":"list","permalink":"https://so-matome.net/tags/list/"}]},{"title":"Trapped (出られない) [Webコミック]","slug":"commic-2017-05-29-trapped","date":"2017-10-18T08:00:01.000Z","updated":"2017-10-19T00:17:42.000Z","comments":true,"path":"2017/10/18/commic-2017-05-29-trapped/","link":"","permalink":"https://so-matome.net2017/10/18/commic-2017-05-29-trapped/","excerpt":"毎週水曜日はIT企業で働く人達をネタにしたWebコミック、Commit Stripを翻訳したものを紹介しています。\n今回のお題は「Trapped（出られない）」です。\n&lt;%- post.permalink %&gt;","text":"毎週水曜日はIT企業で働く人達をネタにしたWebコミック、Commit Stripを翻訳したものを紹介しています。 今回のお題は「Trapped（出られない）」です。 &lt;%- post.permalink %&gt; １コマ目：「もう何日も出口を探してるのに。これって馬鹿げてるよ！」「忘れな。もう俺達は出られないよ。」 ２コマ目：「でもさ、ここからずっと出られないなんて馬鹿げて、、、」「あっ！」 ３コマ目：「えええー、彼まで！」 ４コマ目：「すまん、お前らを助け出すつもりできたのに、でも上手く行かなかった、、、」「えーっ！あんたが最後の希望だったのに！」 ５コマ目：「もうハード・リブートするしかないのかな、、、」「落ち着いて！Vimから出る方法はあるはずだ。きっと俺達なら探し出せる、、、」 Source: Trapped","raw":null,"content":null,"categories":[],"tags":[{"name":"comic","slug":"comic","permalink":"https://so-matome.net/tags/comic/"}]},{"title":"ダイナミックに作成された要素のイベントバインド [Javascript]","slug":"event-binding-on-dynamically-created-elements","date":"2017-10-17T08:00:02.000Z","updated":"2017-10-21T09:48:12.000Z","comments":true,"path":"2017/10/17/event-binding-on-dynamically-created-elements/","link":"","permalink":"https://so-matome.net2017/10/17/event-binding-on-dynamically-created-elements/","excerpt":"質問：ページ上のすべての選択ボックスに対して.hoverイベントをバインドして、オンマウスかどうかによってその幅を少し変えるようなコードが有るんだけど、これはページの準備ができた時点ではうまく動作してる。\nで、問題なのは、AjaxまたはDOMを介して追加した選択ボックスだとイベントがバインドされない、ってことなんだ。\n幸いこのプラグイン(jQuery Live Queryプラグイン)を見つけたんだけど、僕のページにプラグインを追加する前に、誰かjQueryを使うか、別の方法かでこの問題を解決する方法を知ってる人がいないかなって聞きたいと思ったんだ。誰かいいアイデア無い？？\n By  Eli | 質問日時： 2008年10月14日 23:25 ","text":"質問：ページ上のすべての選択ボックスに対して.hoverイベントをバインドして、オンマウスかどうかによってその幅を少し変えるようなコードが有るんだけど、これはページの準備ができた時点ではうまく動作してる。 で、問題なのは、AjaxまたはDOMを介して追加した選択ボックスだとイベントがバインドされない、ってことなんだ。 幸いこのプラグイン(jQuery Live Queryプラグイン)を見つけたんだけど、僕のページにプラグインを追加する前に、誰かjQueryを使うか、別の方法かでこの問題を解決する方法を知ってる人がいないかなって聞きたいと思ったんだ。誰かいいアイデア無い？？ By Eli | 質問日時： 2008年10月14日 23:25 回答1:jQuery 1.7以降 jQuery.fn.onが使える $(staticAncestors).on(eventName, dynamicChild, function() &#123;&#125;); **これよりも推奨されるべきアプローチはlive()かな： $(selector).live( eventName, function()&#123;&#125; ); でも、 live()は on()のせいでに1.7では廃止され、1.9で完全に除去された。live()はこう書けるけど： $(selector).live( eventName, function()&#123;&#125; ); でも以下のon()に置き換えることができる。 $(document).on( eventName, selector, function()&#123;&#125; ); たとえば、あるページがクラス名dosomethingを持つ要素を動的に作成していたとすると、、イベントはすでに存在する親にバインドされてる。 $(document).on('mouseover mouseout', '.dosomething', function()&#123; //マウスオーバーやマウスアウト時に何をしたいか // '.dosomething'と一致する要素で発生する&#125;); イベントがバインドされる時点で存在するすべての親でうまくいくよ。例えば $('.buttons').on('click', 'button', function()&#123; //ここで何かする&#125;); は以下に適用される &lt;div class=\"buttons\"&gt; &lt;!-- &lt;button&gt;は動的に生成され、ここに追加される --&gt;&lt;/div&gt; 回答2:これは、ライブラリやプラグインを使用しない純粋なJavaScript での方法だよ。 document.addEventListener('click', function (e) &#123; if (hasClass(e.target, 'bu')) &#123; // .buがクリックされた // 何かやる &#125; else if (hasClass(e.target, 'test')) &#123; // .testがクリックされた // 何か他のことやる &#125;&#125;, false); ここで hasClassは function hasClass(elem, className) &#123; return elem.className.split(' ').indexOf(className) &gt; -1;&#125; ライブデモ By Ram Patra | 回答日時： 2014年12月9日 7:59 回答3:オブジェクトを作成するときにイベントを追加することができるよ。君が同じイベントを複数のオブジェクトに異なるタイミングで追加している場合なら、名前付き関数を作成するのがいいかも： var mouseOverHandler = function() &#123; // 何かやる&#125;;var mouseOutHandler = function () &#123; // 何かやる&#125;;$(function() &#123; //ドキュメントの読み込み時に、既存の要素に適用する $('select').hover(mouseOverHandler, mouseOutHandler);&#125;);///この次の部分はAjax呼び出しのコールバックにある$(\"&lt;select&gt;&lt;/select&gt;\") .append( /* 君の&lt;option&gt;s */ ) .hover(mouseOverHandler, mouseOutHandler) .appendTo( /* 選択ボックスが必要な場合はどこでも*/ ); By nickf | 回答日時： 2008年10月14日 23:31 Source: Event binding on dynamically created elements?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"https://so-matome.net/tags/jquery/"},{"name":"events","slug":"events","permalink":"https://so-matome.net/tags/events/"},{"name":"unobtrusive-javascript","slug":"unobtrusive-javascript","permalink":"https://so-matome.net/tags/unobtrusive-javascript/"}]},{"title":"JavaScriptは参照渡しpass-by-value言語か値渡しpass-by-reference言語か [Javascript]","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language","date":"2017-10-17T08:00:01.000Z","updated":"2017-10-20T22:14:34.000Z","comments":true,"path":"2017/10/17/is-javascript-a-pass-by-reference-or-pass-by-value-language/","link":"","permalink":"https://so-matome.net2017/10/17/is-javascript-a-pass-by-reference-or-pass-by-value-language/","excerpt":"質問：プリミティブ型(Number、Stringなど)は値によって渡されるけど、でもObjectは決まってない、なぜなら値渡し(オブジェクトを保持する変数が実際にはオブジェクトへの参照である場合)にも参照渡し(あるオブジェクトへの変数がそのオブジェクト自体を保持している時)の療法があるから。\nあと、あんまり重要じゃないけど、引数を渡す慣習的なやり方の正しい方法ってある？あと、これに関するセマンティクスが何でべきか定義してるようなJavaScriptの仕様を抜粋したものとかって無いかな？？\n By  Danail Nachev | 質問日時： 2009年2月5日 21:23 ","text":"質問：プリミティブ型(Number、Stringなど)は値によって渡されるけど、でもObjectは決まってない、なぜなら値渡し(オブジェクトを保持する変数が実際にはオブジェクトへの参照である場合)にも参照渡し(あるオブジェクトへの変数がそのオブジェクト自体を保持している時)の療法があるから。 あと、あんまり重要じゃないけど、引数を渡す慣習的なやり方の正しい方法ってある？あと、これに関するセマンティクスが何でべきか定義してるようなJavaScriptの仕様を抜粋したものとかって無いかな？？ By Danail Nachev | 質問日時： 2009年2月5日 21:23 回答1:これはJavascriptで面白い問題だよね。こんな例を考えてみよう： function changeStuff(a, b, c)&#123; a = a * 10; b.item = \"changed\"; c = &#123;item: \"changed\"&#125;;&#125;var num = 10;var obj1 = &#123;item: \"unchanged\"&#125;;var obj2 = &#123;item: \"unchanged\"&#125;;changeStuff(num, obj1, obj2);console.log(num);console.log(obj1.item);console.log(obj2.item); これは次のような出力をする： 10changedunchanged もし純粋な値渡しでだった場合、 obj1.itemを変更することは関数の外ではobj1への影響は全く無い。もし参照渡しだった場合、話が変わってくる。 numは100、 obj2.itemはchangedになる。 そうじゃなくて、考える状況は渡されたアイテムが値渡しであって、でも値渡しされるアイテムそれ自身は参照になってる状況だ。 技術的には、これはcall-by-sharingって呼ばれてる。 実際には、(numとobj2のように)パラメータ自体を変更した場合、それはパラメータに渡されるアイテム自身には影響を与えない。でも、(obj1のように)パラメータの内部を変更すると、その影響は（obj1に）伝わっていく。 回答2:基本常に値渡しだけど、オブジェクトの場合は変数の値は参照になってる。だから、オブジェクトを渡してそのメンバーを変更すると、その変更は関数の外でも引き継がれる。これは、参照渡しのように見える。でも、実際にオブジェクト変数の値を変更すると変化が引き継がれないことがわかるので、それが本当に値渡しであることの証明になってる。 例： function changeObject(x) &#123; x = &#123;member:\"bar\"&#125;; alert(\"in changeObject: \" + x.member);&#125;function changeMember(x) &#123; x.member = \"bar\"; alert(\"in changeMember: \" + x.member);&#125;var x = &#123;member:\"foo\"&#125;;alert(\"before changeObject: \" + x.member);changeObject(x);alert(\"after changeObject: \" + x.member); /*変更は引き継がない */alert(\"before changeMember: \" + x.member);changeMember(x);alert(\"after changeMember: \" + x.member); /* 変更は引き継ぐ */ 出力： before changeObject: fooin changeObject: barafter changeObject: foobefore changeMember: fooin changeMember: barafter changeMember: bar By Tim Goodman | 回答日時： 2011年3月15日 16:38 Source: Is JavaScript a pass-by-reference or pass-by-value language?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"pass-by-reference","slug":"pass-by-reference","permalink":"https://so-matome.net/tags/pass-by-reference/"},{"name":"pass-by-value","slug":"pass-by-value","permalink":"https://so-matome.net/tags/pass-by-value/"}]},{"title":"matplotlibのFigureの文字をパスじゃなく文字としてSVGに出力する方法 [Python]","slug":"output-matplotlib-figure-to-svg-with-text-as-text-not-curves","date":"2017-10-17T08:00:01.000Z","updated":"2017-10-21T09:48:32.000Z","comments":true,"path":"2017/10/17/output-matplotlib-figure-to-svg-with-text-as-text-not-curves/","link":"","permalink":"https://so-matome.net2017/10/17/output-matplotlib-figure-to-svg-with-text-as-text-not-curves/","excerpt":"質問：matplotlib.pyplot.savefig(&quot;test.svg&quot;, format=&quot;svg&quot;)で文字を大量に含むSVGとしてFigureを作ると、SVGファイルが膨大になるんだけど、これって文字がSVG内でパスとして保存されるからだよね。パスだとSVGの解釈も難しくなるし、文字がSVGの文字として出力したいんだけど、matplotlibでカーブじゃなく文字を文字として出力させる方法はってある？\nSVGファイルではこんなコードになってる。\n&lt;path d=\" M9.8125 72.9062 L55.9062 72.9062 L55.9062 64.5938 L19.671964.5938 L19.6719 43.0156 L54.3906 43.0156 L54.3906 34.7188 L19.671934.7188 L19.6719 8.29688 L56.7812 8.29688 L56.7812 0 L9.8125 0 z \"id=\"DejaVuSans-45\" /&gt;\n By  Bram | 質問日時： 2015年12月21日 1:43 ","text":"質問：matplotlib.pyplot.savefig(&quot;test.svg&quot;, format=&quot;svg&quot;)で文字を大量に含むSVGとしてFigureを作ると、SVGファイルが膨大になるんだけど、これって文字がSVG内でパスとして保存されるからだよね。パスだとSVGの解釈も難しくなるし、文字がSVGの文字として出力したいんだけど、matplotlibでカーブじゃなく文字を文字として出力させる方法はってある？ SVGファイルではこんなコードになってる。 &lt;path d=\" M9.8125 72.9062 L55.9062 72.9062 L55.9062 64.5938 L19.671964.5938 L19.6719 43.0156 L54.3906 43.0156 L54.3906 34.7188 L19.671934.7188 L19.6719 8.29688 L56.7812 8.29688 L56.7812 0 L9.8125 0 z \"id=\"DejaVuSans-45\" /&gt; By Bram | 質問日時： 2015年12月21日 1:43 回答1:Matplotlibs SVG文字レンダリングは、matplotlibrcかコード内でできるよ。http://matplotlib.org/users/customizing.htmlを参照： #svg.fonttype : 'path' # SVGフォントを扱う方法：# 'none': SVGが表示されるマシンにフォントがインストールされていると仮定。# 'path': 文字をパスとして埋め込む - ほとんどのSVGレンダラでサポートされている# 'svgfont': 文字をSVGフォントとして埋め込む - Chrome、オペラとサファリでサポートされてる これを使えば、フォントの埋め込みも文字をパスとしてレンダリングするのも両方できるよ： import matplotlib.pyplot as pltplt.rcParams['svg.fonttype'] = 'none' By zliw | 回答日時： 2016年3月1日 22:18 Source: Output matplotlib figure to SVG with text as text, not curves","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"svg","slug":"svg","permalink":"https://so-matome.net/tags/svg/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://so-matome.net/tags/matplotlib/"}]},{"title":"Pandasでgrepのような機能 [Python]","slug":"pandas-grep-like-function","date":"2017-10-16T08:00:01.000Z","updated":"2017-10-16T08:00:01.820Z","comments":true,"path":"2017/10/16/pandas-grep-like-function/","link":"","permalink":"https://so-matome.net2017/10/16/pandas-grep-like-function/","excerpt":"質問：Pandasのbuilt-in関数で、ある文字列や値を含む行を削除するような、grepみたいな関数ってある？よろしくお願いします。\n By  fred | 質問日時： 2012年9月27日 16:10 ","text":"質問：Pandasのbuilt-in関数で、ある文字列や値を含む行を削除するような、grepみたいな関数ってある？よろしくお願いします。 By fred | 質問日時： 2012年9月27日 16:10 回答1:df[‘column_label].strを見てみて。以下の例は、列Aに’a’という文字、列Bに20を持つようなすべての行を削除するよ。 In [46]: dfOut[46]: A B0 foo 101 bar 202 baz 30In [47]: cond = df['A'].str.contains('a') &amp;amp; (df['B'] == 20)In [48]: df.drop(df[cond].index.values)Out[48]: A B0 foo 102 baz 30 By Wouter Overmeire | 回答日時： 2012年9月27日 18:03 Source: Pandas: grep like function","raw":null,"content":null,"categories":[],"tags":[{"name":"pandas","slug":"pandas","permalink":"https://so-matome.net/tags/pandas/"},{"name":"grep","slug":"grep","permalink":"https://so-matome.net/tags/grep/"},{"name":"row","slug":"row","permalink":"https://so-matome.net/tags/row/"}]},{"title":"jQuery Ajaxファイルアップロード [Javascript]","slug":"jquery-ajax-file-upload","date":"2017-10-16T08:00:01.000Z","updated":"2017-10-16T18:47:53.000Z","comments":true,"path":"2017/10/16/jquery-ajax-file-upload/","link":"","permalink":"https://so-matome.net2017/10/16/jquery-ajax-file-upload/","excerpt":"質問：Ajaxリクエストのpostメソッドを使ってファイルをアップロードしたいんだけど、こんなjQueryコードって使える？\n$.ajax(&#123;    type: \"POST\",    timeout: 50000,    url: url,    data: dataString,    success: function (data) &#123;        alert('success');        return false;    &#125;&#125;);\nもし可能であれば、「data」の部分を記入しておく必要ある？これって正しい方法？僕はファイルをサーバー側に送信したいだけなんだ。\n色々ぐぐってみたけど、僕が見つけたのはプラグインだけで、できれば使いたくないんだ。少なくとも現時点では。\n By  Willy | 質問日時： 2010年2月23日 16:58 ","text":"質問：Ajaxリクエストのpostメソッドを使ってファイルをアップロードしたいんだけど、こんなjQueryコードって使える？ $.ajax(&#123; type: \"POST\", timeout: 50000, url: url, data: dataString, success: function (data) &#123; alert('success'); return false; &#125;&#125;); もし可能であれば、「data」の部分を記入しておく必要ある？これって正しい方法？僕はファイルをサーバー側に送信したいだけなんだ。 色々ぐぐってみたけど、僕が見つけたのはプラグインだけで、できれば使いたくないんだ。少なくとも現時点では。 By Willy | 質問日時： 2010年2月23日 16:58 回答1:XHR2ではAJAXによるファイルアップロードがサポートされてるよ。例えば、FormDataオブジェクトを通して。 でも残念だけどすべてのブラウザでサポートされてるわけじゃないし、古いブラウザでは動かない。 FormDataのサポートは、下のバージョンのデスクトップ・ブラウザから開始される。 IE 10+、 Firefox 4.0以降、 Chrome 7以上、 Safari 5以上、 Opera 12以上 詳細については、MDNリンクを参照 By Adeel | 回答日時： 2010年2月23日 17:03 回答2:getSize関数を使用してサイズを確認する、それかgetType関数を使用して型をチェックするのがいいかな。プログレスバーhtmlとcssコードも追加しておいたよ。 var Upload = function (file) &#123; this.file = file;&#125;;Upload.prototype.getType = function() &#123; return this.file.type;&#125;;Upload.prototype.getSize = function() &#123; return this.file.size;&#125;;Upload.prototype.getName = function() &#123; return this.file.name;&#125;;Upload.prototype.doUpload = function () &#123; var that = this; var formData = new FormData(); // assocのキー値を追加。これは投稿の値になる formData.append(\"file\", this.file, this.getName()); formData.append(\"upload_file\", true); $.ajax(&#123; type: \"POST\", url: \"script\", xhr: function () &#123; var myXhr = $.ajaxSettings.xhr(); if (myXhr.upload) &#123; myXhr.upload.addEventListener('progress', that.progressHandling, false); &#125; return myXhr; &#125;, success: function (data) &#123; //ここに君のコールバック &#125;, error: function (error) &#123; // ハンドルエラー &#125;, async: true, data: formData, cache: false, contentType: false, processData: false, timeout: 60000 &#125;);&#125;;Upload.prototype.progressHandling = function (event) &#123; var percent = 0; var position = event.loaded || event.position; var total = event.total; var progress_bar_id = \"#progress-wrp\"; if (event.lengthComputable) &#123; percent = Math.ceil(position / total * 100); &#125; //君のコードに合うようにprogressbarsクラスを更新して $(progress_bar_id + \" .progress-bar\").css(\"width\", +percent + \"%\"); $(progress_bar_id + \" .status\").text(percent + \"%\");&#125;; Uploadクラスの使い方 // 自分のIDに変更すること$(\"#ingredient_file\").on(\"change\", function (e) &#123; var file = $(this)[0].files[0]; var upload = new Upload(file); // たぶんここでサイズを確認するか、upload.getSize()かupload.getType()でここに入力させる。 //アップロードを実行する upload.doUpload();&#125;); プログレスバーのHTMLコード &lt;div id=\"progress-wrp\"&gt; &lt;div class=\"progress-bar\"&gt;&lt;/div&gt; &lt;div class=\"status\"&gt;0%&lt;/div&gt;&lt;/div&gt; プログレスバーのCSSコード #progress-wrp &#123; border: 1px solid #0099CC; padding: 1px; position: relative; height: 30px; border-radius: 3px; margin: 10px; text-align: left; background: #fff; box-shadow: inset 1px 3px 6px rgba(0, 0, 0, 0.12);&#125;#progress-wrp .progress-bar&#123; height: 100%; border-radius: 3px; background-color: #f39ac7; width: 0; box-shadow: inset 1px 1px 10px rgba(0, 0, 0, 0.11);&#125;#progress-wrp .status&#123; top:3px; left:50%; position:absolute; display:inline-block; color: #000000;&#125; By Ziinloader | 回答日時： 2012年5月30日 7:00 Source: jQuery Ajax File Upload","raw":null,"content":null,"categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"https://so-matome.net/tags/jquery/"},{"name":"ajax","slug":"ajax","permalink":"https://so-matome.net/tags/ajax/"},{"name":"post","slug":"post","permalink":"https://so-matome.net/tags/post/"},{"name":"file-upload","slug":"file-upload","permalink":"https://so-matome.net/tags/file-upload/"}]},{"title":"プログラマーが見るべき20のTEDトーク(1)　12歳のアプリ開発者 [Video]","slug":"ted-talks-programming-everyone-must-watch-1","date":"2017-10-14T20:40:59.000Z","updated":"2017-10-16T19:34:38.000Z","comments":true,"path":"2017/10/14/ted-talks-programming-everyone-must-watch-1/","link":"","permalink":"https://so-matome.net2017/10/14/ted-talks-programming-everyone-must-watch-1/","excerpt":"Thomas Suarez：12歳のアプリ開発者MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。\nまず1つ目は「Thomas Suarez：12歳のアプリ開発者」。以下のように紹介されています：\n\nあなたが若すぎたり、年を取ったり、プログラミングに慣れていないと思うなら、この4分間のTEDx Talkであなたの心を変えてください。少しの衝動と賢さで、トーマス・スアレスは12歳までにいくつかのアプリを作る方法を学びました。 （プログラミングをやらないことの）言い訳に彼は負けませんでした。あなたはどうでしょう？\n\n\n\n動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします：","text":"Thomas Suarez：12歳のアプリ開発者MakeUseOfより、プログラマーが見ておくべきTEDトークが話題になっていたのでご紹介します。内容は、プログラミング方法を学ぶためではなく、プログラマーになる方法を学ぶことにフォーカスが置かれ、考え方を知ることを重視した内容になっています。 まず1つ目は「Thomas Suarez：12歳のアプリ開発者」。以下のように紹介されています： あなたが若すぎたり、年を取ったり、プログラミングに慣れていないと思うなら、この4分間のTEDx Talkであなたの心を変えてください。少しの衝動と賢さで、トーマス・スアレスは12歳までにいくつかのアプリを作る方法を学びました。 （プログラミングをやらないことの）言い訳に彼は負けませんでした。あなたはどうでしょう？ 動画は日本語字幕を表示してありますが、TEDトークの日本語訳には意訳している部分もあるため、英語字幕（以下）をフォローするのをお薦めします： I&#39;ve always had a fascination for computers and technology, and I made a few apps for the iPhone, iPod touch, and iPad.I&#39;d like to share a couple with you today.My first app was a unique fortune teller called &quot;Earth Fortune&quot; that would display different colors of Earth depending on what your fortune was.My favorite and most successful app is &quot;Bustin Jieber,&quot; which is – (Laughter) which is a Justin Bieber whack-a-mole.(Laughter) I created it because a lot of people at school disliked Justin Bieber a little bit, so I decided to make the app.So I went to work programming it, and I released it just before the holidays in 2010.A lot of people ask me, how did I make these?A lot of times it&#39;s because the person who asked the question wants to make an app also.A lot of kids these days like to play games, but now they want to make them, and it&#39;s difficult, because not many kids know where to go to find out how to make a program.I mean, for soccer, you could go to a soccer team.For violin, you could get lessons for a violin.But what if you want to make an app?And the kid&#39;s parents might have done some of these things when they were young, but not many parents have written apps.(Laughter) Where do you go to find out how to make an app?Well, this is how I approached it, this is what I did.First of all, I&#39;ve been programming in multiple other programming languages to get the basics down, such as Python, C, Java, etc.And then Apple released the iPhone, and with it, the iPhone software development kit, and the software development kit is a suite of tools for creating and programming an iPhone app.This opened up a whole new world of possibilities for me, and after playing with the software development kit a little bit, I made a couple of apps, I made some test apps.One of them happened to be &quot;Earth Fortune,&quot; and I was ready to put &quot;Earth Fortune&quot; on the App Store, and so I persuaded my parents to pay the 99 dollar fee to be able to put my apps on the App Store.They agreed, and now I have apps on the App Store.I&#39;ve gotten a lot of interest and encouragement from my family, friends, teachers and even people at the Apple Store, and that&#39;s been a huge help to me.I&#39;ve gotten a lot of inspiration from Steve Jobs, and I&#39;ve started an app club at school, and a teacher at my school is kindly sponsoring my app club.Any student at my school can come and learn how to design an app.This is so I can share my experiences with others.There&#39;s these programs called the iPad Pilot Program, and some districts have them.I&#39;m fortunate enough to be part of one.A big challenge is, how should the iPads be used, and what apps should we put on the iPads?So we&#39;re getting feedback from teachers at the school to see what kind of apps they&#39;d like.When we design the app and we sell it, it will be free to local districts; and other districts that we sell to – all the money from that will go into the local ed foundations.These days, students usually know a little bit more than teachers with the technology.(Laughter) So – (Laughter) Sorry.(Laughter) So this is a resource to teachers, and educators should recognize this resource and make good use of it.(Laughter) I&#39;d like to finish up by saying what I&#39;d like to do in the future.First of all, I&#39;d like to create more apps, more games.I&#39;m working with a third party company to make an app.I&#39;d like to get into Android programming and development, and I&#39;d like to continue my app club, and find other ways for students to share knowledge with others.Thank you.(Applause)","raw":null,"content":null,"categories":[],"tags":[{"name":"video","slug":"video","permalink":"https://so-matome.net/tags/video/"},{"name":"english","slug":"english","permalink":"https://so-matome.net/tags/english/"},{"name":"TED","slug":"TED","permalink":"https://so-matome.net/tags/TED/"}]},{"title":"JavaScriptの変数のスコープって？ [Javascript]","slug":"what-is-the-scope-of-variables-in-javascript","date":"2017-10-13T08:00:01.000Z","updated":"2017-10-16T19:34:38.000Z","comments":true,"path":"2017/10/13/what-is-the-scope-of-variables-in-javascript/","link":"","permalink":"https://so-matome.net2017/10/13/what-is-the-scope-of-variables-in-javascript/","excerpt":"質問：javascriptの変数のスコープってどうなってる？関数の中と外で同じスコープを持ってる？それとも違う？また、グローバルに定義されている場合、変数はどこに格納されるの？\n By  lYriCAlsSH | 質問日時： 2009年2月1日 8:27 ","text":"質問：javascriptの変数のスコープってどうなってる？関数の中と外で同じスコープを持ってる？それとも違う？また、グローバルに定義されている場合、変数はどこに格納されるの？ By lYriCAlsSH | 質問日時： 2009年2月1日 8:27 回答1:君が勉強するためにベストなのは例をたくさん与えることだと思う。Javascriptのプログラマーは、どれくらいスコープを理解しているかによって実質的にランク付けされてるからね。時には、スコープは直感に反することもあるけど。 1.＊グローバルスコープの変数* var a = 1;// global scopefunction one() &#123; alert(a); // alerts &apos;1&apos;&#125; ローカルスコープ var a = 1;function two(a) &#123; alert(a); // '1'のグローバル値ではなく、指定された引数に警告する。&#125;// ローカルスコープfunction three() &#123; var a = 3; alert(a); // '3'を警告&#125; 中級：JavaScriptにブロックスコープなんてものは存在しない(ES5; ES6では letが導入された) a. var a = 1;function four() &#123; if (true) &#123; var a = 4; &#125; alert(a); // '1'のグローバル値ではなく、4を警告&#125; b.var a = 1;function one() &#123; if (true) &#123; let a = 4; &#125; alert(a); // 'let'キーワードがブロックスコープを使用するため、'1'を警告&#125; 中級**：Objectプロパティ var a = 1;function five() &#123; this.a = 5;&#125;alert(new five().a); // alerts '5' 上級：Closure var a = 1;var six = (function() &#123; var a = 6; return function() &#123; // JavaScriptで \"closure\"はここの'a'にアクセスできることを意味する //なぜなら定義した関数内で定義されているから。 alert(a); // alerts '6' &#125;;&#125;)(); 上級**：プロトタイプベースのスコープ解決 var a = 1;function seven() &#123; this.a = 7;&#125;// [object].prototype.property はルックアップチェーン内の// [object].property に失われる。例えば...//上記のコンストラクタで 'a'が設定されているため、到達しない。seven.prototype.a = -1;//コンストラクタで 'b'が設定されていなくても、到達する。seven.prototype.b = 8;alert(new seven().a); // alerts '7'alert(new seven().b); // alerts '8' グローバル+ローカル：必要以上に複雑なケース var x = 5;(function () &#123; console.log(x); var x = 10; console.log(x);&#125;)(); undefinedと10 &#39;ではなく5と 10`を出力。JavaScriptは変数宣言(初期化ではない)を常に先頭に移動し、以下のコードと同等になる。 var x = 5;(function () &#123; var x; console.log(x); x = 10; console.log(x);&#125;)(); キャッチ節のスコープを持つ変数 var e = 5;console.log(e);try &#123; throw 6;&#125; catch (e) &#123; console.log(e);&#125;console.log(e); これは 5、6、 5を出力する。 catch節はeはグローバルにもローカル変数にも影響を持つ。でも、この特別なスコープはキャッチされた変数に対してのみです。var f;をcatch節の中に書くと、try-catchブロックの前または後に定義した場合とまったく同じ。 By Triptych | 回答日時： 2009年2月1日 8:58 Source: What is the scope of variables in JavaScript?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"variables","slug":"variables","permalink":"https://so-matome.net/tags/variables/"},{"name":"scope","slug":"scope","permalink":"https://so-matome.net/tags/scope/"}]},{"title":"列単位でデータフレームをソートする方法は？[R]","slug":"how-to-sort-a-dataframe-by-columns","date":"2017-10-13T08:00:01.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/13/how-to-sort-a-dataframe-by-columns/","link":"","permalink":"https://so-matome.net2017/10/13/how-to-sort-a-dataframe-by-columns/","excerpt":"質問：僕は複数の列でdata.frameをソートしたいんだ。たとえば、下のようなデータフレームで、列zを降順に、列bを昇順にソートするにはどうしたらいい？：\ndd &lt;- data.frame(b = factor(c(\"Hi\", \"Med\", \"Hi\", \"Low\"),      levels = c(\"Low\", \"Med\", \"Hi\"), ordered = TRUE),      x = c(\"A\", \"D\", \"A\", \"C\"), y = c(8, 3, 9, 9),      z = c(1, 1, 1, 2))dd    b x y z1  Hi A 8 12 Med D 3 13  Hi A 9 14 Low C 9 2\n By  Christopher DuBois | 質問日時： 2009年8月18日 21:33 ","text":"質問：僕は複数の列でdata.frameをソートしたいんだ。たとえば、下のようなデータフレームで、列zを降順に、列bを昇順にソートするにはどうしたらいい？： dd &lt;- data.frame(b = factor(c(\"Hi\", \"Med\", \"Hi\", \"Low\"), levels = c(\"Low\", \"Med\", \"Hi\"), ordered = TRUE), x = c(\"A\", \"D\", \"A\", \"C\"), y = c(8, 3, 9, 9), z = c(1, 1, 1, 2))dd b x y z1 Hi A 8 12 Med D 3 13 Hi A 9 14 Low C 9 2 By Christopher DuBois | 質問日時： 2009年8月18日 21:33 回答1:追加のライブラリとか使わなくてもorder()関数が使えるよ – example(order)コードの一番目の例を見れば一発でわかると思う: R&gt; dd[with(dd, order(-z, b)), ] b x y z4 Low C 9 22 Med D 3 11 Hi A 8 13 Hi A 9 1 同じことを列に対してやろうとするなら、ソートしたい列をorder()関数に渡してやればいい： R&gt; dd[ order(-dd[,4], dd[,1]), ] b x y z4 Low C 9 22 Med D 3 11 Hi A 8 13 Hi A 9 1R&gt; これは列の名前を使うのよりいい方法だと思う（それをするにはwith()でやると簡単だと思うけど). By Dirk Eddelbuettel | 回答日時： 2009年8月18日 21:51 回答2:君のチョイスはいくつかある： baseのorder dplyrのarrange data.tableのsetorderとsetorderv plyrのarrange taRifxのsort doByのorderBy DeducerのsortData たいていの場合、ライブラリを使っちゃいけない場合とかを除いてdplyrかdata.tableを使うべきだと思う。もしその場合だったら、base :: orderを使えばいい。 By Ari B. Friedman | 回答日時： 2011年7月29日 10:48 回答3:他の人がすばらしい答えをしてるけど、個人的にはdplyrが僕がすぐに、そして簡単に覚えられた構文を使ってる（だからよく使う）。 library(dplyr)# sort mtcars by mpg, ascending... use desc(mpg) for descendingarrange(mtcars, mpg)# sort mtcars first by mpg, then by cyl, then by wt)arrange(mtcars , mpg, cyl, wt) OPの問題については： arrange(dd, desc(z), b) b x y z1 Low C 9 22 Med D 3 13 Hi A 8 14 Hi A 9 1 By Ben | 回答日時： 2014年2月18日 21:29 Source: How to sort a dataframe by column(s)?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"r","slug":"r","permalink":"https://so-matome.net/tags/r/"},{"name":"dataframe","slug":"dataframe","permalink":"https://so-matome.net/tags/dataframe/"},{"name":"r-faq","slug":"r-faq","permalink":"https://so-matome.net/tags/r-faq/"},{"name":"sorting","slug":"sorting","permalink":"https://so-matome.net/tags/sorting/"}]},{"title":"iPhone X [Webコミック]","slug":"commic-2017-09-13-apple-iphone-x-juste-a-small-troll","date":"2017-10-13T00:06:14.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/13/commic-2017-09-13-apple-iphone-x-juste-a-small-troll/","link":"","permalink":"https://so-matome.net2017/10/13/commic-2017-09-13-apple-iphone-x-juste-a-small-troll/","excerpt":"","text":"!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs'); １コマ目：「さてこれまでで最大のキーノートスピーチが準備されています！我々は総工費50億ドルのAppleの新しいヘッドクォーターに来ております！」 ２コマ目：「これがあの有名なスティーブ・ジョブズ・シアターです。この素晴らしい空間で我々はもうすぐ史上最高のスマートフォンを目にしようとしています！」 ３コマ目：「来ました！我々の目の前にiPhone Xが姿を表しました！最新のiPhoneがなんと1000ドル以下！この技術的驚異はかならずスマートフォンの世界を革新することでしょう！」 ４コマ目：「すばらしい、、、、ただすばらしい、、、、」 Source: Apple iPhone X - Juste a small troll var linkwithin_site_id = 2565338;","raw":null,"content":null,"categories":[],"tags":[]},{"title":"var functionName = function(){} 対 function functionName(){} [Javascript]","slug":"var-functionname-function-vs-function-functionname","date":"2017-10-12T08:00:01.000Z","updated":"2017-10-16T19:34:38.000Z","comments":true,"path":"2017/10/12/var-functionname-function-vs-function-functionname/","link":"","permalink":"https://so-matome.net2017/10/12/var-functionname-function-vs-function-functionname/","excerpt":"質問：最近他人のJavascriptのコードをメンテしだして、バグを修正したり、機能を追加したり、コードをきちんと整理して一貫するようにしてる。\nで、前の開発者は関数を宣言するのに2つの方法を使用してて、これらを使い分けるのに理由があるのかどうかよくわからないんだけど。その２つの方法は：\nvar functionOne = function() &#123;    // 何かのコード&#125;;\nfunction functionTwo() &#123;    // 何かのコード&#125;\nこの2つの異なる方法を使用する理由って何？それぞれメリットデメリットってある？もう片方ではできて、他では出来ないことってある？\n By  Richard Garside | 質問日時： 2008年12月3日 11:31 ","text":"質問：最近他人のJavascriptのコードをメンテしだして、バグを修正したり、機能を追加したり、コードをきちんと整理して一貫するようにしてる。 で、前の開発者は関数を宣言するのに2つの方法を使用してて、これらを使い分けるのに理由があるのかどうかよくわからないんだけど。その２つの方法は： var functionOne = function() &#123; // 何かのコード&#125;; function functionTwo() &#123; // 何かのコード&#125; この2つの異なる方法を使用する理由って何？それぞれメリットデメリットってある？もう片方ではできて、他では出来ないことってある？ By Richard Garside | 質問日時： 2008年12月3日 11:31 回答1:The difference is that functionOne is a function expression and so only defined when that line is reached, whereas functionTwo is a function declaration and is defined as soon as its surrounding function or script is executed (due to hoisting).For example, a function expression: functionOneは関数式なので、その行に達すると定義されるけど、 一方でfunctionTwoは関数宣言なので、その周囲の関数またはスクリプトが実行されたら定義される(ホイストによる)。 たとえば、関数式は次のようになる。 // TypeError：undefinedは関数ではないfunctionOne();var functionOne = function() &#123; console.log(\"Hello!\");&#125;; で、関数宣言： // 出力: \"Hello!\"functionTwo();function functionTwo() &#123; console.log(\"Hello!\");&#125; これは、関数宣言を使って条件付きで関数を定義することもできないことを意味してる： if (test) &#123; //エラーまたは不正行為 function functionThree() &#123; doSomething(); &#125;&#125;上は `test`の値にかかわらず` functionThree`を実際に定義してる -- でも`use strict`が有効でない限り、エラーが発生してしまう。 By Greg | 回答日時： 2008年12月3日 11:37 Source: var functionName = function() {} vs function functionName() {}","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"idioms","slug":"idioms","permalink":"https://so-matome.net/tags/idioms/"},{"name":"function","slug":"function","permalink":"https://so-matome.net/tags/function/"},{"name":"syntax","slug":"syntax","permalink":"https://so-matome.net/tags/syntax/"}]},{"title":"データフレームのリストを作成するにはどうすればいい？ [R]","slug":"how-do-i-make-a-list-of-data-frames","date":"2017-10-12T08:00:01.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/12/how-do-i-make-a-list-of-data-frames/","link":"","permalink":"https://so-matome.net2017/10/12/how-do-i-make-a-list-of-data-frames/","excerpt":"質問：データフレームのリストを作成するのってどうすればいい？\nそしてそのリストからそれぞれのデータフレームにアクセスするのってどうすればいい？\nなんか簡単な例を見つけることができなくって、、、\nd1&lt;-data.frame(y1&lt;-c(1,2,3),y2&lt;-c(4,5,6))d2&lt;-data.frame(y1&lt;-c(3,2,1),y2&lt;-c(6,5,4))\n By  Ben | 質問日時： 2013年7月6日 2:16 ","text":"質問：データフレームのリストを作成するのってどうすればいい？ そしてそのリストからそれぞれのデータフレームにアクセスするのってどうすればいい？ なんか簡単な例を見つけることができなくって、、、 d1&lt;-data.frame(y1&lt;-c(1,2,3),y2&lt;-c(4,5,6))d2&lt;-data.frame(y1&lt;-c(3,2,1),y2&lt;-c(6,5,4)) By Ben | 質問日時： 2013年7月6日 2:16 回答1:これは君の質問とは直接関係ないけど、 関数のコールの中では=じゃなく&lt;-を使うべき。&lt;-を使用すると、どんな環境であろうとy1とy2という変数を作っちゃう。： d1&lt;-data.frame(y1&lt;-c(1,2,3),y2&lt;-c(4,5,6))y1# [1] 1 2 3y2# [1] 4 5 6 これはデータフレーム内の列の名前として作ったのとは別の結果になってしまう： d1# y1....c.1..2..3. y2....c.4..5..6.# 1 1 4# 2 2 5# 3 3 6 一方、 =演算子は、あるベクトルをdata.frameへの引数として紐つけてくれる。 で、君の質問だけど、データフレームのリストを作成するのは簡単： d1 &lt;- data.frame(y1=c(1,2,3),y2=c(4,5,6))d2 &lt;- data.frame(y1=c(3,2,1),y2=c(6,5,4))my.list &lt;- list(d1, d2) 他のリスト要素にアクセスするのと同じように、データフレームにアクセスできるよ。 my.list[[1]]# y1 y2# 1 1 4# 2 2 5# 3 3 6 By Peyton | 回答日時： 2013年7月6日 2:36 Source: How do I make a list of data frames?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"list","slug":"list","permalink":"https://so-matome.net/tags/list/"},{"name":"r","slug":"r","permalink":"https://so-matome.net/tags/r/"},{"name":"dataframe","slug":"dataframe","permalink":"https://so-matome.net/tags/dataframe/"},{"name":"r-faq","slug":"r-faq","permalink":"https://so-matome.net/tags/r-faq/"}]},{"title":"デバイスがiPhone Xであるかどうかを検出する [iOS]","slug":"detect-if-the-device-is-iphone-x","date":"2017-10-11T21:55:38.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/11/detect-if-the-device-is-iphone-x/","link":"","permalink":"https://so-matome.net2017/10/11/detect-if-the-device-is-iphone-x/","excerpt":"質問：僕のiOSアプリケーションは UINavigationBarの高さ情報を使ってるんだけど、新しいiPhone Xだと問題が起こりそうなんだ。\n誰かiPhone X上でアプリが実行されているかどうかを自動検出する信頼できる方法って知ってる（Objectiv-Cで）？\n編集：\nもちろん、画面のサイズをチェックすることは可能だけど、iOSを検出するために使うTARGET_OS_IPHONEみたいなビルトイン・メソッドって無いかな、、、？\nif (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) &#123;    CGSize screenSize = [[UIScreen mainScreen] bounds].size;    if (screenSize.height == 812)        NSLog(@&quot;iPhone X&quot;);&#125;\n By  Andrei Herford | 質問日時： 2017年9月13日 8:12 ","text":"質問：僕のiOSアプリケーションは UINavigationBarの高さ情報を使ってるんだけど、新しいiPhone Xだと問題が起こりそうなんだ。 誰かiPhone X上でアプリが実行されているかどうかを自動検出する信頼できる方法って知ってる（Objectiv-Cで）？ 編集： もちろん、画面のサイズをチェックすることは可能だけど、iOSを検出するために使うTARGET_OS_IPHONEみたいなビルトイン・メソッドって無いかな、、、？ if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) &#123; CGSize screenSize = [[UIScreen mainScreen] bounds].size; if (screenSize.height == 812) NSLog(@&quot;iPhone X&quot;);&#125; By Andrei Herford | 質問日時： 2017年9月13日 8:12 回答1:答えから言うとNo、直接的に検出する方法はないよ。もっと詳細が知りたければこことかここを参照。 もしiPhoneの高さの検出を検出したいなら、2436pxを使うべき デバイス画面のサイズと向き Switft3以上if UIDevice().userInterfaceIdiom == .phone &#123; switch UIScreen.main.nativeBounds.height &#123; case 1136: print(\"iPhone 5 or 5S or 5C\") case 1334: print(\"iPhone 6/6S/7/8\") case 2208: print(\"iPhone 6+/6S+/7+/8+\") case 2436: print(\"iPhone X\") default: print(\"unknown\") &#125; &#125; Objective Cif([[UIDevice currentDevice]userInterfaceIdiom]==UIUserInterfaceIdiomPhone) &#123; switch ((int)[[UIScreen mainScreen] nativeBounds].size.height) &#123; case 1136: printf(&quot;iPhone 5 or 5S or 5C&quot;); break; case 1334: printf(&quot;iPhone 6/6S/7/8&quot;); break; case 2208: printf(&quot;iPhone 6+/6S+/7+/8+&quot;); break; case 2436: printf(&quot;iPhone X&quot;); break; default: printf(&quot;unknown&quot;); &#125;&#125; それかscreenSize.heightをint型の812でなくfloat型の812.0fとして使用するとか if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) &#123; CGSize screenSize = [[UIScreen mainScreen] bounds].size; if (screenSize.height == 812.0f) NSLog(@&quot;iPhone X&quot;);&#125; 詳細についてはこちら. 更新 デバイスタイプを識別するために userInterfaceIdiomプロパティを使うべきじゃない。iPhoneアプリはiPadにもインストールできるので、その場合、userInterfaceIdiomはUIUserInterfaceIdiomPhoneを返してしまうから。 適切な方法は、 unameを使ってマシン名を取得すること。このスレッドを参照してみて。 By Anbu.Karthik | 回答日時： 2017年9月13日 8:41 回答2:もう一つの方法はこんなの。これは今のところiPhone Xだけが上部にノッチを持ったデバイスだから動くんだけど。僕が使ってる方法は： iphoneX = NO;if (@available(iOS 11.0, *)) &#123; if (_window.safeAreaInsets.top &gt; 0.0) &#123; iphoneX = YES; &#125;&#125; もちろん、横向きでの場合は左右のセーフエリアのインセットをチェックする必要があるかも。 編集：_windowはAppDelegateのUIWindowで、このチェックはアプリケーションdidFinishLaunchingWithOptionsの中で行われる。 By saswanb | 回答日時： 2017年9月14日 19:50 回答3:デバイスモデル/マシン名をチェックして。コードの中でポイントやピクセル数を使わないで！それはハードコードだから！ #import &lt;sys/utsname.h&gt; // import it in your header or implementation file.NSString* deviceName()&#123; struct utsname systemInfo; uname(&amp;systemInfo); return [NSString stringWithCString:systemInfo.machine encoding:NSUTF8StringEncoding];&#125; 結果： @&quot;iPhone10,3&quot; on iPhone X (CDMA)@&quot;iPhone10,6&quot; on iPhone X (GSM) この回答を参照。 By Itachi | 回答日時： 2017年9月20日 7:51 Source: Detect if the device is iPhone X","raw":null,"content":null,"categories":[],"tags":[{"name":"ios","slug":"ios","permalink":"https://so-matome.net/tags/ios/"},{"name":"objective-c","slug":"objective-c","permalink":"https://so-matome.net/tags/objective-c/"},{"name":"iphone","slug":"iphone","permalink":"https://so-matome.net/tags/iphone/"},{"name":"swift","slug":"swift","permalink":"https://so-matome.net/tags/swift/"},{"name":"iphone-x","slug":"iphone-x","permalink":"https://so-matome.net/tags/iphone-x/"}]},{"title":"Pythonには部分文字列を探す文字列用の'contains'メソッドとかってある？ [Python]","slug":"does-python-have-a-string-contains-substring-method","date":"2017-10-11T08:00:01.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/11/does-python-have-a-string-contains-substring-method/","link":"","permalink":"https://so-matome.net2017/10/11/does-python-have-a-string-contains-substring-method/","excerpt":"質問：string.contains とか string.indexofみたいなメソッドをPythonで探してるんだけど。やりたい事は：\nif not somestring.contains(\"blah\"):   continue\n By  Blankman | 質問日時： Aug 9 ‘10 at 2:52 ","text":"質問：string.contains とか string.indexofみたいなメソッドをPythonで探してるんだけど。やりたい事は： if not somestring.contains(\"blah\"): continue By Blankman | 質問日時： Aug 9 ‘10 at 2:52 回答1:in演算子を使うといいよ： if \"blah\" not in somestring: continue By Michael Mrozek | 回答日時： Aug 9 ‘10 at 2:56 回答2:部分文字列検索の場合は string.find(&quot;substring&quot;)を使うことができるよ。 でもfind、index、inを使う時はちょっと気をつけて。どうしてかって言うと、それらは部分文字列検索だから。言い換えれば、： s = \"This be a string\"if s.find(\"is\") == -1: print \"No 'is' here!\"else: print \"Found 'is' in the string.\" これはFound &#39;is&#39; in the string.を出力するはず。同様に if &quot;is&quot; in s:はTrueと評価されるはず。これは君が望むものかどうかわからないけど。 By eldarerathis | 回答日時： Aug 9 ‘10 at 2:55 Source: Does Python have a string ‘contains’ substring method?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"string","slug":"string","permalink":"https://so-matome.net/tags/string/"},{"name":"substring","slug":"substring","permalink":"https://so-matome.net/tags/substring/"},{"name":"contains","slug":"contains","permalink":"https://so-matome.net/tags/contains/"}]},{"title":"JavaScriptでJSONをパースする方法？ [Javascript]","slug":"parse-json-in-javascript","date":"2017-10-11T08:00:01.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/11/parse-json-in-javascript/","link":"","permalink":"https://so-matome.net2017/10/11/parse-json-in-javascript/","excerpt":"質問：JavascriptでJSONをパースしたんだけど。レスポンスとして考えてるのはこんな感じ：\nvar response = '&#123;\"result\":true,\"count\":1&#125;';\nどうやったらresultとかcountとかの値を取ってこれる？\n By          user605334 | 質問日時： 2011年2月8日 16:34 ","text":"質問：JavascriptでJSONをパースしたんだけど。レスポンスとして考えてるのはこんな感じ： var response = '&#123;\"result\":true,\"count\":1&#125;'; どうやったらresultとかcountとかの値を取ってこれる？ By user605334 | 質問日時： 2011年2月8日 16:34 回答1:ほとんどのブラウザはJSON.parseをサポートしてて、ECMA-262第5版(JavaScriptが基づいている仕様)で定義されてる。使い方は簡単： var json = '&#123;\"result\":true,\"count\":1&#125;', obj = JSON.parse(json);alert(obj.count); これを実装することができないブラウザには、json2.jsをどうぞ。 すでにjQueryを使ってる場合は、$.parseJSON関数が（利用可能な場合は）JSON.parseにマップし、古いブラウザでは evalの形式にマップしてくれる。でも、これはJSON.parseでも実行される、余計なチェックをしてしまうので、どんな状況でもいいパフォーマンスが出るこんなやり方をオススメするかな： var json = '&#123;\"result\":true,\"count\":1&#125;', obj = JSON &amp;&amp; JSON.parse(json) || $.parseJSON(json); こうすると、ネイティブのパースする関数に渡す前にjQueryで文字列のサニティチェックを行わせるんじゃなくて、ネイティブのJSON.parseをすぐに使うことができる。 By Andy E | 回答日時： 2011年2月8日 16:38 回答2:古いブラウザでJSON 3を使いたければ、こうやって条件付きでそれをロードすることができるよ： &lt;script&gt; window.JSON || document.write('&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/json3/3.2.4/json3.min.js\"&gt;&lt;\\/scr'+'ipt&gt;');&lt;/script&gt; これで標準のwindow.JSONオブジェクトはクライアントがどんなブラウザを使っていようと利用可能だよ。 By huwiler | 回答日時： 2013年4月19日 18:52 回答3:これならわかりやすいかな？： var jsontext = '&#123;\"name\":\"x\",\"age\":\"11\"&#125;';var getContact = JSON.parse(jsontext);document.write(getContact.name + \", \" + getContact.age);// Output: x, 11 それか、eval関数を使うこともできるかな。次の例は、eval関数を使った例： var jsontext = '&#123;\"name\":\"x\",\"age\":\"11\"&#125;';var getContact = eval('(' + jsontext + ')');document.write(getContact.name + \", \" + getContact.age);// Output: x, 11 JSON.parse関数はより安全で、eval関数より速いから、JSON.parse関数を使うことをお勧めするよ。 By Joke_Sense10 | 回答日時： 2013年10月1日 7:42 Source: Parse JSON in JavaScript? [duplicate]","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"json","slug":"json","permalink":"https://so-matome.net/tags/json/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"parsing","slug":"parsing","permalink":"https://so-matome.net/tags/parsing/"}]},{"title":"変数を使用してオブジェクトプロパティに動的にアクセスする方法？ [Javascript]","slug":"dynamically-access-object-property-using-variable","date":"2017-10-10T13:59:28.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/10/dynamically-access-object-property-using-variable/","link":"","permalink":"https://so-matome.net2017/10/10/dynamically-access-object-property-using-variable/","excerpt":"質問：動的な変数名を使ってオブジェクトのプロパティにアクセスしようとしてるんだけど、これって可能？\nconst something = &#123; bar: \"Foobar!\" &#125;;const foo = 'bar';something.foo; // このsomething.bar, \"Foobar!\"を取得したい\n By  RichW | 質問日時： 2010年11月22日 11:23 ","text":"質問：動的な変数名を使ってオブジェクトのプロパティにアクセスしようとしてるんだけど、これって可能？ const something = &#123; bar: \"Foobar!\" &#125;;const foo = 'bar';something.foo; // このsomething.bar, \"Foobar!\"を取得したい By RichW | 質問日時： 2010年11月22日 11:23 回答1:プロパティにアクセスするには2つの方法がある ドット表記： something.bar ブラケット記法： something [&#39;bar&#39;] 角かっこの間の値は、任意の式。だから、プロパティ名が変数に格納されている場合は、ブラケット表記を使用する必要があるよ。 const foo = 'bar';something[foo]; By Jan Hančič | 回答日時： 2010年11月22日 11:25 回答2:javascriptでは次の形でアクセスできるよ： ドット表記 - foo.bar 大括弧 - foo [someVar]または foo [&quot; string &quot;] でも2番目のケースだけがプロパティに動的にアクセスできる。 var foo = &#123; pName1 : 1, pName2 : [1, &#123;foo : bar &#125;, 3] , ...&#125;var name = \"pName\"var num = 1;foo[name + num]; // 1// --var a = 2;var b = 1;var c = \"foo\";foo[name + a][b][c]; // bar By Sonique | 回答日時： 2014年7月1日 15:40 回答3:以下は、オブジェクトのプロパティにアクセスする方法のES6での例。2つの文字列を連結して動的に生成されたプロパティ名を使用してアクセスする方法。 var suffix = \" name\";var person = &#123; [\"first\" + suffix]: \"Nicholas\", [\"last\" + suffix]: \"Zakas\"&#125;;console.log(person[\"first name\"]); // \"Nicholas\"console.log(person[\"last name\"]); // \"Zakas\" これは計算されたプロパティ名 Computed property namesって呼ばれてる。 By zloctb | 回答日時： 2016年8月2日 19:46 Source: Dynamically access object property using variable","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"object","slug":"object","permalink":"https://so-matome.net/tags/object/"},{"name":"properties","slug":"properties","permalink":"https://so-matome.net/tags/properties/"}]},{"title":"サイズがバラバラなデータフレームを作成する [R]","slug":"create-a-data-frame-of-unequal-lengths","date":"2017-10-10T13:59:28.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/10/10/create-a-data-frame-of-unequal-lengths/","link":"","permalink":"https://so-matome.net2017/10/10/create-a-data-frame-of-unequal-lengths/","excerpt":"質問：データフレームって普通サイズが揃ってるけど、サイズの違うデータフレームって作る方法ある？１つのリストのバラバラな要素として保存するとかはしたくないんだ。なんでかって言うと、これを色んな人にCSVファイルとして送らないといけなくって、それをやるのはデータフレームが一番簡単だと思うから。\nx = c(rep(\"one\",2))y = c(rep(\"two\",10))z = c(rep(\"three\",5))cbind(x,y,z)\n上のコードでは、cbind()関数は短いcolumnをリサイクルして要素が10個あるようにしてるけど、これを要素が2,5,10個になるようにしたいんだ。以下の方法も試したけどあんまり効率が良くない。\ndf = data.frame(one=c(rep(\"one\",2),rep(\"\",8)),                 two=c(rep(\"two\",10)), three=c(rep(\"three\",5), rep(\"\",5)))\n By  ATMathew | 質問日時： 2011年8月25日 19:58 ","text":"質問：データフレームって普通サイズが揃ってるけど、サイズの違うデータフレームって作る方法ある？１つのリストのバラバラな要素として保存するとかはしたくないんだ。なんでかって言うと、これを色んな人にCSVファイルとして送らないといけなくって、それをやるのはデータフレームが一番簡単だと思うから。 x = c(rep(\"one\",2))y = c(rep(\"two\",10))z = c(rep(\"three\",5))cbind(x,y,z) 上のコードでは、cbind()関数は短いcolumnをリサイクルして要素が10個あるようにしてるけど、これを要素が2,5,10個になるようにしたいんだ。以下の方法も試したけどあんまり効率が良くない。 df = data.frame(one=c(rep(\"one\",2),rep(\"\",8)), two=c(rep(\"two\",10)), three=c(rep(\"three\",5), rep(\"\",5))) By ATMathew | 質問日時： 2011年8月25日 19:58 回答1:たぶん君の聞いてるのとは違うと思うけど、こんなのはどう？（別の方法は多分あると思うけど） まず、ベクトルの長さが異なる場合、データは実際にテーブル状にはなってないよね。 CSVファイルを別のCSVファイルに保存するのはどう？複数のオブジェクトを格納できるasciiフォーマットもいいかも(json、XML)。 もしテーブル状であるのがいいなら、NAで埋めてしまえばいい。 x = 1:5y = 1:12max.len = max(length(x), length(y))x = c(x, rep(NA, max.len - length(x)))y = c(y, rep(NA, max.len - length(y)))x [1] 1 2 3 4 5 NA NA NA NA NA NA NAy [1] 1 2 3 4 5 6 7 8 9 10 11 12 長さ位の違う列を持つ data.frameがいいなら、チェックをしないようにするとか。でもこれは自己責任で。 &gt; x = 1:5&gt; y = 1:12&gt; df = list(x=x, y=y)&gt; attributes(df) = list(names = names(df), row.names=1:max(length(x), length(y)), class='data.frame')&gt; df x y1 1 12 2 23 3 34 4 45 5 56 &lt;NA&gt; 67 &lt;NA&gt; 7 [ reached getOption(\"max.print\") -- omitted 5 rows ]]Warning message:In format.data.frame(x, digits = digits, na.encode = FALSE) : corrupt data frame: columns will be truncated or padded with NAs By Owen | 回答日時： 2011年8月25日 20:11 回答2:こんな風に出来るかも L &lt;- list(x,y,z)cfun &lt;- function(L) &#123; pad.na &lt;- function(x,len) &#123; c(x,rep(NA,len-length(x))) &#125; maxlen &lt;- max(sapply(L,length)) do.call(data.frame,lapply(L,pad.na,len=maxlen))&#125;(テストはしてない)。 By Ben Bolker | 回答日時： 2011年8月25日 20:08 回答3:パディングに対するもう1つのアプローチは： na.pad &lt;- function(x,len)&#123; x[1:len]&#125;makePaddedDataFrame &lt;- function(l,...)&#123; maxlen &lt;- max(sapply(l,length)) data.frame(lapply(l,na.pad,len=maxlen),...)&#125;x = c(rep(\"one\",2))y = c(rep(\"two\",10))z = c(rep(\"three\",5))makePaddedDataFrame(list(x=x,y=y,z=z)) na.pad()関数は、存在しない要素を参照しようとすると自動的にNAで埋めたベクトルを返すRの機能を利用してる。 makePaddedDataFrame()は一番長いものを見つけて、残りの部分を一致する長さに埋めるってことをやってる。 By Peter M | 回答日時： 2011年8月25日 20:19 Source: Create a Data Frame of Unequal Lengths","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"r","slug":"r","permalink":"https://so-matome.net/tags/r/"},{"name":"dataframe","slug":"dataframe","permalink":"https://so-matome.net/tags/dataframe/"}]},{"title":"ディレクトリが存在しない場合、どうやって作ったらいいの？ [Python]","slug":"how-can-i-create-a-directory-if-it-does-not-exist","date":"2017-09-29T20:05:53.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/29/how-can-i-create-a-directory-if-it-does-not-exist/","link":"","permalink":"https://so-matome.net2017/09/29/how-can-i-create-a-directory-if-it-does-not-exist/","excerpt":"質問：ファイルが書き込まれるディレクトリが存在するかどうかを調べて、もし存在しない場合は、Pythonを使ってディレクトリを作るための最もエレガントな方法って何？以下は試したんだけど： \nimport osfile_path = \"/my/directory/filename.txt\"directory = os.path.dirname(file_path)try:    os.stat(directory)except:    os.mkdir(directory)       f = file(filename)\nどういうわけかos.path.existsっていうのがあるのを知らなかったので、こうしたんだけど： \ndef ensure_dir(file_path):    directory = os.path.dirname(file_path)    if not os.path.exists(directory):        os.makedirs(directory)\nこれが自動的に行われるようにするような、 “open”のためのフラグってある？ \n By  Parand | 質問日時： 2008年11月7日 18:56 ","text":"質問：ファイルが書き込まれるディレクトリが存在するかどうかを調べて、もし存在しない場合は、Pythonを使ってディレクトリを作るための最もエレガントな方法って何？以下は試したんだけど： import osfile_path = \"/my/directory/filename.txt\"directory = os.path.dirname(file_path)try: os.stat(directory)except: os.mkdir(directory) f = file(filename) どういうわけかos.path.existsっていうのがあるのを知らなかったので、こうしたんだけど： def ensure_dir(file_path): directory = os.path.dirname(file_path) if not os.path.exists(directory): os.makedirs(directory) これが自動的に行われるようにするような、 “open”のためのフラグってある？ By Parand | 質問日時： 2008年11月7日 18:56 回答1:２つ答えがあって、それぞれに良し悪しがあるんだけど、僕が書くなら： os.path.existsを試してみて、ディレクトリを作るにはos.makedirsはどうかな。 if not os.path.exists(directory): os.makedirs(directory) でもこれってちょっとややこしいんだ — もしディレクトリが os.path.existsとos.makedirs呼び出しの間に作られたら、os.makedirsはOSErrorで失敗する。残念だけど、助けを出すOSErrorとそれを実行し続けることはフールプルーフ(foolproof)じゃない。なぜなら、例えばアクセス許可がない場合とかディスク容量が無いとかの他の要因でディレクトリ作成が失敗してもそれを無視するからね。 1つのオプションは OSErrorをトラップし、埋め込まれたエラーコードを調べること。(PythonのOSErrorから情報を取得するためのクロスプラットフォームの方法はありますか？参照）： import os, errnotry: os.makedirs(directory)except OSError as e: if e.errno != errno.EEXIST: raise あるいは、2つ目の os.path.existsっていうのも考えられるけど、仮に別の人が一つ目のチェックの後にディレクトリを作って、２つ目のチェックの前に削除してしまう、みたいな場合でもうまくいかない可能性がある。 アプリケーションによって、同時操作の危険性はファイルアクセス権とかの他の要因によって引き起こされる危険性よりも高かったり低かったり刷るから、開発者は実装を選ぶ前に開発されてる特定のアプリケーションと期待されてる環境の詳細をよく知ってる必要があるよね。 By Blair Conrad | 回答日時： 2008年11月7日 19:06 回答2:try exceptとerrnoモジュールの正しいエラーコードを使えば、競合状態(race condition)の可能性を排除できるし、クロスプラットフォームでもあるよ： import osimport errnodef make_sure_path_exists(path): try: os.makedirs(path) except OSError as exception: if exception.errno != errno.EEXIST: raise つまり、ディレクトリを作成しようとしますが、すでに存在する場合はエラーを無視する。一方、その他のエラーは報告される。たとえば、’a’というディレクトリをあらかじめ作成しておき、その中からすべての権限を削除すると、errno.EACCESでOSErrorが発生するよ(パーミッションが拒否されました。エラー13)。 By Heikki Toivonen | 回答日時： 2011年2月17日 17:17 回答3:私は個人的にはos.path.exists()よりも os.path.isdir()を使うのをおすすめするかな： &gt;&gt;&gt; os.path.exists('/ tmp/dirname')True&gt;&gt;&gt; os.path.exists('/ tmp/dirname/filename.etc')True&gt;&gt;&gt; os.path.isdir('/ tmp/dirname/filename.etc')False&gt;&gt;&gt; os.path.isdir('/ tmp/fakedirname')False これがあるとして、 &gt;&gt;&gt; dir = raw_input(\":: \") そして、こんなバカみたいなユーザー入力があると： :: /tmp/dirname/filename.etc もしos.path.exists()でテストした場合、引数がos.makedirs()に渡されるから、filename.etcという名前のディレクトリができてしまうことになる。 By crimsonstone | 回答日時： 2009年1月14日 17:57 Source: How can I create a directory if it does not exist?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"exception","slug":"exception","permalink":"https://so-matome.net/tags/exception/"},{"name":"directory","slug":"directory","permalink":"https://so-matome.net/tags/directory/"}]},{"title":"git pullで強制的にローカルファイルを上書きするには？ [Git]","slug":"how-do-i-force-git-pull-to-overwrite-local-files","date":"2017-09-29T17:42:38.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/29/how-do-i-force-git-pull-to-overwrite-local-files/","link":"","permalink":"https://so-matome.net2017/09/29/how-do-i-force-git-pull-to-overwrite-local-files/","excerpt":"質問：git pullでローカルファイルを強制的に上書きするにはどうしたらいいの？\nやろうとしてるのはこんな感じ：\n\nチームメンバーが取り組んでいるウェブサイトのテンプレートを変更\n彼らは画像ディレクトリに画像を追加(ただし、ソース管理の下に追加することは忘れてる)\n彼らは僕に「後で」メールで画像を送ってくる\nで、僕が画像をソースコントロールの下に追加して、GitHubに他の変更と一緒に押し込んでる\nでもGitはファイルを上書きしたくないので彼らはGitHubから更新をpullできない\n\n出て来るエラーは次の通り：\n\nerror: Untracked working tree file ‘public/images/icon.gif’ would be overwritten by merge.(訳：エラー：未処理の作業ツリーファイル’public/images/icon.gif’がマージによって上書きされます。)\n\nGitにそれらを上書きさせるにはどうすればいい？その人(上書きされる人)はデザイナーで、通常は僕がそれらの競合を手作業で解決するから、サーバーには最新のバージョンがあって、彼らはただ彼らのコンピュータ内のファイルをで更新するだけでいいんだ。\n By  Jakub Troszok | 質問日時： 2009年7月14日 14:58 ","text":"質問：git pullでローカルファイルを強制的に上書きするにはどうしたらいいの？ やろうとしてるのはこんな感じ： チームメンバーが取り組んでいるウェブサイトのテンプレートを変更 彼らは画像ディレクトリに画像を追加(ただし、ソース管理の下に追加することは忘れてる) 彼らは僕に「後で」メールで画像を送ってくる で、僕が画像をソースコントロールの下に追加して、GitHubに他の変更と一緒に押し込んでる でもGitはファイルを上書きしたくないので彼らはGitHubから更新をpullできない 出て来るエラーは次の通り： error: Untracked working tree file ‘public/images/icon.gif’ would be overwritten by merge.(訳：エラー：未処理の作業ツリーファイル’public/images/icon.gif’がマージによって上書きされます。) Gitにそれらを上書きさせるにはどうすればいい？その人(上書きされる人)はデザイナーで、通常は僕がそれらの競合を手作業で解決するから、サーバーには最新のバージョンがあって、彼らはただ彼らのコンピュータ内のファイルをで更新するだけでいいんだ。 By Jakub Troszok | 質問日時： 2009年7月14日 14:58 回答1:重要：ローカルで変更があった場合、それらは失われる。--hardオプションがあろうがなかろうが、プッシュされていないローカルコミットは失われる[*]Gitによって管理されてないファイルがある場合(例えば、アップロードされたユーザコンテント）、これらのファイルは影響を受けません。 僕ははこれが一番いい方法だと思う： git fetch --all 次に、2つのオプションがある。 git reset --hard origin/master または、他のブランチにいる場合： git reset --hard origin/&lt;branch_name&gt; 説明：git fetchは、マージやリベースを試みずにリモートから最新のものをダウンロードする。 次に、 git resetはマスターブランチを君がちょうど取得したものにリセットする。--hardオプションは作業ツリー内のすべてのファイルをorigin/master内のファイルに合わせて変更 [*]：リセットする前に masterからブランチを作成することによって現在のローカルコミットを維持することは可能であることは知っておくべきだと思う： git checkout mastergit branch new-branch-to-save-current-commitsgit fetch --allgit reset --hard origin/master この後、すべての古いコミットは new-branch-to-save-current-commitsに保存される。ただしコミットされていない変更は(stagedのものでさえも)失われます。だから必要なものを隠して、コミットしてね。 By RNA | 回答日時： 2012年1月17日 0:02 回答2:これを試してみれば？： git reset --hard HEADgit pull それで望む挙動になると思う。 By Travis R | 回答日時： 2010年5月9日 19:45 回答3:警告： git cleanはあなたの追跡されていないファイル/ディレクトリをすべて削除し、元に戻してしまうのに注意。 場合によっては clean -fが役に立たないこともある。untrackedなディレクトリがある場合、-dオプションも必要だよ： git reset --hard HEADgit clean -f -dgit pull 警告： git cleanはあなたの追跡されていないファイル/ディレクトリをすべて削除し、元に戻してしまうのに注意。 By David Avsajanishvili | 回答日時： 2011年3月19日 9:10 Source: How do I force “git pull” to overwrite local files?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"git","slug":"git","permalink":"https://so-matome.net/tags/git/"},{"name":"version-control","slug":"version-control","permalink":"https://so-matome.net/tags/version-control/"},{"name":"overwrite","slug":"overwrite","permalink":"https://so-matome.net/tags/overwrite/"},{"name":"git-pull","slug":"git-pull","permalink":"https://so-matome.net/tags/git-pull/"},{"name":"git-fetch","slug":"git-fetch","permalink":"https://so-matome.net/tags/git-fetch/"}]},{"title":"JavaScriptの配列から特定の要素を削除するにはどうすればいいの？ [Javascript]","slug":"how-do-i-remove-a-particular-element-from-an-array-in-javascript","date":"2017-09-28T23:38:53.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/29/how-do-i-remove-a-particular-element-from-an-array-in-javascript/","link":"","permalink":"https://so-matome.net2017/09/29/how-do-i-remove-a-particular-element-from-an-array-in-javascript/","excerpt":"質問：整数の配列があって、要素を追加するために`.push()``メソッドを使用してるとする。\nここで、配列から特定の要素を削除する簡単な方法ってある？ array.remove(int);みたいな感じの。\nただし、JavaScript のみ を使用するとして。フレームワークは使えないんだ。\n By  Walker | 質問日時： 2011年4月23日 22:17 ","text":"質問：整数の配列があって、要素を追加するために`.push()``メソッドを使用してるとする。 ここで、配列から特定の要素を削除する簡単な方法ってある？ array.remove(int);みたいな感じの。 ただし、JavaScript のみ を使用するとして。フレームワークは使えないんだ。 By Walker | 質問日時： 2011年4月23日 22:17 回答1:まず、削除したい要素の indexを見つけよう： var array = [2, 5, 9];var index = array.indexOf(5); _注：indexOfのブラウザサポートは限られてる。Internet Explorer 7および8ではサポートされてないよ。 次に、spliceで削除する： if (index &gt; -1) &#123; array.splice(index, 1);&#125; spliceの2番目のパラメータは削除する要素の数。spliceは配列の場所を変えて、削除された要素を含む新しい配列を返す。 サポートされていないブラウザで indexOfが必要な場合は、以下のpolyfillを試してみて。詳しくはここのpolyfillを参照。 Array.prototype.indexOf || (Array.prototype.indexOf = function(d, e) &#123; var a; if (null == this) throw new TypeError('\"これ\" はNULLまたは定義されていない'); var c = Object(this), b = c.length &gt;&gt;&gt; 0; if (0 === b) return -1; a = +e || 0; Infinity === Math.abs(a) &amp;&amp; (a = 0); if (a &gt;= b) return -1; for (a = Math.max(0 &lt;= a ? a : b - Math.abs(a), 0); a &lt; b;) &#123; if (a in c &amp;&amp; c[a] === d) return a; a++ &#125; return -1&#125;); By Tom Wadley | 回答日時： 2011年4月23日 22:23 回答2:array.remove(int)がどのように動作することを期待しているのか分からないけど、あなたが欲しいかもと思う答えは3つの可能性があるかな： インデックスがiである配列の要素を削除するには： array.splice(i, 1); 値 numberを持つすべての要素を配列から削除する場合は、次のようにします。 for(var i = array.length - 1; i &gt;= 0; i--) &#123; if(array[i] === number) &#123; array.splice(i, 1); &#125;&#125; インデックスのある要素iを削除したくて、でも他の要素のインデックスを変更したくないのなら、 delete array[i]; By Peter Olson | 回答日時： 2011年4月23日 22:20 Source: How do I remove a particular element from an array in JavaScript?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"arrays","slug":"arrays","permalink":"https://so-matome.net/tags/arrays/"}]},{"title":"JSONでコメントって使用できる？ [JSON]","slug":"can-comments-be-used-in-json","date":"2017-09-28T23:20:46.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/29/can-comments-be-used-in-json/","link":"","permalink":"https://so-matome.net2017/09/29/can-comments-be-used-in-json/","excerpt":"質問：JSONファイル内でコメントって使用できる？もしそうなら、どうやるの？\n By  Michael Gundlach | 質問日時： 2008年10月28日 20:39 ","text":"質問：JSONファイル内でコメントって使用できる？もしそうなら、どうやるの？ By Michael Gundlach | 質問日時： 2008年10月28日 20:39 回答1:できるとは思わないなー。JSONはすべてデータである必要があるから、コメントを追加するとそれもデータになるよ。 JSONデータを使用するアプリケーションでは無視される（例えば）”_comment” という指定のデータ要素を持つことができると思うけど。 JSONを生成/受信するプロセスの中にコメントを入れておいたほうがいいんじゃないかな。だってそのプロセスはJSONデータが何かを（少なくともJSONの構造については）事前に知っているはずなので。 でも、もしどうしてもって言うのなら： &#123; \"_comment\": \"コメントはここに..\", \"glossary\": &#123; \"title\": \"example glossary\", \"GlossDiv\": &#123; \"title\": \"S\", \"GlossList\": &#123; \"GlossEntry\": &#123; \"ID\": \"SGML\", \"SortAs\": \"SGML\", \"GlossTerm\": \"Standard Generalized Markup Language\", \"Acronym\": \"SGML\", \"Abbrev\": \"ISO 8879:1986\", \"GlossDef\": &#123; \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\", \"GlossSeeAlso\": [\"GML\", \"XML\"] &#125;, \"GlossSee\": \"markup\" &#125; &#125; &#125; &#125;&#125; By Eli | 回答日時： 2008年10月28日 21:01 回答2:ダメ。 // ...とか / * ... * /の形式のコメントはJSONには無いよ。以下を参照： http://www.json.org RFC 4627：JavaScript Object Notation(JSON)のapplication/jsonメディアタイプ RFC 7159JavaScript Object Notation(JSON)データ交換フォーマット - 廃止：4627,7158 By stakx | 回答日時： 2010年11月15日 9:32 回答3:コメントは設計上JSONから削除されたよ。 私はJSONからコメントを削除しました。なぜなら、構文解析ディレクティブを保持するのにJSONのコメントを使用してる人を見たことがあるから。このやり方は相互運用性を破壊してしまう。 私は、コメントが無いことによって落胆する人々がいることも知ってるけど、でもコメントはあるべきじゃない。 JSONを使用したconfigurationファイルがあるとする（そしてそれに注釈を付けたい）。好きなコメントをすべて挿入したらいい。でもその後JSONパーサに渡す前にJSMinでパイプ処理してください。 出典：G +でのDouglas Crockfordの公式声明 By Artur Czajka | 回答日時： 2012年6月11日 8:52 Source: Can comments be used in JSON?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"json","slug":"json","permalink":"https://so-matome.net/tags/json/"},{"name":"comments","slug":"comments","permalink":"https://so-matome.net/tags/comments/"}]},{"title":"JavaScriptでの比較で、等号演算子（== vs ===）のどっちを使うべき？ [Javascript]","slug":"which-equals-operator-vs-should-be-used-in-javascript-comparisons","date":"2017-09-28T22:43:32.000Z","updated":"2017-10-16T19:34:38.000Z","comments":true,"path":"2017/09/28/which-equals-operator-vs-should-be-used-in-javascript-comparisons/","link":"","permalink":"https://so-matome.net2017/09/28/which-equals-operator-vs-should-be-used-in-javascript-comparisons/","excerpt":"質問：JSLintを使ってて、if文の中でidSele_UNVEHtype.value.length == 0を比較する時とか、==(2つの等号)を===(3つの等号)で置き換えろ、ってサジェストが出るんだけど、==を===に置き換えるとパフォーマンス上のメリットとかってある？\n比較演算子をいっぱい使ってるので、パフォーマンスの改善は歓迎なんだけど。。。\n型変換が行われない場合は、==を置き換えるメリットってある？\n By  bcasp | 質問日時： 2008年12月11日 14:19 ","text":"質問：JSLintを使ってて、if文の中でidSele_UNVEHtype.value.length == 0を比較する時とか、==(2つの等号)を===(3つの等号)で置き換えろ、ってサジェストが出るんだけど、==を===に置き換えるとパフォーマンス上のメリットとかってある？ 比較演算子をいっぱい使ってるので、パフォーマンスの改善は歓迎なんだけど。。。 型変換が行われない場合は、==を置き換えるメリットってある？ By bcasp | 質問日時： 2008年12月11日 14:19 回答1:型変換が行われていないことを除けば、同一性(===)演算子は、等価(==)と同じように動作するよ。等しいとみなされるためには型は同じでなければだめ。 リファレンス：Javascriptチュートリアル：比較オペレータ ==演算子は、必要な型を実行した後、等価性を比較する。===&#39; 演算子はその変換をしないので、2つの値が同じ型じゃない時、===は単にfalse`を返す。どちらもおんなじぐらい速いかな。 ダグラス・クロフォードの優れた本JavaScript：The Good Partsを引用すると、 JavaScriptには、2種類の等価演算子、===と!==、そして出来の悪い双子 ==と !=がある。良い子の方は、君が期待する方法で動作するだろう。もし2つのオペランドが同じ型で同じ値を持つなら、===はtrueを返し、!==はfalseを返す。邪悪な双子の方はオペランドの型が同じなら同じように働くけど、型が異なる場合は値を強制しようとする。このルールはは複雑で覚えてなんかいられない。下は一例： &gt; '' == '0' // false&gt; 0 == '' // true&gt; 0 == '0' // true&gt;&gt; false == 'false' // false&gt; false == '0' // true&gt;&gt; false == undefined // false&gt; false == null // false&gt; null == undefined // true&gt;&gt; ' \\t\\r\\n ' == 0 // true&gt; &gt; 推移性の欠如は気をつけるべき。僕のアドバイスは悪い双子をを使わないことだ。代わりに、常に===と !==を使用すること。===演算子では上でのすべての比較にfalseを返すから。 ###更新： 参照までに、(特別な場合を除き)型==と===はお互い一貫して同じように動作するよ。別のもの。 var a = [1,2,3];var b = [1,2,3];var c = &#123; x: 1, y: 2 &#125;;var d = &#123; x: 1, y: 2 &#125;;var e = \"text\";var f = \"te\" + \"xt\";a == b // falsea === b // falsec == d // falsec === d // falsee == f // truee === f // true 特殊なケースは、リテラルを評価するオブジェクトと比較する場合。toStringやvalueOfメソッドのために同じリテラルに変換する。例えば、文字列リテラルと、Stringコンストラクタによって作られた文字列オブジェクトの比較を見てみよう： \"abc\" == new String(\"abc\") // true\"abc\" === new String(\"abc\") // false ここで、 ==演算子は2つのオブジェクトの値をチェックし、trueだけど、===はそれらが同じ型ではないのでfalse。どちらが正しいか？それは君が比較しようとしているものに依存するね。僕のアドバイスは、そんな質問は忘れて、文字列オブジェクトを作るためにStringコンストラクタを使わないこと。 参照http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3 By Bill the Lizard | 回答日時： 2008年12月11日 14:25 回答2:==演算子(Equality)を使うと、 true == 1; // true、 'true'は1に変換されて比較される\"2\" == 2; // true、 \"2\"が2に変換されて比較されるため ===演算子(Identity)を使用すると、 true === 1; //false\"2\" === 2; //false これは、等価演算子==は型強制を行うため。つまり、インタプリタは暗黙的に比較する前に値を変換しようとする。 一方、アイデンティティ演算子 ===は型強制をしない、だから比較の際には値を変換しないよ。 Source: Which equals operator (== vs ===) should be used in JavaScript comparisons?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"operators","slug":"operators","permalink":"https://so-matome.net/tags/operators/"},{"name":"equality","slug":"equality","permalink":"https://so-matome.net/tags/equality/"},{"name":"equality-operator","slug":"equality-operator","permalink":"https://so-matome.net/tags/equality-operator/"},{"name":"identity-operator","slug":"identity-operator","permalink":"https://so-matome.net/tags/identity-operator/"}]},{"title":"Gitリポジトリを以前のコミットに戻すには？ [Git]","slug":"how-to-revert-git-repository-to-a-previous-commit","date":"2017-09-28T20:17:49.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/28/how-to-revert-git-repository-to-a-previous-commit/","link":"","permalink":"https://so-matome.net2017/09/28/how-to-revert-git-repository-to-a-previous-commit/","excerpt":"質問：現在の状態から、あるコミットの時点でのスナップショットに戻すのってどうやればいいの？git logをすると、こんなのが出力されるんだけど：$ git logcommit a867b4af366350be2e7c21b8de9cc6504678a61b`Author: Me &lt;me@me.com&gt;Date:   Thu 11月 4 18:59:41 2010 -0400なんとかかんとか...commit 25eee4caef46ae64aa08e8ab3f988bc917ee1ce4Author: Me &lt;me@me.com&gt;Date:   Thu 11月 4 05:13:39 2010 -0400なんとかかんとかかんとか...commit 0766c053c0ea2035e90f504928f8df3c9363b8bdAuthor: Me &lt;me@me.com&gt;Date:   Thu 11月 4 00:55:06 2010 -0400さらになんとかかんとか...commit 0d1d7fc32e5a947fbd92ee598033d85bfc445a50Author: Me &lt;me@me.com&gt;Date:   Wed 11月 3 23:56:08 2010 -0400そう、もっともっとなんとかかんとか...\nどうやってここから11月3日、つまりコミット0d1d7fc…に戻せばいいの？\n By  Crazy Serb | 質問日時： 2010年11月6日 16:58 ","text":"質問：現在の状態から、あるコミットの時点でのスナップショットに戻すのってどうやればいいの？git logをすると、こんなのが出力されるんだけど：$ git logcommit a867b4af366350be2e7c21b8de9cc6504678a61b`Author: Me &lt;me@me.com&gt;Date: Thu 11月 4 18:59:41 2010 -0400なんとかかんとか...commit 25eee4caef46ae64aa08e8ab3f988bc917ee1ce4Author: Me &lt;me@me.com&gt;Date: Thu 11月 4 05:13:39 2010 -0400なんとかかんとかかんとか...commit 0766c053c0ea2035e90f504928f8df3c9363b8bdAuthor: Me &lt;me@me.com&gt;Date: Thu 11月 4 00:55:06 2010 -0400さらになんとかかんとか...commit 0d1d7fc32e5a947fbd92ee598033d85bfc445a50Author: Me &lt;me@me.com&gt;Date: Wed 11月 3 23:56:08 2010 -0400そう、もっともっとなんとかかんとか... どうやってここから11月3日、つまりコミット0d1d7fc…に戻せばいいの？ By Crazy Serb | 質問日時： 2010年11月6日 16:58 回答1:これは”元に戻す”がどういう意味かによるかな。 一時的に別のコミットに切り替えるもし一時的にそれに戻して、なんか作業して、また元に戻ってきたいのなら、望みのコミットをチェックアウトすればいい： # これはHEADを切り離す、つまり、ブランチをチェックアウトしないままにする：git checkout 0d1d7fc32 または、そこに戻してる間にコミットしたい場合は、そこにいる間に新しいブランチを作るべき： git checkout -b old-state 0d1d7fc32 元の場所に戻るには、もう一度あなたがいた支店をチェックしてください。 (Ifブランチを切り替えるときはいつものように変更を加えました。必要に応じてそれらと一緒に。あなたはそれらを捨てるようにリセットすることができます。あなたは隠れて、チェックアウトして、あなたと一緒に連れていってください。それらをブランチにコミットすることができますそこに支店が必要な場合はそこに。) ##非公開のコミットをハード削除する 一方で、あなたが本当にやったことすべてを取り除きたいのであればそれ以来、2つの可能性があります。 1つ、あなたがこれらのコミットは、単にリセットします： ＃これにより、ローカルの変更はすべて破棄されます。 ＃コミットしたくない作業が残っている場合は、実行しないでください。 git reset --hard 0d1d7fc32 ＃あるいは、保存する作業がある場合： git stash git reset --hard 0d1d7fc32 git stash pop ＃これは変更を保存し、リセット後にそのパッチを再適用します。 ＃マージの競合が発生する可能性があります。 ＃あなたがリセットしたコミットから変更されました。 面倒なことがあれば、あなたはすでにローカルの変更を投げ捨てましたが、もう一度リセットすることで、以前の場所に戻ってください。 ##新しいコミットでコミットされたコミットを元に戻す 一方、あなたが作品を発表した場合、おそらくブランチをリセットすると、効果的に履歴を書き換えられるからです。その場合、あなたは確かにコミットを元に戻すことができます。 Gitを使うと、元に戻すことは非常に特殊です意味：逆パッチでコミットを作成して取り消します。このようにして履歴を書き換えないでください。 ＃これは3つの別々の復帰コミットを作成します： git revert a867b4af 25eee4ca 0766c053 ＃それはまた範囲を取る。これは最後の2つのコミットを元に戻します： git revert HEAD〜2..HEAD ＃同様に、コミットハッシュを使用して一連のコミットを元に戻すことができます。 git revert a867b4af..0766c053 ＃マージコミットを元に戻す git revert -m 1 &lt;merge_commit_sha&gt; ＃ちょうど1つを得るには、 `rebase -i`を使って後でそれらを押しつぶすことができます ＃または、手動で行うこともできます(リポジトリのトップレベルでこれを行うことを忘れないでください) ＃HEADを変更せずに、あなたのインデックスと作業ツリーを目的の状態にする： git checkout 0d1d7fc32。 ＃次にコミットします。あなたがやったことを説明する良いメッセージを書いてください git commit git-revertマンページ実際にはその説明で多くのことをカバーしています。もう一つの役に立つリンクは[thisgit-scm.comブログ投稿でgit-revertについて議論する(http：// git-scm.com/blog/2010/03/02/undoing-merges.html)。 あなたが結局元に戻したくないと決めたら、元に戻すことができます(ここで説明したように)、または元に戻す前にリセットすることができます(前のセクション)。 この回答は、この場合に役立ちます：HEADを元の場所に戻す方法は？ (分離されたhead) # This will destroy any local modifications.# Don&apos;t do it if you have uncommitted work you want to keep.git reset --hard 0d1d7fc32# Alternatively, if there&apos;s work to keep:git stashgit reset --hard 0d1d7fc32git stash pop# This saves the modifications, then reapplies that patch after resetting.# You could get merge conflicts, if you&apos;ve modified things which were# changed since the commit you reset to. # This will create three separate revert commits:git revert a867b4af 25eee4ca 0766c053# It also takes ranges. This will revert the last two commits:git revert HEAD~2..HEAD#Similarly, you can revert a range of commits using commit hashes:git revert a867b4af..0766c053# Reverting a merge commitgit revert -m 1 &lt;merge_commit_sha&gt;# To get just one, you could use `rebase -i` to squash them afterwards# Or, you could do it manually (be sure to do this at top level of the repo)# get your index and work tree into the desired state, without changing HEAD:git checkout 0d1d7fc32 .# Then commit. Be sure and write a good message describing what you just didgit commit By Jefromi | 回答日時： Nov 6 2010 at 17:04 回答2:作業コピーを最新のコミットに戻す以前のコミットに戻し、変更を無視するには： git reset --hard HEAD HEADは現在のブランチの最後のコミットね。 作業コピーを古いコミットに戻す直近のコミットよりも古いコミットに戻すには： # インデックスを以前のコミットにリセットする。 '56e05fced'は適宜書き換えてgit reset 56e05fced# ポインタを前のHEADに戻すgit reset --soft HEAD@&#123;1&#125;git commit -m \"56e05fcedに戻す\"# 新しいコミットを反映するように作業コピーを更新するgit reset --hard 元ネタは同じような質問のページ: SHAハッシュで以前のコミットに戻る方法？ By boulder_ruby | 回答日時： Aug 21 ‘12 at 6:19 回答3:複雑でヤバい答えがたくさんあるけど、実際は簡単： git revert --no-commit 0766c053..HEADgit commit これは、HEADからコミットハッシュに戻ってすべてを元に戻すよ。つまり、すべてのコミットがその状態に戻ったかのように作業ツリー内のそのコミット状態を再び作成してる。。それから現在のツリーをコミットすると、「元に戻した」コミットと本質的に同等の新しいコミットをするよ。 (--no-commitフラグは、すべてのコミットを一度に元に戻す - そうじゃければ範囲内の各コミットのコメントを入れるように促される、これはコミット履歴を不要な新しいコミットのゴミで汚しちゃうけど) 重要なのは、これは以前の状態にロールバックする安全かつ簡単な方法だってこと。履歴は壊されることなく、すでに公開されているコミットに使用することができる。 By Yarin | 回答日時： Feb 12 ‘14 at 4:18 回答4:僕にとっては（たぶん他の人にも）、一番いいのはGitリセットオプションだよ： git reset --hard &lt;commidId&gt; &amp;amp;&amp;amp; git clean -f これは僕にとって最高の選択肢だった！シンプルで、速く、効果的！ 注意： でも古いコミットのコピーを持っている他の人とブランチを共有している場合は、この方法は使わないこと！ あと、あんまりヤバくない方法がお好みの時は、 git clean -i By Pogrindis | 回答日時： Oct 22 ‘13 at 11:53 Source: How to revert Git repository to a previous commit?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"git","slug":"git","permalink":"https://so-matome.net/tags/git/"},{"name":"git-checkout","slug":"git-checkout","permalink":"https://so-matome.net/tags/git-checkout/"},{"name":"git-reset","slug":"git-reset","permalink":"https://so-matome.net/tags/git-reset/"},{"name":"git-revert","slug":"git-revert","permalink":"https://so-matome.net/tags/git-revert/"}]},{"title":"ローカルGitブランチの名前を変更するにはどうすればいい？ [Git]","slug":"how-do-i-rename-a-local-git-branch","date":"2017-09-26T10:40:46.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/26/how-do-i-rename-a-local-git-branch/","link":"","permalink":"https://so-matome.net2017/09/26/how-do-i-rename-a-local-git-branch/","excerpt":"質問：ローカルとリモートの両方のGitリポジトリのMaster branchの名前を変更するに書いてあるように、リモートブランチの名前は変更したくないんだけど。\nリモートブランチにプッシュされていないローカルブランチの名前を変更するにはどうしたらいいの？\n By  Forrest | 質問日時： Jul 6 ‘11 at 3:20 ","text":"質問：ローカルとリモートの両方のGitリポジトリのMaster branchの名前を変更するに書いてあるように、リモートブランチの名前は変更したくないんだけど。 リモートブランチにプッシュされていないローカルブランチの名前を変更するにはどうしたらいいの？ By Forrest | 質問日時： Jul 6 ‘11 at 3:20 回答1:あるブランチを指定してそのブランチの名前を変更する場合は、次のようにやればいいよ。 git branch -m &lt;oldname&gt; &lt;newname&gt; 今使ってるブランチの名前を変更するには、次のように git branch -m &lt;newname&gt; これを覚えておくには、 -mは”move”(またはmv)、つまりファイル名の変更だ、って覚えておくといいかも。 By siride | 回答日時： Jul 6 ‘11 at 3:21 回答2:git branch -m old_branch_name new_branch_name このコマンドで名前を変えられるけど、この名前を変更したブランチを使う時は注意。なぜなら、これはまだ古い上流ブランチを参照してるから（もしそれが存在するのであれば）。 ローカルブランチを(例えば)new_branch_nameに名前を変更した後、変更をマスターにプッシュしたい場合は： git push origin new_branch_name：master(この変更はマスターブランチに行くけど、君のローカルブランチ名はnew_branch_nameだよ) 詳細については、「ローカルGitブランチ名の名前を変更する方法」を参照。 By Madhan Ayyasamy | 回答日時： Jan 21 ‘13 at 9:49 回答3:ブランチの名前を変更する手順は次のとおり。 1. 名前を変更する必要があるブランチに移動2. git branch -m &lt;new_name&gt;3. git push origin :&lt;old_name&gt;4. git push origin &lt;new_name&gt;:refs/heads/&lt;new_name&gt; 追記(2017/01/12)：コマンド git statusを実行して、新しく作成したブランチが、古いものじゃなくそれ自身（新しいもの）を指していることを確認すること。まだ古いブランチへの参照してる場合は、以下のように上流でのを設定を解除する必要があるよ。 git branch --unset-upstream By Milind Anantwar | 回答日時： Apr 15 ‘15 at 12:50 Source: How do I rename a local Git branch?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"git","slug":"git","permalink":"https://so-matome.net/tags/git/"},{"name":"git-branch","slug":"git-branch","permalink":"https://so-matome.net/tags/git-branch/"}]},{"title":"Python forループのインデックスへのアクセス方法 [Python]","slug":"accessing-the-index-in-python-for-loops","date":"2017-09-25T14:24:08.000Z","updated":"2017-10-16T19:34:36.000Z","comments":true,"path":"2017/09/25/accessing-the-index-in-python-for-loops/","link":"","permalink":"https://so-matome.net2017/09/25/accessing-the-index-in-python-for-loops/","excerpt":"質問：例えばこんなリストがあったとき、このリストのインデックスにアクセスするにはどうしたらいいの？\nints = [8, 23, 45, 12, 78]\nこれをforループで使う時、どうやってこのループインデックス（この場合１から５）にアクセスしたらいいの？\n By  Joan Venge | 質問日時： Feb 6 ‘09 at 22:47 ","text":"質問：例えばこんなリストがあったとき、このリストのインデックスにアクセスするにはどうしたらいいの？ ints = [8, 23, 45, 12, 78] これをforループで使う時、どうやってこのループインデックス（この場合１から５）にアクセスしたらいいの？ By Joan Venge | 質問日時： Feb 6 ‘09 at 22:47 回答1:インデックス変数とかの追加の状態変数を使用するのはあんまりPythonっぽく無いんだ(CとかPHPなどの言語だと普通だけど)。 より良い方法は組み込み関数を使うこと：enumerate()]、Python2と3の両方で利用できるよ： for idx, val in enumerate(ints): print(idx, val) 詳しく知りたければPEP 279を参照してみて。 By Mike Hordecki | 回答日時： Feb 6 ‘09 at 22:52 回答2: これをforループで使う時、どうやってこのループインデックス（この場合１から５）にアクセスしたらいいの？ enumerateを使おう： for index, item in enumerate(items): print(index, item) あとインデックスはゼロから始まるので、これで0〜4になることに注意。もし、あんたがカウントをしたいっていうのなら、こんな感じに説明するかな。 慣習的じゃないやり方君が求めているのは、以下のPythonicなやり方だろ。これはほとんどの低レベル言語のプログラマーはこのアルゴリズムを使うと思う： index = 0 # Pythonのインデックスはゼロから始まるfor item in items: # Pythonのforループは \"for each\"ループ print(index, item) index += 1 それかfor-eachループを持たない言語だと： index = 0while index &amp;lt; len(items): print(index, items[index]) index += 1 それか、ときどきより一般的に(慣習的じゃない)やり方： for index in range(len(items)): print(index, items[index]) 列挙関数enumerateを使うPythonのenumerate関数は、インデックスのための計算処理を隠して、変数をカプセル化することで視覚的にごちゃごちゃしたのを減らす効果がある。こんな感じ： for index, item in enumerate(items, start=0): # default is zero print(index, item) このコードサンプルは、Pythonの慣習的な書き方と、そうじゃない書き方の違いを表すかなり典型的な例。慣用的なコードは洗練されている(でもそんな複雑じゃない)Python。この慣用コードは、言語の設計者が意図した書き方、つまり、通常このコードはあんまり読みやすくないけど、より効率的。 カウントするたとえインデックスが必要じゃなくても、iterationsのカウントが１から始まって、最後は自分のカウントする数になってほしい(時にはあった方がいい)時がある。 for count, item in enumerate(items, start=1): # default is zero print(item)print('there were &#123;0&#125; items printed'.format(count)) カウントする、っていうのは君が求めているもの以上のもの(インデックスだけじゃなくて)だとおもうけど、念のため。 結論 Pythonのインデックスはゼロから始まる 反復処理中にこれらのインデックスを反復可能コードから取得するには、列挙関数を使用します 列挙型を慣用的な方法で(タプルのアンパックと一緒に)使用すると、読みやすくメンテナンス可能なコードが作れる。 だから、こうすべき： for index, item in enumerate(items, start=0): # Pythonのインデックスはゼロから始まる print(index, item) By Aaron Hall♦ | 回答日時： Jan 21 ‘15 at 17:11 回答3:0以外の1から始めるのはかなり簡単： for index in enumerate(iterable, start=1): print index 注意インデックスはここではタプル (idx、item)だよ。ちょっとややこしいかもだけど。 By Clayton | 回答日時： May 27 ‘14 at 10:04 回答4:for i in range(len(ints)): print i, ints[i] By David Hanak | 回答日時： Feb 6 ‘09 at 22:49 Source: Accessing the index in Python ‘for’ loops","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"loops","slug":"loops","permalink":"https://so-matome.net/tags/loops/"},{"name":"list","slug":"list","permalink":"https://so-matome.net/tags/list/"}]},{"title":"ディレクトリの全部のファイルを一覧表示するのってどうすればいい？ [Python]","slug":"how-do-i-list-all-files-of-a-directory","date":"2017-09-25T14:23:48.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/25/how-do-i-list-all-files-of-a-directory/","link":"","permalink":"https://so-matome.net2017/09/25/how-do-i-list-all-files-of-a-directory/","excerpt":"質問：Pythonでディレクトリ内のすべてのファイルをリストアップして、リストに追加するのってどうやるの？\n By  duhhunjonn | 質問日時： Jul 8 ‘10 at 19:31 ","text":"質問：Pythonでディレクトリ内のすべてのファイルをリストアップして、リストに追加するのってどうやるの？ By duhhunjonn | 質問日時： Jul 8 ‘10 at 19:31 回答1:os.listdir()でディレクトリにある全てのもの（つまりファイルとディレクトリ）を取得できるよ。 ファイルのみが必要な場合は、os.path： from os import listdirfrom os.path import isfile, joinonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))] それか、os.walk()も使えるかな。これは、訪問先のディレクトリごとに2つのリストを生成する — ファイルとディレクトリに分けてくれるんだ。トップディレクトリのみが必要な場合は、１回目のループでbreakすればいいよ。 from os import walkf = []for (dirpath, dirnames, filenames) in walk(mypath): f.extend(filenames) break 最後に、下の例のように、あるリストを別のリストに追加するには、.extend()を使うか、下の方法みたいにするか： &gt;&gt;&gt; q = [1, 2, 3]&gt;&gt;&gt; w = [4, 5, 6]&gt;&gt;&gt; q = q + w&gt;&gt;&gt; q[1, 2, 3, 4, 5, 6] 個人的には、 .extend()の方が好みだけど。 By pycruft | 回答日時： Jul 8 ‘10 at 21:01 回答2:僕ははglobモジュールを使用する方が好きかな。パターンマッチングと展開が行われるから。 import globprint(glob.glob(\"/home/adam/*.txt\")) 上は、クエリーされたファイルを含むリストを返すよ： ['/home/adam/file1.txt', '/home/adam/file2.txt', .... ] By adamk | 回答日時： Jul 9 ‘10 at 18:13 回答3:import osos.listdir(\"somedirectory\") これは、”somedirectory”内のすべてのファイルとディレクトリのリストを返す。 By sepp2k | 回答日時： Jul 8 ‘10 at 19:35 Source: How do I list all files of a directory?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"directory","slug":"directory","permalink":"https://so-matome.net/tags/directory/"}]},{"title":"append vs. extend [Python]","slug":"append-vs-extend","date":"2017-09-25T14:23:42.000Z","updated":"2017-10-16T19:34:36.000Z","comments":true,"path":"2017/09/25/append-vs-extend/","link":"","permalink":"https://so-matome.net2017/09/25/append-vs-extend/","excerpt":"質問：リストメソッドの append()と extend()の違いって何？\n By  Claudiu | 質問日時： Oct 31 ‘08 at 5:55 ","text":"質問：リストメソッドの append()と extend()の違いって何？ By Claudiu | 質問日時： Oct 31 ‘08 at 5:55 回答1:append：最後にオブジェクトを追加する x = [1, 2, 3]x.append([4, 5])print (x) は以下を出力 [1、2、3、[4、5]] extend：iterableから要素を追加してリストを拡張 x = [1, 2, 3]x.extend([4, 5])print (x) は以下を出力 [1、2、3、4、5] By kender | 回答日時： Oct 31 ‘08 at 6:02 回答2:appendは要素をリストに追加する、extendは最初のリストを別のリスト(かリストじゃない別の繰り返し可能なiterable)に連結させる &gt;&gt;&gt; li = ['a', 'b', 'mpilgrim', 'z', 'example']&gt;&gt;&gt; li['a', 'b', 'mpilgrim', 'z', 'example']&gt;&gt;&gt; li.append(\"new\") &gt;&gt;&gt; li['a', 'b', 'mpilgrim', 'z', 'example', 'new']&gt;&gt;&gt; li.insert(2, \"new\") &gt;&gt;&gt; li['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new']&gt;&gt;&gt; li.extend([\"two\", \"elements\"]) &gt;&gt;&gt; li['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements'] Dive intoPythonより By Harley Holcombe | 回答日時： Oct 31 ‘08 at 5:57 回答3:この文脈だと、文字列も繰り返し可能ってことを覚えておくといいかな &gt;&gt;&gt; a = [1, 2]&gt;&gt;&gt; a[1, 2]&gt;&gt;&gt; a.extend('hey')&gt;&gt;&gt; a[1, 2, 'h', 'e', 'y'] By tatsujin | 回答日時： Nov 4 ‘08 at 15:19 Source: append vs. extend","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"list","slug":"list","permalink":"https://so-matome.net/tags/list/"},{"name":"data-structures","slug":"data-structures","permalink":"https://so-matome.net/tags/data-structures/"},{"name":"append","slug":"append","permalink":"https://so-matome.net/tags/append/"},{"name":"extend","slug":"extend","permalink":"https://so-matome.net/tags/extend/"}]},{"title":"リストが空であるかどうかをチェックする最良の方法って？ [Python]","slug":"best-way-to-check-if-a-list-is-empty","date":"2017-09-25T14:23:37.000Z","updated":"2017-10-16T19:34:36.000Z","comments":true,"path":"2017/09/25/best-way-to-check-if-a-list-is-empty/","link":"","permalink":"https://so-matome.net2017/09/25/best-way-to-check-if-a-list-is-empty/","excerpt":"質問：例えばこんなのがあった時、a = []\nどうやってこの変数がカラだってチェックすればいいの？\n By  Ray Vega | 質問日時： Sep 10 ‘08 at 6:20 ","text":"質問：例えばこんなのがあった時、a = [] どうやってこの変数がカラだってチェックすればいいの？ By Ray Vega | 質問日時： Sep 10 ‘08 at 6:20 回答1:if not a: print(\"リストは空\") 空リストの暗黙的なブーリアン性を使うのってとってもPythonic。 By Patrick | 回答日時： Sep 10 ‘08 at 6:28 回答2:それをするためのPythonicな方法は、PEP 8スタイルガイドにあるよ： シーケンス(文字列、リスト、タプル)の場合、空のシーケンスはfalseだってことを使う： &lt;b&gt;Yes:&lt;/b&gt; if not seq: if seq:&lt;b&gt;No:&lt;/b&gt; if len(seq): if not len(seq): By Harley Holcombe | 回答日時： Sep 10 ‘08 at 10:33 回答3:明示的なやり方が好きかな： if len(li) == 0: print('the list is empty') この方法だと、liがシーケンス(リスト)で、サイズを調べたいことが100％明確だし。。ここでの問題は if not li:...は、liはブール変数かも、っていう間違った印象を与えかねないこと。 By Jabba | 回答日時： Sep 5 ‘11 at 0:30 Source: Best way to check if a list is empty","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"list","slug":"list","permalink":"https://so-matome.net/tags/list/"}]},{"title":"Pythonで外部コマンドを呼び出す [Python]","slug":"calling-an-external-command-in-python","date":"2017-09-25T14:23:15.000Z","updated":"2017-10-16T19:34:36.000Z","comments":true,"path":"2017/09/25/calling-an-external-command-in-python/","link":"","permalink":"https://so-matome.net2017/09/25/calling-an-external-command-in-python/","excerpt":"質問：Pythonスクリプトから外部コマンド(UNIXシェルとかWindowsのコマンドプロンプトで入力したみたいに)ってどうやって呼び出せるの？\n By  freshWoWer | 質問日時： Sep 18 ‘08 at 1:35 ","text":"質問：Pythonスクリプトから外部コマンド(UNIXシェルとかWindowsのコマンドプロンプトで入力したみたいに)ってどうやって呼び出せるの？ By freshWoWer | 質問日時： Sep 18 ‘08 at 1:35 回答1:標準ライブラリのsubprocess モジュールを参照： from subprocess import callcall([\"ls\", \"-l\"]) subprocessはsystemと比較して、より柔軟性があることが利点。（stdout、stderr、 “実際の”ステータスコード、より良いエラー処理、等…)。 公式ドキュメントもsubprocessモジュールを代替のos.system()として推奨してる。 subprocessモジュールは、新しいプロセスを産み出して、その結果を処理するため強力な機能を提供する。このモジュールを使用することは、この関数os.system()]を使うのより望ましい。 subprocessドキュメントの「古い関数をsubprocessモジュールで置き換えるの部分はいろいろ役に立つレシピがあるかも。 subprocessモジュールの公式文書は： Python 2 - subprocess Python 3 - subprocess By David Cournapeau | 回答日時： Sep 18 ‘08 at 1:39 回答2:僕なら普通こう書く、 import subprocessp = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)for line in p.stdout.readlines(): print line,retval = p.wait() パイプ内の stdoutデータは自由に使える。実際には、それらのパラメータ(stdout =、 stderr =)は省略できるけど。その場合はos.system()のように振る舞う。 By EmmEff | 回答日時： Sep 18 ‘08 at 18:20 Source: Calling an external command in Python","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"shell","slug":"shell","permalink":"https://so-matome.net/tags/shell/"},{"name":"command","slug":"command","permalink":"https://so-matome.net/tags/command/"},{"name":"subprocess","slug":"subprocess","permalink":"https://so-matome.net/tags/subprocess/"},{"name":"external","slug":"external","permalink":"https://so-matome.net/tags/external/"}]},{"title":"__name__ == \"__main__\"って何やってるの？","slug":"what-does-if-name-main-do","date":"2017-09-25T14:23:09.000Z","updated":"2017-10-16T19:34:38.000Z","comments":true,"path":"2017/09/25/what-does-if-name-main-do/","link":"","permalink":"https://so-matome.net2017/09/25/what-does-if-name-main-do/","excerpt":"質問：if __name__ == &quot;__main__&quot;: ってこの場合で何やってるの？# Threading exampleimport time, threaddef myfunction(string, sleeptime, lock, *args):    while 1:        lock.acquire()        time.sleep(sleeptime)        lock.release()        time.sleep(sleeptime)if __name__ == \"__main__\":    lock = thread.allocate_lock()    thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock))    thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock))\n By  Devoted | 質問日時： Jan 7 ‘09 at 4:11 ","text":"質問：if __name__ == &quot;__main__&quot;: ってこの場合で何やってるの？# Threading exampleimport time, threaddef myfunction(string, sleeptime, lock, *args): while 1: lock.acquire() time.sleep(sleeptime) lock.release() time.sleep(sleeptime)if __name__ == \"__main__\": lock = thread.allocate_lock() thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock)) thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock)) By Devoted | 質問日時： Jan 7 ‘09 at 4:11 回答1:Pythonインタプリタがソースファイルを読み込むと、ファイル内のすべてのコードが実行される。 コードを実行する前に、いくつかの特殊変数を定義するんだ。たとえば、Pythonインタプリタがそのモジュール(＝ソースファイル)をメインプログラムとして走らせているとすると、特殊な __name__変数を値&quot; __main __ &quot;として設定する。このファイルが別のモジュールからインポートされている場合は、 __name__はモジュールの名前に設定されるってわけなんだ。 君のスクリプトの場合、それがメインとして実行されていると仮定しよう。で、例えば、コマンドラインでこう呼び出したとする： python threading_example.py 特殊変数を設定した後、import文を読み込み、それらのモジュールをロードする。次に、 defブロックを評価し、関数オブジェクトの作成とそれを指しているmyfunctionという変数の作成を行う。その後、if文を読み込み、__name__は&quot;__main __&quot;と等しいことを知り、その中のブロックを実行する。 One reason for doing this is that sometimes you write a module (a .py file) where it can be executed directly. Alternatively, it can also be imported and used in another module. By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves. これを行う1つの理由は、直接実行することができるモジュール(.pyファイル)を時々書く必要があるから、って言う理由。それ以外の時はインポートして、他のモジュールとして使うこともできる。メイン関数のチェックを行うことで、そのモジュールをプログラムとして実行したい時にのみ実行されるコードを持つことができるし、また、誰かがあなたのモジュールをインポートしてあなたの関数を呼び出そうとしているときは実行されない。 詳しくはこのページを参照してみて。 By Mr Fooz | 回答日時： Jan 7 ‘09 at 4:26 Source: What does if name == “main”: do?","raw":null,"content":null,"categories":[],"tags":[{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"python","slug":"python","permalink":"https://so-matome.net/tags/python/"},{"name":"module","slug":"module","permalink":"https://so-matome.net/tags/module/"},{"name":"namespaces","slug":"namespaces","permalink":"https://so-matome.net/tags/namespaces/"},{"name":"main","slug":"main","permalink":"https://so-matome.net/tags/main/"},{"name":"idioms","slug":"idioms","permalink":"https://so-matome.net/tags/idioms/"}]},{"title":"jQueryで要素が非表示になっているかどうかを確認するのってどうすればいい？？","slug":"how-do-i-check-if-an-element-is-hidden-in-jquery","date":"2017-09-25T05:10:14.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/25/how-do-i-check-if-an-element-is-hidden-in-jquery/","link":"","permalink":"https://so-matome.net2017/09/25/how-do-i-check-if-an-element-is-hidden-in-jquery/","excerpt":"質問：.hide()、 .show()、 .toggle()関数を使えば要素の可視性を切り替えることができるけど、要素が表示されているか隠れているかはどうやってテストすればいいの？\n By  Philip Morton | 質問日時： Oct 7 ‘08 at 13:03 ","text":"質問：.hide()、 .show()、 .toggle()関数を使えば要素の可視性を切り替えることができるけど、要素が表示されているか隠れているかはどうやってテストすればいいの？ By Philip Morton | 質問日時： Oct 7 ‘08 at 13:03 回答1:１つの要素についての質問だから、このコードがいいかな $(element).is(\":visible\"); [下の人の提案]と同じだけど、１つの要素についてのもの;そしてこれはjQueryのFAQで推奨されてるアルゴリズムとおんなじ By Tsvetomir Tsonev | 回答日時： Oct 7 ‘08 at 13:30 回答2:hiddenセレクタが使えるよ： //非表示になってるのすべての要素とマッチする$('element:hidden') それか、visibleセレクタ： // Matches all elements that are visible//表示されているすべての要素とマッチ。$('element:visible') By twernt | 回答日時： Oct 7 ‘08 at 13:16 回答3:if ( $(element).css('display') == 'none' )&#123; // element is hidden // 要素は隠されてる&#125; 関数はvisibility属性では機能しないけど。 By Mote | 回答日時： Oct 7 ‘08 at 13:09 回答4:どの答えも、僕が質問だと思ってた（そして僕が探していたもの）のと違う答えしてる、つまり_「visibility: hiddenを持つアイテムをどうやって扱うの？っていう質問。:visibleも:hiddenもここでは使えない、というのはどちらもドキュメントごとの表示を探してるから。僕がわかる限り、CSSの可視性を処理するセレクタってないよね。僕の解決方法を書いてみる(標準のjQueryセレクタでは、もっといい書き方があるかもだけど)。 $(\".item\").each(function() &#123; if ($(this).css(\"visibility\") == \"hidden\") &#123; //非可視状態を処理する &#125; else &#123; //可視状態を処理する &#125;&#125;); By aaronLile | 回答日時： Mar 24 ‘11 at 18:44 回答5: どうやってトグルする要素の状態調べるの？より 要素が折りたたまれているかどうかは、:visibleと:hiddenセレクタ: var isVisible = $('#myDiv').is(':visible');var isHidden = $('#myDiv').is(':hidden'); 可視状態に基づいて要素に何かするのであれば、セレクタ式に :visibleや:hiddenを含める。例えば： $('#myDiv:visible').animate(&#123;left: '+=200px'&#125;, 'slow'); By user574889 | 回答日時： Jan 13 ‘11 at 21:13 Source: How do I check if an element is hidden in jQuery?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"https://so-matome.net/tags/jquery/"},{"name":"dom","slug":"dom","permalink":"https://so-matome.net/tags/dom/"},{"name":"visibility","slug":"visibility","permalink":"https://so-matome.net/tags/visibility/"}]},{"title":"JavaScriptである文字列に別な文字列（substring）が含まれているかどうかをチェックする方法って？","slug":"how-to-check-whether-a-string-contains-a-substring-in-javascript","date":"2017-09-24T23:46:44.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/25/how-to-check-whether-a-string-contains-a-substring-in-javascript/","link":"","permalink":"https://so-matome.net2017/09/25/how-to-check-whether-a-string-contains-a-substring-in-javascript/","excerpt":"質問：String.contains()メソッドだと思ったんだけど、ちょっと違うみたい。これをチェックするいい方法ってあるかな？","text":"質問：String.contains()メソッドだと思ったんだけど、ちょっと違うみたい。これをチェックするいい方法ってあるかな？ 回答1:考えられる方法としてはこんな感じ： indexOfvar string = \"foo\", substring = \"oo\";string.indexOf(substring) !== -1; String.prototype.indexOfは、ある文字列の中にある他の文字列の位置を返す。見つからなければ -1を返す。 (ES6) includes - この回答、またはこの回答を参照 var string = \"foo\", substring = \"oo\";string.includes(substring); search - この回答参照 var string = \"foo\", expr = /oo/;string.search(expr); lodash includes - この回答参照 var string = \"foo\", substring = \"oo\";_.includes(string, substring); RegExp - この回答参照 var string = \"foo\", expr = /oo/; // no quotes hereexpr.test(string); Match - この回答参照 var string = \"foo\", expr = /oo/;string.match(expr); パフォーマンステスト(http://jsben.ch/#/RVYk7)の結果によればでは、indexOfが最速みたいなので、スピードが重要なポイントになる場合は、最良の選択かも。 By Fabien Ménager | 回答日時： Nov 24 ‘09 at 13:05 回答2:こうやればStringに containsメソッドを簡単に追加できるよ： function(it){このthis.indexOfを返します！ }; }String.prototype.contains = function(it) &#123; return this.indexOf(it) != -1; &#125;; _Note：これを使うのはいろいろ議論の別れるところだけど、自分自身の判断で使用して。 これ以外だと： if (typeof String.prototype.contains === 'undefined') &#123; String.prototype.contains = function(it) &#123; return this.indexOf(it) != -1; &#125;; &#125; By Avi Flax | 回答日時： Dec 30 ‘09 at 4:23 回答3:JavaScriptが大文字と小文字を区別するのに気をつけて。きみのコードだと、 indexof() でも実際には indexOf() これを修正し、うまくいくか確認してみて： if (test.indexOf(\"title\") !=-1) &#123; alert(elm); foundLinks++;&#125; By Victor | 回答日時： Nov 24 ‘09 at 14:17 Source: How to check whether a string contains a substring in JavaScript?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"string","slug":"string","permalink":"https://so-matome.net/tags/string/"},{"name":"substring","slug":"substring","permalink":"https://so-matome.net/tags/substring/"},{"name":"contains","slug":"contains","permalink":"https://so-matome.net/tags/contains/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"string-matching","slug":"string-matching","permalink":"https://so-matome.net/tags/string-matching/"}]},{"title":"ローカルとリモートの両方でGitブランチを削除するには？","slug":"how-do-i-delete-a-git-branch-both-locally-and-remotely","date":"2017-09-24T23:05:54.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/25/how-do-i-delete-a-git-branch-both-locally-and-remotely/","link":"","permalink":"https://so-matome.net2017/09/25/how-do-i-delete-a-git-branch-both-locally-and-remotely/","excerpt":"質問：ローカルと、Github上のフォークした自分のリモートプロジェクトのブランチを削除したいんだけど。\nリモートのブランチを削除するためにこれまで試みた方法（失敗した）：\n$ git branch -d remotes/origin/bugfixerror: branch 'remotes/origin/bugfix' not found.$ git branch -d origin/bugfixerror: branch 'origin/bugfix' not found.$ git branch -rd origin/bugfixDeleted remote branch origin/bugfix (was 2a14ef7).$ git pushEverything up-to-date$ git pullFrom github.com:gituser/gitproject* [new branch] bugfix -&amp;gt; origin/bugfixAlready up-to-date.\nremotes/origin/bugfixブランチをローカルとリモート両方で削除するにはほか何をしたらいいの？\n By  Matthew Rankin | 質問日時： Jan 5 ‘10 at 1:12 ","text":"質問：ローカルと、Github上のフォークした自分のリモートプロジェクトのブランチを削除したいんだけど。 リモートのブランチを削除するためにこれまで試みた方法（失敗した）： $ git branch -d remotes/origin/bugfixerror: branch 'remotes/origin/bugfix' not found.$ git branch -d origin/bugfixerror: branch 'origin/bugfix' not found.$ git branch -rd origin/bugfixDeleted remote branch origin/bugfix (was 2a14ef7).$ git pushEverything up-to-date$ git pullFrom github.com:gituser/gitproject* [new branch] bugfix -&amp;gt; origin/bugfixAlready up-to-date. remotes/origin/bugfixブランチをローカルとリモート両方で削除するにはほか何をしたらいいの？ By Matthew Rankin | 質問日時： Jan 5 ‘10 at 1:12 回答1:要旨$ git push -d origin &lt;ブランチ名&gt;$ gitブランチ-d &lt;ブランチ名&gt; ローカルブランチを削除localブランチを削除するには、次のいずれかを使う。 $ git branch -d ブランチ名$ git branch -D ブランチ名 注意： -dオプションは、--deleteのエイリアス。このオプションは、ブランチが既に上流ブランチに完全にマージされている場合にのみ削除するよ。あと--Dを使うこともでるけど、これは--delete --forceのエイリアスで、「merged statusに関係なく」ブランチを削除するよ。 [出典： man git-branch] リモートブランチを削除する[2017年9月8日更新]Git v1.7.0では、 remote ブランチを削除するには $ git push origin --delete &lt;ブランチ名&gt; こっちの方が覚えやすいかも $ git push origin :&lt;ブランチ名&gt; これはGit v1.5.0以降で、「リモートブランチやタグを削除するために」追加されたやつ。 Git v2.8.0以降では、git pushの際、--deleteのエイリアスとして--dオプションつけて使うこともできるよ。 だから、インストールしたGitのバージョンによって、より簡単なシンタックスか難しいシンタックスになるかは変わってくる。 By Matthew Rankin | 回答日時： Jan 5 ‘10 at 1:13 回答2:上のの答えはremoteブランチを削除するのにベストだと思うし、この説明してくれてありがとうって思うけど、この2つのコマンドを簡単な区別するをするために書くと、 ローカルブランチ を削除するには： git branch -d {th​​e_local_branch}(マージされた状態をチェックせずに強制的に削除する場合は-Dを使用） リモートブランチ をサーバーから削除するには： git push origin --delete {the_remote_branch} 参考：https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote By Eric Brotto | 回答日時： Jun 12 ‘12 at 14:51 回答3:リモートブランチを削除するには、次のコマンドを使用してもいいかも。 git push --delete origin serverfix 以下でも同じ git push origin：serverfix こっちのほうが覚えやすいかな？ By pagetribe | 回答日時： Oct 27 ‘11 at 22:22 回答4:ブランチを削除する場合は、最初に削除するブランチ以外のブランチをチェックアウトする git checkout &lt;削除する以外のブランチ&gt; ローカルブランチの削除： git branch -D &lt;削除するブランチ&gt; リモートブランチの削除： git push origin --delete &lt;削除するブランチ&gt; By Praveen Hiremath | 回答日時： Oct 7 ‘14 at 13:52 Source: How do I delete a Git branch both locally and remotely?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"git","slug":"git","permalink":"https://so-matome.net/tags/git/"},{"name":"git-branch","slug":"git-branch","permalink":"https://so-matome.net/tags/git-branch/"},{"name":"git-remote","slug":"git-remote","permalink":"https://so-matome.net/tags/git-remote/"}]},{"title":"Gitの最後のコミットを元に戻す方法ってどうやるの？","slug":"how-to-undo-the-last-commits-in-git","date":"2017-09-24T22:42:48.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/24/how-to-undo-the-last-commits-in-git/","link":"","permalink":"https://so-matome.net2017/09/24/how-to-undo-the-last-commits-in-git/","excerpt":"質問：間違ったファイルをGitにコミットしたんだけど、まだサーバーへはプッシュしていないんだ。\nこのコミットを元に戻すにはどうすればいいですか？","text":"質問：間違ったファイルをGitにコミットしたんだけど、まだサーバーへはプッシュしていないんだ。 このコミットを元に戻すにはどうすればいいですか？ 回答1:コミットとやり直しを元に戻す$ git commit -m \"クソ間違えた内容\" (1)$ git reset HEAD~ (2)&lt;&lt;必要に応じてファイルを編集する&gt;&gt; (3)$ git add ... (4)$ git commit -c ORIG_HEAD (5) これを元に戻したい これによって、作業ツリー(ディスク上のファイルの状態)は変更されませんが、コミットが取り消され、コミットされていない変更が残される(git statusでは” Changes not staged for commit”になってるのでコミットする前に再度追加する必要あり)。以前のコミットにもっと多くの変更をaddしたい場合や、コミットメッセージ（注）を変更したい場合は git reset HEAD〜のように git reset --soft HEAD〜を使うことができる。 作業ツリーファイルを修正。 新しいコミットに含めるものを git addする。 変更をコミットし、古いコミット・メッセージを再使用する。 reset は古いヘッドを .git/ORIG_HEAD にコピーする。 -c ORIG_HEAD で commit&#39; を実行するとエディタが開く。エディタは最初は古いコミットのログメッセージを含み、編集することができる。メッセージを編集する必要がない場合は、-C` オプションが使えるよ。 注： commitメッセージで間違えただけなら、以前のコミットにリセットする必要はないことに注意。この場合、 (それまでの変更を戻すために)git resetすればいい。そしてgit commit --amendすると、最後のコミットメッセージを含んだデフォルトのエディタが開くはず。 ただし、新しい変更をインデックスに追加した場合は、commit --amendは前のコミットにそれらを追加するよ。 回答2:適宜ファイルを追加/削除する： git rm classdirgit add sourcedir それからコミットを修正： git commit --amend 以前の誤ったコミットは、新しいインデックス状態を反映するために編集されるよ。言い換えれば、それは最初から間違いを犯さなかったようなかんじに。 まだプッシュしていない場合にのみこれを行うべきであることに注意。プッシュしちゃったなら、普通に修正をコミットする必要がある。 By bdonlan | 回答日時： May 29 ‘09 at 18:16 Source: How to undo the last commits in Git?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"},{"name":"git","slug":"git","permalink":"https://so-matome.net/tags/git/"},{"name":"git-reset","slug":"git-reset","permalink":"https://so-matome.net/tags/git-reset/"},{"name":"git-revert","slug":"git-revert","permalink":"https://so-matome.net/tags/git-revert/"},{"name":"git-rebase","slug":"git-rebase","permalink":"https://so-matome.net/tags/git-rebase/"},{"name":"git-commit","slug":"git-commit","permalink":"https://so-matome.net/tags/git-commit/"}]},{"title":"他のウェブページにリダイレクトする方法ってどうやるの？","slug":"how-to-redirect-to-another-webpage","date":"2017-09-24T22:18:43.000Z","updated":"2017-10-16T19:34:37.000Z","comments":true,"path":"2017/09/24/how-to-redirect-to-another-webpage/","link":"","permalink":"https://so-matome.net2017/09/24/how-to-redirect-to-another-webpage/","excerpt":"質問：jQueryか純粋なJavaScriptを使って、あるページから別のページにユーザーをリダイレクトする方法ってどうやるの？\n By  venkatachalam | 質問日時： Feb 2 ‘09 at 12:54 ","text":"質問：jQueryか純粋なJavaScriptを使って、あるページから別のページにユーザーをリダイレクトする方法ってどうやるの？ By venkatachalam | 質問日時： Feb 2 ‘09 at 12:54 回答1:汝、リダイレクトするためだけにjQueryを使うべからずjQueryは必要ないよ。 window.location.replace(...) は、HTTPリダイレクトをよくシミュレートできるから。 window.location.replace(...)は window.location.hrefを使うよりも優れてる、というのはreplace()は元のページをセッション履歴に残さないから、ユーザーが終わりのないバック・ボタンの失敗に悩まされることはないよ。 もしリンクをクリックするのをシミュレートしたい場合は、 location.href を使うHTTPリダイレクトをシミュレートする場合は、 location.replaceを使う 例えば： // HTTPリダイレクトと同様の動作window.location.replace(\"http://stackoverflow.com\");//リンクをクリックすると同様の動作window.location.href = \"http://stackoverflow.com\"; By Ryan McGeary | 回答日時： Feb 3 ‘09 at 4:24 回答2: 警告：この回答は単に解決策の１つとして提供されているに過だけ。これはjQueryが必要なので、明らかに最善の解決策っていうわけじゃない。代わりに、純粋なJavaScriptでやったほうがいいと思う。 $(location).attr('href', 'http://stackoverflow.com') By Boris Guéry | 回答日時： Oct 28 ‘09 at 16:35 回答3: ページをリダイレクトするための標準的な “素の” JavaScriptでの方法： `window.location.href = ‘newPage.html’; リダイレクト時にHTTPREFERERを失っている_場合は、以下を参考に このセクションは HTTP_REFERERを安全なものの1つとして使用する人のためのもの(あんまりいい保護手段じゃないけど)。Internet Explorer 8またはそれ以前のを使用している場合、JavaScriptのページリダイレクションがどうあっても、これらの変数が失われる(location.hrefなど)。 以下では、HTTP_REFERERを失わないようにIE8より以前での実装をやってみる。それ以外の場合は、ほとんどの場合window.location.hrefでいけるはず。 HTTP_REFERER(URLの貼り付け、セッションなど)に対するテストはリクエストがちゃんとしてるか判断するのに手助けに成るはず。(注：これらのリファラを回避する/偽装する方法ももちろん存在する) 簡単なクロスブラウザテストソリューション(Internet Explorer 9以降および他のすべてのブラウザではwindow.location.hrefを) 使用法： redirect(&#39;anotherpage.aspx&#39;); function redirect (url) &#123; var ua = navigator.userAgent.toLowerCase(), isIE = ua.indexOf('msie') !== -1, version = parseInt(ua.substr(4, 2), 10); // Internet Explorer 8以下 if (isIE &amp;amp;&amp;amp; version &amp;lt; 9) &#123; var link = document.createElement('a'); link.href = url; document.body.appendChild(link); link.click(); &#125; //他のすべてのブラウザは標準のwindow.location.hrefを使用可(Internet Explorer 8以下のようにHTTP_REFERERを失うことはない) else &#123; window.location.href = url; &#125;&#125; By Mark Pieszak | 回答日時： Jul 27 ‘12 at 14:41 回答4:これ使いな： // window.locationwindow.location.replace('http://www.example.com')window.location.assign('http://www.example.com')window.location.href = 'http://www.example.com'document.location.href = '/path'// window.historywindow.history.back()window.history.go(-1)// window.navigate; ONLY for old versions of Internet Explorerwindow.navigate('top.jsp')// たぶんあんまりよくないself.location = 'http://www.example.com';top.location = 'http://www.example.com';// jQuery$(location).attr('href','http://www.example.com')$(window).attr('location','http://www.example.com')$(location).prop('href', 'http://www.example.com') By Govind Singh | 回答日時： Jan 28 ‘14 at 4:28 回答5:これならどのブラウザでも動作するよ： window.location.href = 'your_url'; By Fred | 回答日時： Oct 22 ‘10 at 23:45 Source: How to redirect to another webpage?","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"javascript","slug":"javascript","permalink":"https://so-matome.net/tags/javascript/"},{"name":"jquery","slug":"jquery","permalink":"https://so-matome.net/tags/jquery/"},{"name":"redirect","slug":"redirect","permalink":"https://so-matome.net/tags/redirect/"}]},{"title":"このサイトについて","slug":"about","date":"2017-09-01T08:00:00.000Z","updated":"2017-10-20T21:59:08.000Z","comments":true,"path":"2017/09/01/about/","link":"","permalink":"https://so-matome.net2017/09/01/about/","excerpt":"","text":"このサイトについて本サイトは海外の技術系ウェブサイトどで投稿された質問や記事をまとめ、翻訳しているサイトです。サイト名にあるように海外の有名質問サイトStack Overflowが中心となりますが、それ以外のサイトでも管理人が参考になったと思う記事を中心にまとめ、ご紹介しています。また、技術に関連した記事のみでなく、息抜きとして海外のWebコミックも翻訳・紹介しています。 サイト名 Stack Overflow まとめ トップページアドレス http://somatome.github.io/somatome/ 紹介している記事は基本的に、Web開発（Javascript）とデータサイエンス（Python, R）が中心となっています。 記事の著作権について本サイトで参考にさせていただいた文章に関する著作権等は各権利所有者に帰属します。また、翻訳には正確さを心掛けていますが、全文翻訳・逐次訳ではない点にご注意願います。万が一問題がございましたら、お手数ですが問題箇所についてお問い合わせください。 参考サイト主に以下のようなサイトを参考にしています： Stack Overflow Quora Medium Commit Strip もし翻訳してほしいサイト、ページがあれば下記フォームやTwitter等で遠慮なくご連絡ください。メールアドレス、コメントは特に必要ありません。 管理人について現在海外に在住しており（合計9年以上）、データ解析等の職務に従事。プログラミング歴15年以上。扱うプログラミング言語は Python R Javascript Matlab LabVIEW C など。最近はElectronなどのJavascriptを使ったフレームワークを勉強中。","raw":null,"content":null,"categories":[],"tags":[{"name":"webdev","slug":"webdev","permalink":"https://so-matome.net/tags/webdev/"},{"name":"datasci","slug":"datasci","permalink":"https://so-matome.net/tags/datasci/"}]}]}